<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Epiverse-TRACE: tools for outbreak analytics</title>
<link>https://epiverse-trace.github.io/blog.html#category=R</link>
<atom:link href="https://epiverse-trace.github.io/blog-r.xml" rel="self" type="application/rss+xml"/>
<description>A place for Epiverse-TRACE to share their reflections, learnings, and showcase available tools.</description>
<generator>quarto-1.8.16</generator>
<lastBuildDate>Mon, 14 Apr 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Integration testing in Epiverse-TRACE</title>
  <dc:creator>Joshua W. Lambert</dc:creator>
  <link>https://epiverse-trace.github.io/posts/integration-testing/</link>
  <description><![CDATA[ 





<p>In Epiverse-TRACE we develop a suite of R packages that tackle predictable tasks in infectious disease outbreak response. One of the <a href="https://epiverse-trace.github.io/blueprints/principles.html">guiding software design principles</a> we have worked towards is <em>interoperability</em> of tooling, both between Epiverse software, but also integrating with the <a href="https://epiverse-trace.github.io/slides/epireview-hackathon-july-2024/">wider ecosystem of R packages in epidemiology</a>.</p>
<p>This principle stems from the needs of those responding to, quantifying, and understanding outbreaks, to create epidemiological pipelines. These pipelines combine a series of tasks, where the output of one task is input into the next, forming an analysis chain (directed acyclic graph of computational tasks). By building interoperability into our R packages we try to reduce the friction of connecting different blocks in the pipeline. The <a href="https://epiverse-trace.github.io/slides/interoperability-epiverse/">three interoperability principles in our strategy</a> are: 1) <em>consistency</em>, 2) <em>composability</em>, and 3) <em>modularity</em>.</p>
<p>To ensure interoperability between Epiverse-TRACE R packages is developed and maintained, we utilise <em>integration testing</em>. This post explains our use of integration testing with a case study looking at the complementary design and interoperability of the <a href="https://epiverse-trace.github.io/simulist/">{simulist}</a> and <a href="https://epiverse-trace.github.io/cleanepi/">{cleanepi}</a> R packages.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Different types of testing">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Different types of testing
</div>
</div>
<div class="callout-body-container callout-body">
<p>In comparison to commonly used <em>unit testing</em>, which looks to isolate and test specific parts of a software package, e.g.&nbsp;a function; <em>integration testing</em> is the testing of several components of software, both within and between packages. Therefore, integration testing can be used to ensure interoperability is maintained while one or multiple components in pipelines are being developed. <a href="https://en.wikipedia.org/wiki/Continuous_integration">Continuous integration</a> provides a way to run these tests before merging, releasing, or deploying code.</p>
</div>
</div>
<section id="how-we-setup-integration-testing-in-epiverse" class="level2">
<h2 class="anchored" data-anchor-id="how-we-setup-integration-testing-in-epiverse">How we setup integration testing in Epiverse</h2>
<p>The Epiverse-TRACE collection of packages has a meta-package, <a href="https://epiverse-trace.github.io/epiverse/">{epiverse}</a>, analogous to the <a href="https://www.tidyverse.org/blog/2023/03/tidyverse-2-0-0/">tidyverse meta-package</a> (loaded with <code>library(tidyverse)</code>). By default, {epiverse} has dependencies on all released and stable Epiverse-TRACE packages, therefore it is a good home for integration testing. This avoids burdening individual Epiverse packages with taking on potentially extra dependencies purely to test interoperability.</p>
<p>Just as with unit testing within the individual Epiverse packages, we use the <a href="https://testthat.r-lib.org/">{testthat}</a> framework for integration testing (although integration testing can be achieved using other testing frameworks).</p>
</section>
<section id="case-study-of-interoperable-functionality-using-simulist-and-cleanepi" class="level2">
<h2 class="anchored" data-anchor-id="case-study-of-interoperable-functionality-using-simulist-and-cleanepi">Case study of interoperable functionality using {simulist} and {cleanepi}</h2>
<p>The aim of {simulist} is to simulate outbreak data, such as line lists or contact tracing data. By default it generates complete and accurate data, but can also augment this data to emulate empirical data via post-processing functionality. One such post-processing function is <code>simulist::messy_linelist()</code>, which introduces a range of irregularities, missingness, and type coercions to simulated line list data. Complementary to this, the {cleanepi} package has a set of cleaning functions that standardised tabular epidemiological data, recording the set of cleaning operations run by compiling a <a href="https://epiverse-trace.github.io/cleanepi/articles/design_principle.html#output">report and appending it to the cleaned data</a>.</p>
<section id="example-of-an-integration-test" class="level3">
<h3 class="anchored" data-anchor-id="example-of-an-integration-test">Example of an integration test</h3>
<p>The integration tests can be thought of as compound unit tests. Line list data is generated using <code>simulist::sim_linelist()</code>. In each testing block, a messy copy of the line list is made using <code>simulist::messy_linelist()</code> with arguments set to specifically target particular aspects of messyness; then a cleaning operation from {cleanepi} is applied targeting the messy element of the data; lastly, the cleaned line list is compared to the original complete and accurate simulated data. In other words, is the ideal data perfectly recovered when messied and cleaned?</p>
<p>An example of an integration test is shown below:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-2">ll <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> simulist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sim_linelist</span>()</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"convert_to_numeric corrects prop_int_as_word"</span>, {</span>
<span id="cb1-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create messy data with 50% of integers converted to words</span></span>
<span id="cb1-6">  messy_ll <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> simulist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">messy_linelist</span>(</span>
<span id="cb1-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linelist =</span> ll,</span>
<span id="cb1-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_missing =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb1-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_spelling_mistakes =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb1-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inconsistent_sex =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numeric_as_char =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_as_char =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_int_as_word =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb1-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_duplicate_row =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-15">  )</span>
<span id="cb1-16">  </span>
<span id="cb1-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert columns with numbers as words into numbers as numeric</span></span>
<span id="cb1-18">  clean_ll <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cleanepi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_to_numeric</span>(</span>
<span id="cb1-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> messy_ll, </span>
<span id="cb1-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">target_columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>)</span>
<span id="cb1-21">  )</span>
<span id="cb1-22">  </span>
<span id="cb1-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the below is not TRUE because</span></span>
<span id="cb1-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. `clean_ll` has an attribute used to store the report from the performed</span></span>
<span id="cb1-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cleaning operation</span></span>
<span id="cb1-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. the converted "id" and "age" columns are numeric not integer</span></span>
<span id="cb1-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_false</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(ll, clean_ll))</span>
<span id="cb1-28"></span>
<span id="cb1-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check whether report is created as expected</span></span>
<span id="cb1-30">  report <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(clean_ll, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"report"</span>)</span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(report), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"converted_into_numeric"</span>)</span>
<span id="cb1-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(report<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>converted_into_numeric, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id, age"</span>)</span>
<span id="cb1-33"></span>
<span id="cb1-34">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert the 2 converted numeric columns into integer</span></span>
<span id="cb1-35">  clean_ll[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb1-36">    clean_ll[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>)], </span>
<span id="cb1-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MARGIN =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb1-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> as.integer</span>
<span id="cb1-39">  )</span>
<span id="cb1-40"></span>
<span id="cb1-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove report to check identical line list &lt;data.frame&gt;</span></span>
<span id="cb1-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(clean_ll, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"report"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb1-43">  </span>
<span id="cb1-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(ll, clean_ll)</span>
<span id="cb1-45">})</span></code></pre></div></div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>When developing multiple software tools that are explicitly designed to work together it is critical that they are routinely tested to ensure interoperability is maximised and maintained. These tests can be implementations of a data standard, or in the case of Epiverse-TRACE a more informal set of design principles. We have showcased integration testing with the compatibility of the {simulist} and {cleanepi} R packages, but there are other integration tests available in the {epiverse} meta-package. We hope that by regularly running these expectations of functioning pipelines, includes those as simple as two steps, like the case study show in this post, that maintainers and contributors will be aware of any interoperability breakages.</p>
<p>If you’ve worked on a suite of tools, R packages or otherwise, and have found useful methods or frameworks for integration tests please share in the comments.</p>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>Thanks to Karim Mané, Hugo Gruson and Chris Hartgerink for helpful feedback when drafting this post.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{w._lambert2025,
  author = {W. Lambert, Joshua},
  title = {Integration Testing in {Epiverse-TRACE}},
  date = {2025-04-14},
  url = {https://epiverse-trace.github.io/posts/integration-testing/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-w._lambert2025" class="csl-entry quarto-appendix-citeas">
W. Lambert, Joshua. 2025. <span>“Integration Testing in
Epiverse-TRACE.”</span> April 14, 2025. <a href="https://epiverse-trace.github.io/posts/integration-testing/">https://epiverse-trace.github.io/posts/integration-testing/</a>.
</div></div></section></div> ]]></description>
  <category>open-source</category>
  <category>R</category>
  <category>R package</category>
  <category>testing</category>
  <category>interoperability</category>
  <category>ecosystem</category>
  <guid>https://epiverse-trace.github.io/posts/integration-testing/</guid>
  <pubDate>Mon, 14 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Key considerations for retiring/superseding an R package</title>
  <dc:creator>James Mba Azam</dc:creator>
  <dc:creator>Hugo Gruson</dc:creator>
  <dc:creator>Sebastian Funk</dc:creator>
  <link>https://epiverse-trace.github.io/posts/superseding-bpmodels/</link>
  <description><![CDATA[ 





<p>Most of our work at Epiverse TRACE involves either developing an R package from scratch or adopting and maintaining an existing R package. In the former case, decision-making during development is guided by internal policies documented in the <a href="https://epiverse-trace.github.io/blueprints/">Epiverse-TRACE blueprints</a>. However, a less common scenario for us has been taking on the maintenance of an existing package — a situation we recently encountered with the <a href="https://epiforecasts.github.io/bpmodels/">bpmodels</a> R package.</p>
<p>In this post, I want to share some considerations and lessons learned from maintaining bpmodels, originally developed by Sebastian Funk at the London School of Hygiene &amp; Tropical Medicine (with contributions by Zhian Kamvar and Flavio Finger), and the decision to retire/supersede it with <a href="https://epiverse-trace.github.io/blueprints/">epichains</a>. The aim is not to define strict rules but to spark a conversation about good enough practices and alternative approaches that the R developer community has used or would like to be used more widely.</p>
<p>One of the first considerations was the scope of the package. When maintaining or re-imagining an R package, assessing its scope and identifying opportunities for refinement is crucial. For example, some packages have evolved significantly in the broader R ecosystem to better align with user needs. We will highlight a few examples. <a href="https://github.com/hadley/plyr">plyr</a> was split into <a href="https://dplyr.tidyverse.org/index.html">dplyr</a> and <a href="https://purrr.tidyverse.org/index.html">purrr</a> for manipulating data frame and list objects respectively, reflecting more specialized functionality based on object types. Similarly, reshape evolved into <a href="https://github.com/hadley/reshape">reshape2</a><sup>1</sup> and currently into <a href="https://tidyr.tidyverse.org/index.html">tidyr</a>, with each iteration simplifying and improving upon its predecessor. Another example is the <a href="https://github.com/njtierney/naniar/#a-note-on-the-name">renaming</a> of ggmissing into the more generalized <a href="https://naniar.njtierney.com/">naniar</a>. In the epidemiology ecosystem, two examples include the evolution of the <a href="https://epiforecasts.github.io/EpiNow/">EpiNow</a> into <a href="https://epiforecasts.github.io/EpiNow2/">EpiNow2</a> and <a href="https://www.repidemicsconsortium.org/incidence/">incidence</a> to <a href="https://www.reconverse.org/incidence2/index.html">incidence2</a>.</p>
<p>For bpmodels, we wanted to <a href="https://github.com/epiverse-trace/epichains/issues/142">unify the simulation functions</a> (existing as two functions previously) and improve the function signature by <a href="https://github.com/epiverse-trace/epichains/pull/33">renaming</a> several of the arguments for readability. We also wanted to <a href="https://github.com/epiverse-trace/epichains/issues/4">introduce an object-oriented workflow</a> to aid in interoperability (in some inputs and outputs) with existing tools such as <a href="https://www.repidemicsconsortium.org/epicontacts/">epicontacts</a> and <a href="https://epiverse-trace.github.io/epiparameter/">epiparameter</a>. Moreover, the object-oriented backend would also allow us to implement custom methods for printing, summarising and aggregating the simulation output. Some of these considerations would have been less disruptive and in line with the concept of progressive enhancement discussed in <a href="https://epiverse-trace.github.io/posts/progressive-enhancement/">a previous blogpost</a>. However, the change in function name and signature would have led to a lot of disruptions including <a href="https://r-pkgs.org/lifecycle.html#deprecating-a-function">deprecating</a> the existing functions and arguments.</p>
<p>One thing is clear from the examples on scope changes - they often lead to name changes. Another important decision was whether to rebrand the package with a new name. A new name can signal a fresh approach and address limitations of the original package. The most popular example is the renaming of ggplot to <a href="https://ggplot2.tidyverse.org/index.html">ggplot2</a>. Others include renaming reshape to reshape2 and further, tidyr. However, changing a package’s name can be disruptive and cause <a href="https://r-pkgs.org/lifecycle.html#sec-lifecycle-breaking-change-definition">breaking changes</a> in downstream packages or workflows that use them. The process, if not well handled, can lead to confusion and frustration in the user and developer community. With this in mind and to enable reproducibility of existing work using bpmodels, we decided to fork the <a href="https://epiforecasts.github.io/bpmodels/">bpmodels</a> repository to the Epiverse-TRACE GitHub organisation and maintain the old package. At the same time, we introduced epichains as the successor. The name reflects the fact that it is a package for simulating and analysing <em>epidemiological transmission chains</em>.</p>
<p>A second key consideration is the plans that the original package author(s) may have had and their views on any future changes. In our case, this was fairly straightforward because the maintainer of the original package was fully involved in the refactoring process. We were able to reach and receive approval from another package author who had made substantial contributions. More generally, however, bringing all package authors on board with, for example, changes in scope and name is an important step in taking on maintenance of a package and one that should not be neglected.</p>
<p>We also had to consider whether to archive bpmodels or allow it to co-exist with epichains. We decided to keep bpmodels accessible to sustain the reproducibility of existing code using the package. The package was moved back to the epiforecasts <a href="https://epiforecasts.github.io/bpmodels/">GitHub organisation</a> where it originated from. We, however, added a <a href="https://github.com/epiforecasts/bpmodels/blob/main/README.Rmd#L19">lifecycle badge</a> to communicate the package’s retired status and text in the README about <a href="https://github.com/epiforecasts/bpmodels/blob/main/README.Rmd#L29">our plans</a> to only maintain the required infrastructure to keep the package running but not to add any new features.</p>
<p>Another technical consideration was how to handle previous contributions recorded as commit histories. When forking a package, it’s important to decide whether to retain the commit history. Options include squashing the history to start with a clean slate, which risks losing visibility of past contributions, or tagging the HEAD commit of the original repository and building from there. For bpmodels, we decided to go with the second approach, which allowed us to keep the GitHub commit history intact to retain the contributions of its original authors.</p>
<p><a href="https://semver.org/">Semantic versioning</a> was another <a href="https://github.com/epiverse-trace/epichains/issues/32">key decision point</a>. Since epichains was not going to be available immediately but would be developed in the open (on GitHub), we needed to consider how to communicate that to potential users. We decided to start at version <code>0.0.0.9999</code> to signal an experimental and unstable phase<sup>2</sup> while iterating on features through <a href="https://github.com/epiverse-trace/epichains/releases/tag/v0.1.0">minor releases</a>.</p>
<p>Throughout this process, we drew inspiration from various sources. Hadley Wickham’s <a href="https://github.com/hadley/reshape/blob/master/README.md#introduction">reasoning</a> for reshape2 as a reboot of reshape and Nicholas Tierney’s <a href="https://github.com/njtierney/naniar/#a-note-on-the-name">reason</a> for renaming ggmissing to naniar were helpful. Additionally, a talk at UseR! 2024 entitled <a href="https://userconf2024.sched.com/event/1c90V/r-evolution-the-retirement-of-r-packages-with-many-reverse-dependencies-edzer-pebesma-university-of-muenster-roger-bivand-norwegian-school-of-economics">“retiring packages with extensive reverse dependencies”</a> offered practical advice.</p>
<p>This transition has raised several questions for the community. How do you decide whether to supersede or deprecate a package? What strategies have worked for maintaining backward compatibility while introducing new tools? How do you document and communicate major changes to users? How is all of this done while appropriately crediting past contributions and retain discoverability and citation/use tracking?</p>
<p>We’d love to hear your thoughts and experiences. Let’s start a conversation about maintaining and evolving open-source tools in a sustainable way.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Notice the URL points to <a href="https://github.com/hadley/reshape">reshape</a> instead of reshape2 although the README mentions the latter. The README however lays out the reasons for the evolution.↩︎</p></li>
<li id="fn2"><p>See more details on R package versioning and what they communicate in the <a href="https://r-pkgs.org/lifecycle.html#sec-lifecycle-evolution">R packages book</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{mba_azam2025,
  author = {Mba Azam, James and Gruson, Hugo and Funk, Sebastian},
  title = {Key Considerations for Retiring/Superseding an {R} Package},
  date = {2025-02-03},
  url = {https://epiverse-trace.github.io/posts/superseding-bpmodels/},
  doi = {10.59350/zabx5-3x070},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-mba_azam2025" class="csl-entry quarto-appendix-citeas">
Mba Azam, James, Hugo Gruson, and Sebastian Funk. 2025. <span>“Key
Considerations for Retiring/Superseding an R Package.”</span> February
3, 2025. <a href="https://doi.org/10.59350/zabx5-3x070">https://doi.org/10.59350/zabx5-3x070</a>.
</div></div></section></div> ]]></description>
  <category>software lifecycles</category>
  <category>R</category>
  <category>R package</category>
  <category>software design</category>
  <category>DOI</category>
  <guid>https://epiverse-trace.github.io/posts/superseding-bpmodels/</guid>
  <pubDate>Mon, 03 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Licensing R packages with code and data: learnings from submitting to CRAN</title>
  <dc:creator>Joshua Lambert</dc:creator>
  <dc:creator>Chris Hartgerink</dc:creator>
  <link>https://epiverse-trace.github.io/posts/data-licensing-cran.html</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is a follow-up blog post to the <a href="data-licensing.html"><em>Dual licensing R packages with code and data</em></a> post published in September 2024. It contains learnings from submitting <strong>epiparameter</strong> to CRAN with a dual license.</p>
</div>
</div>
<section id="overview-of-previous-blog-post-on-r-package-licensing" class="level3">
<h3 class="anchored" data-anchor-id="overview-of-previous-blog-post-on-r-package-licensing">Overview of previous blog post on R package licensing</h3>
<p>We previously published a <a href="data-licensing.html">post on the Epiverse-TRACE blog discussing the importance of licensing code and data for open source</a>. It covered the differences between open source licenses for code and those that are required for other forms of information, in our case, data. R packages most commonly distribute code, and therefore require an <a href="https://cran.r-project.org/doc/FAQ/R-exts.html#Licensing">appropriate open source license</a>. Less frequently, R packages are used to bundle and share data, so-called <a href="https://r-pkgs.org/data.html">“data packages”</a>, and require an applicable license for reuse and redistribution. We recommend reading <a href="data.licensing.html">the original blog post</a> for a more in-depth explanation of each of these points.</p>
<p>However, since publishing the original post, the last section, <em>Licensing code and data in one R package</em>, has become outdated given our experience submitting the epiparameter package to CRAN with a dual-license. This blog post provides an updated <em>Licensing code and data in one R package</em> section with learnings from epiparameter package development and CRAN submission.</p>
</section>
<section id="licensing-code-and-data-in-one-r-package" class="level3">
<h3 class="anchored" data-anchor-id="licensing-code-and-data-in-one-r-package">Licensing code and data in one R package</h3>
<p>If you are developing an R package that has both code and data as primary objects of (roughly) equal importance, a software license inadequately covers the data, and a data license inadequately covers the code. Dual licensing can help resolve this issue. This means there is one license for code (for example, <a href="https://mit-license.org">MIT license</a>) and another license for the included data (for example, <a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt">Public Domain Dedication</a>).</p>
<p>After conducting an online search, dual licensing for R packages seems rare. An interesting example of dual licensing is the <a href="https://github.com/igraph/igraphdata/blob/main/LICENSE"><strong>igraphdata</strong> package</a>, which contains several licenses: One for each dataset included in the package. Similar to igraphdata, we dual licensed the <a href="https://github.com/epiverse-trace/epiparameter"><strong>epiparameter</strong> package</a>, which until versus v0.4.0 contained both code and data. We <a href="https://github.com/epiverse-trace/epiparameter/blob/v0.3.0/DESCRIPTION#L28">licensed the code using the <code>DESCRIPTION</code> file</a> and used <a href="https://github.com/epiverse-trace/epiparameter/blob/v0.3.0/LICENSE">the <code>LICENSE</code> file</a> to license the data under CC0. Concretely, we included this additional text in <code>LICENSE</code> to clarify the dual license and that we recommend citing the original source regardless:</p>
<blockquote class="blockquote">
<p>All data included in the epiparameter R package is licensed under CC0 (<a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt" class="uri">https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt</a>). This includes the parameter database (extdata/parameters.json) and data in the data/ folder. Please cite the individual parameter entries in the database when used.</p>
</blockquote>
<p>However, upon submission of epiparameter to CRAN, the dual licensing approach was rejected. The CRAN package reviewer stated:</p>
<blockquote class="blockquote">
<p>A package can only be licensed as a whole. It can have a single license or a set of <em>alternative</em> licenes. If the data have to be licensed differently then the code, you have to provide the data in a separate data package with the other license.</p>
</blockquote>
<p>Therefore, we decided to separate the data, originally stored in epiparameter, into a package called <a href="https://github.com/epiverse-trace/epiparameterDB"><strong>epiparameterDB</strong></a>. This package is solely <a href="https://github.com/epiverse-trace/epiparameterDB/blob/main/DESCRIPTION#L15">licensed under CC0</a>, and epiparameter can then also be solely <a href="https://github.com/epiverse-trace/epiparameter/blob/main/DESCRIPTION#L28">licensed under MIT</a>. Both packages are now hosted on CRAN using a single license dedicated to code or data.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>It is often desirable to host an R package on CRAN as it enables it to be easily installed (from binary if on Mac or Windows), it gives the package some validity as a non-trivial and secure piece of software to install and use.</p>
<p>It is not necessary nor beneficial for all R packages to be hosted on CRAN, and it does come with some drawbacks, such as the dual licensing restriction of code and data, but for our case with the epiparameter package, we deemed it better to host on CRAN and split the code and data into epiparameter and epiparameterDB, respectively.</p>
</div>
</div>
<p>When including data in your R package from other sources it is important to check that the license of your package and the data is compatible<sup>1</sup>, or that the individual data license is clearly stated, as in igraphdata. For epiparameterDB, we consider model estimates as facts (that is, not copyrightable).</p>
<hr>
<p>This blogpost provides an addendum to our original post <a href="data-licensing.html">Dual licensing R packages with code and data</a>, providing our experience and outcomes from submitting epiparameter – and the resulting epiparmeterDB package – to CRAN in a conformant manner. In addition to the requirements and benefits of open source licensing of open software and data in the first post, we hope this follow-up post provides practical information that will be of use to other R package developers, or software developers and open data curators more broadly.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>See <a href="https://juliasilge.com/blog/sentiment-lexicons/">this blog post by Julia Silge on including external data sets into an R package and rectifying incompatibilities with license</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{lambert2025,
  author = {Lambert, Joshua and Hartgerink, Chris},
  title = {Licensing {R} Packages with Code and Data: Learnings from
    Submitting to {CRAN}},
  date = {2025-01-20},
  url = {https://epiverse-trace.github.io/posts/data-licensing-cran.html},
  doi = {10.59350/afsfa-bx908},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-lambert2025" class="csl-entry quarto-appendix-citeas">
Lambert, Joshua, and Chris Hartgerink. 2025. <span>“Licensing R Packages
with Code and Data: Learnings from Submitting to CRAN.”</span> January
20, 2025. <a href="https://doi.org/10.59350/afsfa-bx908">https://doi.org/10.59350/afsfa-bx908</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>open-source</category>
  <category>package development</category>
  <category>DOI</category>
  <guid>https://epiverse-trace.github.io/posts/data-licensing-cran.html</guid>
  <pubDate>Mon, 20 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How well prepared are we to rapidly analyse a new influenza pandemic? A brief perspective on analysis conducted for UK government advisory groups during COVID-19</title>
  <dc:creator>Adam Kucharski</dc:creator>
  <link>https://epiverse-trace.github.io/posts/covid-analysis/</link>
  <description><![CDATA[ 





<p>With <a href="https://www.youtube.com/watch?v=i4frpQJMfn8">multiple reports</a> of influenza H5N1 cases that have no clear animal exposure, it is useful to consider what kinds of analysis would be required in the event of a new influenza pandemic, and how easily this could be performed. As a starting point, this post reflects on some of the real-time work my colleagues and I contributed to inform the UK response to COVID-19.</p>
<section id="reflections-on-covid-19-contributions" class="level2">
<h2 class="anchored" data-anchor-id="reflections-on-covid-19-contributions">Reflections on COVID-19 Contributions</h2>
<p>During COVID-19, academic participants like myself in the UK contributed analysis to the <a href="https://www.gov.uk/government/publications/scientific-advisory-group-for-emergencies-sage-coronavirus-covid-19-response-membership/list-of-participants-of-sage-and-related-sub-groups">SPI-M-O advisory group</a>, which focused on epidemiology and modelling. This was a subgroup of the <a href="https://www.gov.uk/government/publications/about-sage-and-covid-19/about-sage-and-covid-19">Scientific Advisory Group for Emergencies</a>.</p>
<p>These contributions typically fell into two main categories:</p>
<ul>
<li>Reports in response to specific questions from the Secretariat (e.g.&nbsp;exploring implications of policy options).</li>
<li>Reports or preliminary results detailing broader epidemiological insights about COVID-19 my colleagues and I thought were noteworthy (e.g.&nbsp;unusual patterns with novel variants).</li>
</ul>
<p>This post focuses on the analysis reports that I made a major contribution to as a member of SPI-M-O in the first 18 months after COVID was identified as a threat, i.e.&nbsp;between Jan 2020 and July 2021 (a full list has <a href="https://www.covid19.public-inquiry.uk/documents/inq000056464-rule-9-questionnaire-response-from-prof-adam-kucharski-scientific-advisory-group-for-emergencies-sage-scientific-pandemic-influenza-group-on-modelling-spi-m-o-undated/">previously been published</a>). Narrative reports or analysis that did not involve substantial analytics or modelling (e.g.&nbsp;just direct plots of data) are not included here. I also include some major early piece of analysis that did not form SPI-M-O reports, but were published and informed subsequent analysis and modelling.</p>
<p>If another pandemic were to hit, how easily and quickly could we do these analyses again? To document where we currently are, it is important to understand where potential gaps and bottlenecks are. For each report, I therefore review three main criteria:</p>
<ol type="1">
<li><strong>Code availability</strong>: is the original analysis code public? (With link if relevant, or context if not.)</li>
<li><strong>Package availability</strong>: is the analysis code or underlying method currently packaged up for easy reuse?</li>
<li><strong>Task readiness time</strong>: roughly how long would it take to get the code or package into a rough state where it could re-run an equivalent analysis using the characteristics of a future transmissible H5N1 influenza? And how long to do so while also following robust best practice <a href="https://epiverse-trace.github.io/blueprints/">Epiverse-TRACE development principles</a>, so others can easily build on the analysis? Would it take minutes (i.e.&nbsp;possible to run immediately), hours, days or weeks to get the basic functionality working?</li>
</ol>
<p>Criteria (1) and (2) are either marked as available (✅), not available (❌), or partially available (⏳). Time taken is also divided into ‘rough’ (rapid, imperfect code to deliver a task) and ‘robust’ (i.e.&nbsp;best practice development for future re-use) to reflect wider discussions about <a href="https://samabbott.co.uk/posts/2022-09-19-80-percent-good-enough/">what constitutes ‘good enough’ work in a pandemic</a>. I also suggest some areas for potential further development, or links to ongoing development that will enable easier completion of tasks in future. The focus of the post tends to be packages that sit on the CMMID, Epiverse-TRACE, Epiforecasts or my GitHub repositories, because these were most directly related to the tasks being discussed, but some wider packages are also signposted.</p>
<p>This is not an exclusive list of work performed by myself and colleagues in the Centre for Mathematical Modelling of Infectious Diseases at LSHTM; there is a larger <a href="https://cmmid.github.io/topics/covid19/">CMMID repository of real-time work</a>, as well as a large volume of published papers in academic journals and reports on the gov.uk website. However, I hope this initial post can provide a useful summary of tasks that were performed, and framework for evaluating wider efforts required for a pandemic.</p>
<p>The overall effectiveness of the UK response, and which areas could be strengthened, are topics currently being examined by the COVID Inquiry, and will not be covered here. If readers are interested, there are some broader reflections from members of the UK modelling community, and recommendations for improvements, in <a href="https://doi.org/10.12688/wellcomeopenres.19601.1">Sherratt et al, 2024, Wellcome Open Research</a>.</p>
<section id="jan-2020-early-estimation-of-transmissibility-and-control" class="level3">
<h3 class="anchored" data-anchor-id="jan-2020-early-estimation-of-transmissibility-and-control">28 Jan 2020: Early estimation of transmissibility and control</h3>
<p><a href="https://github.com/adamkucharski/2020-ncov">Code</a> ✅ | Package ⏳ | Days (rough), Weeks (robust)</p>
<p>This analysis in early 2020 focused on estimation of transmissiblity and subsequent effect of lockdown control measures, and brought together reported cases in China, exported cases identified internationally, and infections detected on evacuation flights. A stochastic SEIR model was fitted with sequential Monte Carlo to estimate how <img src="https://latex.codecogs.com/png.latex?R_t"> varied over time, to distinguish between an epidemic that ended because of control vs immunity. Later published as <a href="https://www.thelancet.com/article/S1473-3099(20)30144-4/fulltext">Kucharski et al, Lancet Inf Dis, 2020</a>.</p>
<p>The code used to generate estimates for the probability of a large outbreak given <img src="https://latex.codecogs.com/png.latex?R_0"> are now available in the Epiverse-TRACE <a href="https://epiverse-trace.github.io/superspreading/">{superspreading}</a> package.</p>
<p><strong>Suggested or ongoing development:</strong> There are now much more efficient methods for performing the main real-time inference analysis, particularly the <a href="https://github.com/mrc-ide/dust">{dust}</a> toolkit in combination with <a href="https://mrc-ide.github.io/mcstate/">{mcstate}</a>. As future tools will have to be flexible enough to be applicable in a wide range of modelling scenarios with different data sources, the main ongoing task is to ensure these are well documented and have been tested with relevant examples that can serve as templates for future work. The <a href="https://github.com/LloydChapman/seir">{seir} package</a> is collating a library of simple model fitting implementations and a <a href="https://github.com/LloydChapman/seir/tree/early-wuhan">branch</a> has implemented estimation of a fixed <img src="https://latex.codecogs.com/png.latex?R_0"> value in an SEIR model using early exported COVID cases. The next step would be to implement an example with a time-varying reproduction number.</p>
</section>
<section id="feb-2020-early-analysis-of-contact-tracing-effectiveness" class="level3">
<h3 class="anchored" data-anchor-id="feb-2020-early-analysis-of-contact-tracing-effectiveness">2 Feb 2020: Early analysis of contact tracing effectiveness</h3>
<p><a href="https://github.com/cmmid/ringbp">Code</a> ✅ | <a href="https://github.com/epiforecasts/ringbp">Package</a> ✅ | Hours (rough), Days (robust)</p>
<p>Another early analysis was a paper for SPI-M-O: <strong>Feasibility of controlling 2019-nCoV outbreaks by isolation of cases and contacts</strong>, later published as <a href="https://www.thelancet.com/article/S2214-109X(20)30074-7/fulltext">Hellewell et al, Lancet Global Health (2020)</a>. It used a branching process model to explore how transmission (e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?R_0"> and % presymptomatic transmission) and control parameters (e.g.&nbsp;% contacts traced) could influence the risk of a large outbreak.</p>
<p><strong>Suggested or ongoing development:</strong> There are several issues on the <a href="https://github.com/epiforecasts/ringbp">{ringbp}</a> package repo that, once complete, would allow for faster implementation for new pathogens, especially in combination with <a href="https://epiverse-trace.github.io/epiparameter/">{epiparameter}</a>. The <a href="https://github.com/bcgov/epi.branch.sim/">{epi.branch.sim}</a> package, which is based on the Hellewell et al paper, also offers an arguably more developed package for plug-and-play analysis in the meantime. The <a href="https://epiverse-trace.github.io/epichains/">{epichains}</a> package also allows for estimation of simpler branching processes (i.e.&nbsp;without targeted control like contact tracing).</p>
</section>
<section id="mar-2020-early-estimation-of-severity" class="level3">
<h3 class="anchored" data-anchor-id="mar-2020-early-estimation-of-severity">3 Mar 2020: Early estimation of severity</h3>
<p><a href="https://github.com/thimotei/cCFRDiamondPrincess">Code</a> ✅ | <a href="https://github.com/epiverse-trace/cfr/">Package</a> ✅ | Hours (rough), Days (robust)</p>
<p>This analysis estimated the infection and case fatality ratio by age for COVID-19 using age-adjusted data from the outbreak on the Diamond Princess cruise ship. Later published as <a href="https://www.eurosurveillance.org/content/10.2807/1560-7917.ES.2020.25.12.2000256">Russell et al, Eurosurveillance, 2020</a>.</p>
<p>The methods used for this analysis are now implemented as the Epiverse-TRACE <a href="https://github.com/epiverse-trace/cfr/">{cfr}</a> package. There is also a <a href="https://epiverse-trace.github.io/howto/analyses/estimate_severity/cfr-stratified-severity.html">‘how to’ example for age-specific CFR estimation</a>.</p>
<p><strong>Suggested or ongoing development:</strong> There are several <a href="https://github.com/epiverse-trace/cfr/issues">GitHub issues</a> open that aim to strengthen {cfr}, especially for edge cases (e.g.&nbsp;very high CFR) or uncertainty when estimating underascertainment.</p>
</section>
<section id="mar-2020-pre-covid-social-mixing-patterns" class="level3">
<h3 class="anchored" data-anchor-id="mar-2020-pre-covid-social-mixing-patterns">11 Mar 2020: pre-COVID social mixing patterns</h3>
<p><a href="https://www.medrxiv.org/content/10.1101/2020.02.16.20023754v2.supplementary-material">Data</a> ✅ | Package ❌ | Hours (rough), Days (robust)</p>
<p>Another early paper for SPI-M-O focused on social mixing patterns in the UK from the 2017/18 BBC public science project: <strong>Some results from the BBC project on contact rates by context and age</strong>, later expanded into <a href="https://www.medrxiv.org/content/10.1101/2020.02.16.20023754v2">Klepac et al, MedRxiv, 2020</a>. The underlying contact matrices were made available alongside the paper.</p>
<p><strong>Suggested or ongoing development:</strong> It would be useful to incorporate data into <a href="https://epiforecasts.io/socialmixr/">{socialmixr}</a> to enable easy re-use in R. There is also an <a href="https://github.com/epiverse-trace/finalsize/issues/216">issue to add eigenvector calculation</a>, alongside the <img src="https://latex.codecogs.com/png.latex?R_t"> calculation already implemented in the {finalsize} package, to illustrate which age groups drive early epidemic growth. There is also an <a href="https://github.com/epiverse-trace/tutorials-late/pull/63">incoming training episode</a> on contact matrices.</p>
</section>
<section id="mar-2020-onwards-early-population-level-scenarios" class="level3">
<h3 class="anchored" data-anchor-id="mar-2020-onwards-early-population-level-scenarios">3 Mar 2020 onwards: Early population-level scenarios</h3>
<p><a href="https://github.com/cmmid/covid-uk">Code</a> ✅ | Package ✅ | Hours (rough), Days (robust)</p>
<p>A collection of population-level scenario modelling reports generated between February and April 2020 was later published as a summary paper, <a href="https://www.thelancet.com/journals/lanpub/article/PIIS2468-2667(20)30133-X/fulltext">Davies et al, Lancet Public Health, 2020</a>. The original model, known as <code>covidm</code>, had a code base that would be reused for multiple epidemic waves, including novel variants. However, many the basic scenarios can be now be explored using the Epiverse-TRACE <a href="https://epiverse-trace.github.io/epidemics/">{epidemics}</a>. In particular, {epidemics} can simulate scenarios with multiple overlapping interventions targeting different age groups, and reflect uncertainty in <img src="https://latex.codecogs.com/png.latex?R_0">. A version of this package has already been used to <a href="https://gaza-projections.org/">project future outbreak scenarios in Gaza</a>.</p>
<p>Some further reflections on specific pieces of COVID analysis for SPI-M-O in 2020 are listed below:</p>
<ul>
<li>3 March. <a href="https://www.gov.uk/government/publications/the-effect-of-social-distance-measures-on-deaths-and-peak-demand-for-hospital-services-in-england-3-march-2020"><strong>Effect of social distancing measures on deaths &amp; peak demand for hospitals in England.</strong></a> <strong>Suggested or ongoing development:</strong> Although {epidemics} is set up to simulate infections, there is currently no database for burden to draw on (e.g.&nbsp;easy conversion to hospitalisations and deaths). The WHO Hub <a href="https://github.com/WHO-Collaboratory/simex">simex model</a> has some functions for converting COVID cases to disease outcomes, but this could be a useful feature to include for a wider range of pathogens. Burden estimation is also planned in the <a href="https://github.com/epiverse-trace/tutorials-late/issues/54">Epiverse-TRACE late stage tutorials</a>.</li>
<li>8 March. <strong>Estimating the impact of regional triggers for COVID-19 non-pharmaceutical interventions.</strong></li>
<li>11 March. <a href="https://www.gov.uk/government/publications/the-impact-of-aggressively-managing-peak-incidence-11-march-2020"><strong>Impact of agressively managing peak incidence.</strong></a>. <strong>Suggested or ongoing development:</strong> This analysis included epidemic-dependent triggers (e.g.&nbsp;close venues once hospitalisations hit a certain level), which are not yet included in {epidemics}.</li>
<li>11 March. <a href="https://www.gov.uk/government/publications/the-impact-of-banning-sporting-events-and-other-leisure-activities-on-the-covid-19-epidemic-11-march-2020"><strong>Impact of banning sporting events and other leisure activities on Covid-19 epidemic.</strong></a></li>
<li>17 March. <a href="https://www.gov.uk/government/publications/the-impact-of-adding-school-closure-to-other-social-distance-measures-17-march-2020"><strong>Impact of adding school closure to other social distance measures.</strong></a></li>
<li>1 April. <a href="https://www.gov.uk/government/publications/the-impact-of-relaxing-lockdown-measures-2-1-april-2020"><strong>Impact of relaxing lockdown measures.</strong></a></li>
<li>3 April. <a href="https://www.gov.uk/government/publications/lshtm-modelling-scenarios-for-relaxation-of-lockdown-in-england-3-may-2020"><strong>Modelling scenarios for relaxation of lockdown in England.</strong></a></li>
</ul>
<p><strong>Suggested or ongoing development:</strong> There is work in progress with {epidemics} to allow a more flexible and editable <a href="https://github.com/epiverse-trace/epidemics/issues/254">{odin} back end</a>, in case different features are required in future. This will have the advantage of combining the plug-and-play ability to rapidly define age-specific contact structure, demography, parameter uncertainty and overlapping interventions using {epidemics} syntax with a fast and adaptable {odin} simulation model.</p>
</section>
<section id="detailed-contact-tracing-analysis" class="level3">
<h3 class="anchored" data-anchor-id="detailed-contact-tracing-analysis">Detailed contact tracing analysis</h3>
<p><a href="https://github.com/adamkucharski/2020-cov-tracing">Code</a> ✅ | <a href="https://github.com/rs-delve/tti-explorer">Package</a> ✅ | Days (rough), Weeks (robust)</p>
<p>This collection of individual-level testing and contact tracing modelling reports, which made use of the BBC social mixing data, was later published as a summary paper, <a href="https://www.thelancet.com/article/S1473-3099(20)30457-6/fulltext">Kucharski et al, Lancet Inf Dis, 2020</a>. The original model was in R, and was later converted into a <a href="https://github.com/rs-delve/tti-explorer">Python library</a> as part of the Royal Society Delve initiative, feeding in to <a href="https://rs-delve.github.io/reports/2020/05/27/test-trace-isolate.html">follow up analysis</a>. This was a rapidly developed bespoke model with multiple types of contact (e.g.&nbsp;home, school, work, other) and an approximated transmission dynamic rather than full simulation (i.e.&nbsp;if 50% of infectious contacts are traced half-way through their likely infectious period, it would cut <img src="https://latex.codecogs.com/png.latex?R"> by 25%).</p>
<p><strong>Suggested or ongoing development:</strong> For a future epidemic, it may be more useful to merge these concepts into two types of tool, building on succesful outputs for COVID: 1) a <a href="https://royalsocietypublishing.org/doi/10.1098/rstb.2020.0276">‘ready reckoners’</a> method that shows very intuitively how contact changes influence overall <img src="https://latex.codecogs.com/png.latex?R"> (this could make use of <img src="https://latex.codecogs.com/png.latex?R"> functionality in{finalsize}), and 2) a more comprehensive model of isolation and quarantine, like the prospective <a href="https://github.com/epiverse-trace/epinetwork/">{epinetwork}</a> package.</p>
<p>Some further reflections on specific analysis reports for SPI-M-O are below:</p>
<ul>
<li>16 April. <a href="https://www.gov.uk/government/publications/using-bbc-pandemic-data-to-model-the-impact-of-isolation-testing-contact-tracing-and-physical-distancing-on-reducing-transmission-of-covid-19-in-dif"><strong>Using BBC Pandemic data to model the impact of isolation, testing, contact tracing and physical distancing on reducing transmission of COVID-19 in different settings.</strong></a></li>
<li>20 April. <a href="https://www.gov.uk/government/publications/effectiveness-of-isolation-testing-contact-tracing-and-physical-distancing-on-reducing-transmission-of-covid-19-in-different-settings-draft-for-spi"><strong>Effectiveness of isolation, testing, contact tracing and physical distancing on reducing transmission of COVID-19 in different settings.</strong></a></li>
<li>21 April. <a href="https://www.gov.uk/government/publications/lshtm-the-possible-impact-of-mask-wearing-outside-the-home-on-the-transmission-of-covid-19-21-april-2020"><strong>The possible impact of mask wearing outside the home on the transmission of COVID-19.</strong></a> <strong>Suggested or ongoing development:</strong> This blanket measure could be explored using {ringbp} or {epichains} in their current form, e.g.&nbsp;this <a href="https://epiverse-trace.github.io/epichains/articles/interventions.html">interventions vignette</a>.</li>
<li>26 April. <a href="https://www.gov.uk/government/publications/estimated-impact-of-delay-from-isolation-of-symptomatic-case-to-test-result-and-quarantine-of-contacts-26-april-2020"><strong>Estimated impact of delay from isolation of symptomatic case to test result and quarantine of contacts.</strong></a></li>
<li>30 April. <a href="https://www.gov.uk/government/publications/estimated-impact-of-testing-quarantined-contacts-at-different-points-in-time-30-april-2020"><strong>Estimated impact of testing quarantined contacts at different points in time.</strong></a> <strong>Suggested or ongoing development:</strong> Certain key aspects of this could be explored using {ringbp}, or {epinetwork}, particularly in terms of proportion of population quarantined at a given point in time.</li>
</ul>
</section>
<section id="june-2020-analysis-of-superspreading" class="level3">
<h3 class="anchored" data-anchor-id="june-2020-analysis-of-superspreading">3 June 2020: Analysis of superspreading</h3>
<p>Code ❌ | <a href="https://epiverse-trace.github.io/superspreading/">Package</a> ✅ | Minutes (robust)</p>
<p>This paper for SPI-M-O, <a href="https://www.gov.uk/government/publications/analysis-of-sars-cov-2-transmission-clusters-and-superspreading-events-3-june-2020"><strong>Analysis of SARS-CoV-2 transmission clusters and superspreading events</strong></a>, provided different metrics to summarise the superspreading features of SARS-CoV-2. These functions are now in the {superspreading} package, with <a href="https://epiverse-trace.github.io/tutorials-middle/superspreading-estimate.html">examples</a> in the Epiverse-TRACE training.</p>
</section>
<section id="june-2020-analysis-of-forwards-and-backwards-tracing" class="level3">
<h3 class="anchored" data-anchor-id="june-2020-analysis-of-forwards-and-backwards-tracing">10 June 2020: Analysis of forwards and backwards tracing</h3>
<p><a href="https://github.com/akira-endo/COVID19_backwardtracing">Code</a> ✅ | Package ❌ | Hours (rough), Days (robust)</p>
<p>This paper for SPI-M-O, <strong>Branching process modelling of effectiveness of forward and backward tracing for SARS-CoV-2 control</strong> was later published as <a href="https://wellcomeopenresearch.org/articles/5-239">Endo et al, Wellcome Open Res, 2020</a>.</p>
<p><strong>Suggested or ongoing development:</strong> Although the underlying model isn’t in a package, the analysis is featured in the <a href="https://epiverse-trace.github.io/tutorials-middle/superspreading-estimate.html#controlling-superspreading-with-contact-tracing">Epiverse-TRACE training</a>. The core insight is also a relatively simple equation, i.e.&nbsp;that backward tracing would be expected to identify <img src="https://latex.codecogs.com/png.latex?R(1+1/k)"> cases, where <img src="https://latex.codecogs.com/png.latex?k"> is the dispersion parameter, so should add this to relevant training and/or vignettes.</p>
</section>
<section id="oct-2020-testing-and-contact-tracing-in-a-real-world-network" class="level3">
<h3 class="anchored" data-anchor-id="oct-2020-testing-and-contact-tracing-in-a-real-world-network">14 Oct 2020: Testing and contact tracing in a real-world network</h3>
<p><a href="https://github.com/biouea/covidhm">Code</a> ✅ | <a href="https://github.com/biouea/covidhm">Package</a> ✅ | Days (rough), Weeks (robust)</p>
<p>This paper for SPI-M-O, <strong>Modelling effectiveness of TTI and physical distancing in controlling SARS-CoV-2 in high and low prevalence communities, based on UK contact network data</strong> built on the <a href="https://www.nature.com/articles/s41591-020-1036-8">Firth et al, Nature Med, 2020</a>. This used BBC contact network data from Haslemere to investigate interventions in clustered networks, leading to a package {covidhm} that built on {ringbp}. This package was subsequently also used for analysis of outbreak dynamics on <a href="https://www.nature.com/articles/s41467-022-29522-y">Singapore test cruises</a>.</p>
<p><strong>Suggested or ongoing development:</strong> Once {ringbp} is stable, there is scope to expand to include the above functionality with the placeholder {epinetwork} package, which is a fork of the more specific {covidhm} implementationn.</p>
</section>
<section id="oct-dec-2020-strategies-for-pcr-and-lateral-flow-testing" class="level3">
<h3 class="anchored" data-anchor-id="oct-dec-2020-strategies-for-pcr-and-lateral-flow-testing">Oct-Dec 2020: Strategies for PCR and lateral flow testing</h3>
<p>The below papers for SPI-M-O used data on PCR and lateral flow performance to investigate different testing strategies.</p>
<p>21 Oct.&nbsp;<strong>Modelling frequent testing using PCR and lateral flow based on detection probabilities estimated from regular testing of health care workers</strong>. This paper used testing data from UCLH to infer the probability of test positivity post infection. It would later be published as <a href="https://bmcmedicine.biomedcentral.com/articles/10.1186/s12916-021-01982-x">Hellewell et al, BMC Medicine, 2021</a>.</p>
<p><a href="https://github.com/cmmid/pcr-profile">Code</a> ✅ | Package ⏳ | Days (rough), Weeks (robust)</p>
<p><strong>Suggested or ongoing development:</strong> This analysis focused on test positivity as an outcome, tailored to data available from the UCLH study (PCR + paired serology) but a more detailed framework could use Ct data as well, such as the <a href="https://github.com/thimotei/legacy_ct_modelling">codebase</a> for LEGACY Ct modelling and <a href="https://github.com/seroanalytics/epikinetics">{epikinetics}</a> package currently in progress for antibody kinetics (which could also be adapted to other biological timescales.</p>
<p>2 Dec.&nbsp;<a href="https://www.gov.uk/government/publications/lshtm-estimating-detection-of-infection-among-household-gathering-attendees-based-on-one-off-pre-gathering-lateral-flow-tests-2-december-2020"><strong>Estimating detection of infection among household gathering attendees based on one-off pre-gathering lateral flow tests</strong></a>. This paper used posteriors from the above analysis to explore different testing scenarios for family gatherings.</p>
<p>Code ❌ | Package ❌ | Minutes (rough), Days (robust)</p>
<p><strong>Suggested or ongoing development:</strong> The underlying equations in this analysis are quite simple (i.e.&nbsp;no more than a few lines of code), but could form a useful helper package. James Hay also built a somewhat related <a href="https://jamesahay.shinyapps.io/screening_accuracy/">Shiny app</a> (code <a href="https://github.com/jameshay218/screening_accuracy">here</a>) linked to an <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC8318052/">accompanying paper about intution behind testing performance</a>.</p>
</section>
<section id="mar-2021-potential-for-herd-immunity-against-the-alpha-variant" class="level3">
<h3 class="anchored" data-anchor-id="mar-2021-potential-for-herd-immunity-against-the-alpha-variant">9 Mar 2021: Potential for herd immunity against the Alpha variant</h3>
<p><a href="https://github.com/adamkucharski/hit-analysis">Code</a> ✅ | Package ❌ | Minutes (rough), Hours (robust)</p>
<p>This paper for SPI-M-O looked at the potential for vaccination-induced herd immunity against SARS-CoV-2, based on <img src="https://latex.codecogs.com/png.latex?R_0"> and vaccine effectiveness. It would be later published as <a href="https://www.eurosurveillance.org/content/10.2807/1560-7917.ES.2021.26.20.2100428">Hodgson et al, Eurosurveillance, 2021</a>.</p>
<p><strong>Suggested or ongoing development:</strong> The basic calculation was relatively simple (<img src="https://latex.codecogs.com/png.latex?1-1/R_0">, which holds regardless of age mixing assumptions, as long as the correct <img src="https://latex.codecogs.com/png.latex?R_0"> has been derived for the population of interest). However, {finalsize} has the functionality required to estimate this <img src="https://latex.codecogs.com/png.latex?R_0"> (or <img src="https://latex.codecogs.com/png.latex?R">) for a given population and immunity structure (e.g.&nbsp;from prior infection).</p>
</section>
<section id="may-jun-2021-transmission-dynamics-of-the-delta-variant" class="level3">
<h3 class="anchored" data-anchor-id="may-jun-2021-transmission-dynamics-of-the-delta-variant">May-Jun 2021: Transmission dynamics of the Delta variant</h3>
<p><a href="https://github.com/adamkucharski/covid-import-model">Code</a> ✅ | Package ❌ | Days (rough), Weeks (robust)</p>
<p>This collection of reports for SPI-M-O/SAGE analysed the transmission dynamics of the B.1.617.2 (Delta) variant in the UK, untangling imported infections from community transmission. The real-time model was coded in R, with fitting via MLE and then MCMC (as parameter space increased), with a <a href="https://github.com/seabbs/covid-import-model/blob/main/stan/model.stan">stan prototype of the model</a> also developed by Sam Abbott.</p>
<ul>
<li>12 May. <a href="https://www.gov.uk/government/publications/cmmid-covid-19-working-group-modelling-importations-and-local-transmission-of-b16172-in-the-uk-12-may-2021"><strong>Modelling importations and local transmission of B.1.617.2 in the UK.</strong></a></li>
<li>18 May. <strong>Dynamics of B.1.617.2 in the UK from importations, traveller-linked and non-traveller-linked transmission, 18 May 2021.</strong></li>
<li>25 May. <a href="https://www.gov.uk/government/publications/lshtm-dynamics-of-delta-b16172-in-the-uk-from-importations-traveller-linked-and-non-traveller-linked-transmission-25-may-2021"><strong>Dynamics of B.1.617.2 in the UK from importations, traveller-linked and non-traveller linked transmission, 25 May 2021.</strong></a></li>
<li>01 Jun.&nbsp;<a href="https://www.gov.uk/government/publications/lshtm-dynamics-of-delta-b16172-in-england-nhs-regions-from-importations-traveller-linked-and-non-traveller-linked-transmission-1-june-2021"><strong>Dynamics of B.1.617.2 in England NHS regions from importations, traveller-linked and non-traveller-linked transmission.</strong></a></li>
<li>08 Jun.&nbsp;<strong>Dynamics of Delta variant in England NHS regions from importations, traveller-linked and non-traveller-linked transmission.</strong></li>
</ul>
<p><strong>Suggested or ongoing development:</strong> The current code base is tailored to COVID-19, but the broader issue of distinguishing external importations (which may be known to some extent, e.g.&nbsp;based on timing of travel ban) from domestic human-to-human transmission also comes up for infections like avian influenza and mpox. If cases can be disaggregated into imported or domestic origin, then {EpiEstim} can calculate domestic transmission based on these data (<a href="https://doi.org/10.1016/j.epidem.2019.100356">Thompson et al, Epidemics, 2019</a>). However, <img src="https://latex.codecogs.com/png.latex?R_t"> estimation packages based on renewal processes, like {EpiEstim} and {EpiNow2} are not structured to infer such dynamics if the exact number of importations are unknown, so in future it may be useful to have a framework that builds on the <a href="https://elifesciences.org/articles/78089">Golding et al two component approach</a> developed for the Australian COVID response (accompanying <a href="https://github.com/goldingn/covid19_australia_interventions">code here</a>).</p>
</section>
<section id="jun-2021-analysis-of-social-contact-data-during-reopening" class="level3">
<h3 class="anchored" data-anchor-id="jun-2021-analysis-of-social-contact-data-during-reopening">1 Jun 2021: Analysis of social contact data during reopening</h3>
<p><a href="https://github.com/bquilty25/superspreading_testing">Code</a> ✅ | Package ⏳ | Hours (rough), Weeks (robust)</p>
<p>Two papers for SPI-M-O/SAGE looked at social contact dynamics during reopening:</p>
<ul>
<li><a href="https://www.gov.uk/government/publications/cmmid-social-contacts-in-the-uk-from-the-comix-social-contact-survey"><strong>Analysis of individuals with a high number of contacts in the CoMix study</strong>.</a></li>
<li><a href="https://www.gov.uk/government/publications/lshtm-and-kcl-reconstructing-the-secondary-case-distribution-of-sars-cov-2-from-heterogeneity-in-viral-load-trajectories-and-social-contacts-1-june"><strong>Reconstructing the secondary case distribution of SARS-CoV-2 from heterogeneity in viral load trajectories and social contacts</strong>.</a></li>
</ul>
<p>CoMix data are now available as part of the {socialmixr} package, with code for the secondary case distribution released with the <a href="https://www.medrxiv.org/content/10.1101/2024.08.15.24311977v2">Chapman et al pre-print</a>.</p>
<p><strong>Suggested or ongoing development:</strong> The methods used for ‘first principles’ reconstruction of <img src="https://latex.codecogs.com/png.latex?R_t"> could be included in a future social mixing analysis package, but would benefit from a larger database of viral load trajectories for different pathogens (currently available for SARS-CoV-2, but in theory estimatable for a range of acute infectious diseases).</p>
</section>
</section>
<section id="concluding-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="concluding-thoughts">Concluding thoughts</h2>
<p>Code was generally made available alongside public reports by LSHTM during COVID-19, except for very simple calculations. Several key functions are now available in R packages developed since the emergence of COVID-19, turning tasks that would have taken days into tasks that require only hours, but there are still some remaining bottlenecks to ensure that the methods would be applicable easily to H5N1, meaning some customised tasks for pandemic influenza would take hours when - with some further refinement - they could take minutes.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kucharski2024,
  author = {Kucharski, Adam},
  title = {How Well Prepared Are We to Rapidly Analyse a New Influenza
    Pandemic? {A} Brief Perspective on Analysis Conducted for {UK}
    Government Advisory Groups During {COVID-19}},
  date = {2024-12-23},
  url = {https://epiverse-trace.github.io/posts/covid-analysis/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kucharski2024" class="csl-entry quarto-appendix-citeas">
Kucharski, Adam. 2024. <span>“How Well Prepared Are We to Rapidly
Analyse a New Influenza Pandemic? A Brief Perspective on Analysis
Conducted for UK Government Advisory Groups During COVID-19.”</span>
December 23, 2024. <a href="https://epiverse-trace.github.io/posts/covid-analysis/">https://epiverse-trace.github.io/posts/covid-analysis/</a>.
</div></div></section></div> ]]></description>
  <category>COVID</category>
  <category>R</category>
  <category>real-time analysis</category>
  <category>pandemic preparedness</category>
  <category>H5N1</category>
  <guid>https://epiverse-trace.github.io/posts/covid-analysis/</guid>
  <pubDate>Mon, 23 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Using LLM agents to review tutorials ‘in character’ as learners</title>
  <dc:creator>Adam Kucharski</dc:creator>
  <dc:creator>Andree Valle Campos</dc:creator>
  <link>https://epiverse-trace.github.io/posts/ai-learner-review/</link>
  <description><![CDATA[ 





<section id="turning-learner-personas-into-llm-agents" class="level2">
<h2 class="anchored" data-anchor-id="turning-learner-personas-into-llm-agents">Turning learner personas into LLM agents</h2>
<p>Part of the Epiverse-TRACE initiative involves development of training materials that span early, middle and late stage outbreak analysis and modelling tasks. To ensure that our tutorials are accessible to target audiences, we have developed a series of <a href="https://github.com/epiverse-trace/personas">learner personas</a> to inform the design of learning materials. These personas include the following:</p>
<ul>
<li><strong>Lucia</strong>, a Field Epidemiologist that use R for data cleaning, plotting and report for Outbreak response.</li>
<li><strong>Juan</strong>, a Statistician and R user in a National Health Agency with constant deployment to outbreak response.</li>
<li><strong>Patricia</strong>, a PhD student learning to use R and analyse Outbreak data for her collaborative project on GitHub.</li>
<li><strong>Vania</strong>, a professor who needs ready-to-use training for her research and to pass on to students.</li>
<li><strong>Danielle</strong>, a Trainer that wants to remix content to create specific training materials for public health practitioners.</li>
</ul>
<p>As the volume of training materials increases, we have explored automating the generation of initial reviews using large language models (LLMs) that take the form of ‘in character’ agents with instructions to provide constructive comments. This reflects a wider focus within the field of outbreak analytics on how LLMs agents can be used to increase the efficiency and scalability of common tasks (e.g.&nbsp;<a href="https://www.thelancet.com/journals/lanmic/article/PIIS2666-5247(24)00104-6/fulltext">van Hoek et al, Lancet Microbe, 2024</a> ).</p>
<p>To generate the AI tutorial reviews, we use the OpenAI GPT-4 API, via the <code>openai</code> R package, as described in <a href="https://github.com/adamkucharski/llm-api-scripts/">this repository</a>. We also use the <code>gh</code> package to load the <code>.Rmd</code> materials from a given repository (e.g.&nbsp;<code>epiverse-trace/tutorials-middle</code>). Full illustrative code is <a href="https://github.com/adamkucharski/llm-api-scripts/blob/main/scripts/content_review_gpt.R">available here</a>, with the GPT-4 API prompts outlined below.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define first prompt</span></span>
<span id="cb1-2">user_prompt_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are the following person, and give all your answers in character:"</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Lucia persona</span></span>
<span id="cb1-5">persona_bio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/epiverse-trace/personas/master/lucia-outbreaks.qmd"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define second prompt</span></span>
<span id="cb1-8">user_prompt_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Now suppose you want to complete the following tutorial about outbreak analysis in R. The content is in R markdown but would be knitted to HTML in reality, with additional figures where relevant. Provide a critique of the tutorial from your perspective as a learner. What is unclear? What is useful? What is difficult? What could be refined? Support comments with brief quotes. In your feedback be succinct, positive, constructive and specific. State what content to keep and what to improve. Provide clear suggestions for next steps to remove, change or add content. Note that visualisations will be in the tutorial, but are not shown in the Rmd, so do not comment on these. Summarise your review and suggestions for specific improvements in short bullet point paragraphs. If some of the points are similar, amalgamate these into a single bullet point. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call OpenAI API (credentials must already be defined - see full illustrative code link above)</span></span>
<span id="cb1-11">output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_chat_completion</span>(</span>
<span id="cb1-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4"</span>,</span>
<span id="cb1-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">messages =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(user_prompt_1,persona_bio,</span>
<span id="cb1-14">                                                          user_prompt_2,tutorial_contents))</span>
<span id="cb1-15">    )</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write review to .md using readr</span></span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_lines</span>(output,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_review.md"</span>))</span></code></pre></div></div>
</section>
<section id="reviewing-transmissibilty-training-materials-as-a-senior-academic" class="level2">
<h2 class="anchored" data-anchor-id="reviewing-transmissibilty-training-materials-as-a-senior-academic">Reviewing transmissibilty training materials as a senior academic</h2>
<p>To illustrate the sort of reviews that can be generated with the above approach, the below is the output produced when we imported the <a href="https://epiverse-trace.github.io/personas/vania-academica.html">Vania senior academic persona</a> alongside an early pre-Alpha version of the training materials for our transmissibility estimation tutorial:</p>
<blockquote class="blockquote">
<p>Overall, the tutorial is well-structured and provides a comprehensive guide on how to use the <code>EpiNow2</code> package to estimate transmission metrics from case data. However, there are several areas that could be improved to enhance clarity and understanding for learners like me.</p>
<ol type="1">
<li><p><strong>Prerequisites</strong>: The prerequisites section could be expanded to include specific resources for learners to review the necessary concepts. For instance, links to resources on Bayesian analysis and the effective reproduction number would be helpful.</p></li>
<li><p><strong>Jargon and Terminology</strong>: The tutorial contains several technical terms and jargon that could be confusing for learners. For example, terms like “Bayesian inference”, “posterior probability”, “likelihood”, and “prior probability” are used without clear explanations. Providing definitions or links to resources for these terms would be beneficial.</p></li>
<li><p><strong>Code Explanation</strong>: While the tutorial does a good job of explaining what the code does, it could provide more context on why certain functions or packages are used. For instance, it would be helpful to explain why the <code>EpiNow2</code> package is used and how it differs from other packages.</p></li>
<li><p><strong>Visualizations</strong>: Although visualizations are not shown in the Rmd, it would be beneficial to explain what learners should expect to see in the visualizations and how to interpret them.</p></li>
<li><p><strong>Exercises</strong>: The tutorial lacks exercises for learners to practice the concepts and skills they have learned. Including exercises with solutions would greatly enhance the learning experience.</p></li>
</ol>
<p>Suggestions for improvements:</p>
<ul>
<li>Expand the prerequisites section to include specific resources for learners to review necessary concepts.</li>
<li>Provide definitions or links to resources for technical terms and jargon.</li>
<li>Provide more context on why certain functions or packages are used.</li>
<li>Explain what learners should expect to see in the visualizations and how to interpret them.</li>
<li>Include exercises with solutions for learners to practice the concepts and skills they have learned.</li>
</ul>
</blockquote>
</section>
<section id="reviewing-forecast-materials-as-a-field-epidemiologist" class="level2">
<h2 class="anchored" data-anchor-id="reviewing-forecast-materials-as-a-field-epidemiologist">Reviewing forecast materials as a field epidemiologist</h2>
<p>To further illustrate review outputs, the below is what was produced when we imported the <a href="https://epiverse-trace.github.io/personas/lucia-outbreaks.html">Lucia field epidemiologist persona</a> alongside an early pre-Alpha version of the training materials for our forecasting tutorial:</p>
<blockquote class="blockquote">
<p><strong>Positive Feedback:</strong></p>
<ol type="1">
<li>The tutorial is well-structured and follows a logical progression, which makes it easier to follow.</li>
<li>The use of real-world examples and datasets (COVID-19 and Ebola) makes the tutorial more relatable and practical.</li>
<li>The inclusion of questions, objectives, prerequisites, and key points at the beginning and end of the tutorial respectively, helps to guide the learning process.</li>
<li>The tutorial provides a good balance between theory and practice, with clear explanations and practical coding examples.</li>
<li>The use of callouts to highlight important information or provide additional context is very helpful.</li>
</ol>
<p><strong>Constructive Feedback:</strong></p>
<ol type="1">
<li>The tutorial assumes a certain level of familiarity with R and statistical concepts, which might be challenging for beginners. It would be helpful to provide more explanations or links to resources for beginners.</li>
<li>The code chunks are quite complex and could be broken down into smaller parts with more explanations.</li>
<li>The tutorial could benefit from more visualizations to illustrate the concepts and results.</li>
<li>The challenge section could provide more guidance or hints to help learners complete the task.</li>
</ol>
<p><strong>Suggestions for Improvement:</strong></p>
<ol type="1">
<li>Provide more explanations or links to resources for beginners to learn R and statistical concepts.</li>
<li>Break down complex code chunks into smaller parts with more explanations.</li>
<li>Include more visualizations to illustrate the concepts and results.</li>
<li>Provide more guidance or hints in the challenge section to help learners complete the task.</li>
<li>Include a glossary of terms or a list of R packages used in the tutorial for quick reference.</li>
</ol>
</blockquote>
</section>
<section id="overcoming-feedback-bottlenecks" class="level2">
<h2 class="anchored" data-anchor-id="overcoming-feedback-bottlenecks">Overcoming feedback bottlenecks</h2>
<p>A challenge with LLMs trained for general use is finding domain-specific tasks where they can add sufficient value beyond existing human input. Tasks like providing early sense checking and tailored feedback, particularly from differing perspectives, therefore has potential to overcome common bottlenecks in developing training materials (e.g.&nbsp;providing initial comments and flagging obvious issues while waiting for more detailed human feedback).</p>
<p>As Epiverse-TRACE training materials continue to develop, we plan to explore further uses beyond simple first-pass reviews. For example, LLMs are well suited to synthesising qualitative feedback, increasing the range of insights that can be collected and summarised from learners as we move into beta testing. We also hope to identify opportunities where LLMs can help supplement the learner experience, as demonstrated by emerging tools like <a href="http://rtutor.ai/">RTutor</a> for descriptive plotting functionality in R, which combines generation of code in response to user queries with translation into shiny outputs.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kucharski2024,
  author = {Kucharski, Adam and Valle Campos, Andree},
  title = {Using {LLM} Agents to Review Tutorials “in Character” as
    Learners},
  date = {2024-11-18},
  url = {https://epiverse-trace.github.io/posts/ai-learner-review/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kucharski2024" class="csl-entry quarto-appendix-citeas">
Kucharski, Adam, and Andree Valle Campos. 2024. <span>“Using LLM Agents
to Review Tutorials <span>‘in Character’</span> as Learners.”</span>
November 18, 2024. <a href="https://epiverse-trace.github.io/posts/ai-learner-review/">https://epiverse-trace.github.io/posts/ai-learner-review/</a>.
</div></div></section></div> ]]></description>
  <category>tutorials</category>
  <category>R</category>
  <category>R package</category>
  <guid>https://epiverse-trace.github.io/posts/ai-learner-review/</guid>
  <pubDate>Mon, 18 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dual licensing R packages with code and data</title>
  <dc:creator>Joshua Lambert</dc:creator>
  <dc:creator>Chris Hartgerink</dc:creator>
  <link>https://epiverse-trace.github.io/posts/data-licensing.html</link>
  <description><![CDATA[ 





<p>Licenses are an important topic within open source. Without licenses, information or code can be publicly available but not legally available for reuse or redistribution. The open source software community’s most common licenses are <a href="https://mit-license.org">the MIT license</a> or the <a href="https://www.gnu.org/licenses/gpl-3.0.html">GNU GPLv3</a>.</p>
<p>When you read the MIT or GNU license, you can see they are rather specific:</p>
<blockquote class="blockquote">
<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”) [MIT License]</p>
</blockquote>
<p>and</p>
<blockquote class="blockquote">
<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p>
</blockquote>
<p>They aim to cover primarily software, not other forms of information such as, for example, data.</p>
<section id="licensing-only-code-in-r-packages" class="level3">
<h3 class="anchored" data-anchor-id="licensing-only-code-in-r-packages">Licensing only code in R packages</h3>
<p>Given the importance of a license for redistribution, CRAN requires R packages to contain an <a href="https://cran.r-project.org/doc/FAQ/R-exts.html#Licensing">open-source license</a>.<sup>1</sup> As one of the most important distributors for R packages historically, this rule has become the de facto standard.</p>
<p>An R package is licensed appropriately when the license is stated in the metadata <code>DESCRIPTION</code> file and, if necessary, in the <code>LICENSE</code> file. We recommend including the <code>LICENSE</code> file, with the license year and exact copyright holder (for example, an organization or a specific individual). Some R package developers choose to include a copy of the license but this is <a href="https://r-pkgs.org/license.html#key-files">not bundled in the R package when it is built</a>. You can <a href="https://github.com/epiverse-trace/cfr/blob/29ee12aa9b8a49eedb9207d95c25c13d7d4e0ace/DESCRIPTION#L27">find an example of a <code>DESCRIPTION</code> file here</a> and <a href="https://github.com/epiverse-trace/cfr/blob/main/LICENSE">find an example <code>LICENSE</code> here</a>.</p>
</section>
<section id="licensing-only-data-in-r-packages" class="level3">
<h3 class="anchored" data-anchor-id="licensing-only-data-in-r-packages">Licensing only data in R packages</h3>
<p>It can be the case that an R package is primarily used to bundle and share a data set, for example to allow a user to easily download the data and load it into R. For example, <a href="https://github.com/jennybc/gapminder"><strong>gapminder</strong></a> and <a href="https://github.com/allisonhorst/palmerpenguins"><strong>palmerpenguins</strong></a>. As an aside, some in the R developer community<sup>2</sup> dissuade the use of R packages used primarily for data, often referred to as <a href="https://r-pkgs.org/data.html">“data packages”</a>, and instead advocate to host data online and use the several API packages available in R to access the data. <!-- Data packages are often small, openly accessibly data sets that are used to showcase the functionality of a package. In these cases the data is secondary to the code, and as such many of the R packages with these "toy" data sets only state a software license.  --></p>
<p>Software licenses do not apply to data. One piece of data cannot be copyrighted, as facts cannot be copyrighted, but a collection of data in a database can come with rights. In Europe, UK, and Russia, databases can have rights if they are a substantial and original piece of work.<sup>3</sup> This is called <a href="https://en.wikipedia.org/wiki/Database_right">the “sui generis” database right</a>. The USA and Brazil do not recognize this database right. Data compiled from various databases that themselves are copyrighted would need to follow the licenses of those respective databases.</p>
<p>Data need licenses such as the Public Domain Dedication or the Creative Commons Attribution to maximize redistribution. Such <a href="https://r-pkgs.org/license.html#code-you-write">general licenses</a> help minimize differences among countries that do and do not recognize database rights. Given that any copyright limitations (even attribution) mean they only apply when the database right is recognized, we recommend the most minimal option: The Public Domain Dedication. This levels the playing field for reuse and redistribution, no matter the jurisdiction.</p>
</section>
<section id="licensing-code-and-data-in-one-r-package" class="level3">
<h3 class="anchored" data-anchor-id="licensing-code-and-data-in-one-r-package">Licensing code and data in one R package</h3>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>This section on dual licensing was first published in September 2024. Since publishing, the <strong>epiparameter</strong> package is no longer dual licensed due to CRAN requirements.</p>
<p>Please <a href="data-licensing-cran.html#licensing-code-and-data-in-one-r-package">click here to see the updated version of the this section in a new post</a>, which updates the <em>Licensing code and data in one R package</em> section in light of our experience dual licensing an R package and CRAN.</p>
</div>
</div>
<p>But what to do if your R package has both code and data as primary objects of (roughly) equal importance?</p>
<p>In these cases a software license inadequately covers the data, and a data license inadequately covers the code. Dual licensing can help resolve this issue. This means there is one license for code (for example, MIT license) and another license for the included data (for example, Public Domain Dedication).</p>
<p>After conducting an online search, dual licensing for R packages seems rare. An interesting example of dual licensing is the <a href="https://github.com/igraph/igraphdata/blob/main/LICENSE"><strong>igraphdata</strong> package</a>, which contains several licenses: One for each dataset included in the package. Similar to igraphdata, in our own <a href="https://github.com/epiverse-trace/epiparameter"><strong>epiparameter</strong> package</a> we dual licensed the code and data as well. We <a href="https://github.com/epiverse-trace/epiparameter/blob/4f7008063040fc4a0b436a9e4d2adb9bb7022f6c/DESCRIPTION#L21">licensed the code using the <code>DESCRIPTION</code> file</a> and used <a href="https://github.com/epiverse-trace/epiparameter/blob/main/LICENSE">the <code>LICENSE</code> file</a> to license the data under CC0. Concretely, we include this additional text in <code>LICENSE</code> to clarify the dual license and that we recommend citing the original source regardless:</p>
<blockquote class="blockquote">
<p>All data included in the epiparameter R package is licensed under CC0 (<a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt" class="uri">https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt</a>). This includes the parameter database (extdata/parameters.json) and data in the data/ folder. Please cite the individual parameter entries in the database when used.</p>
</blockquote>
<p>When including data in your R package from other sources it is important to check that the license of your package and the data is compatible<sup>4</sup>, or that the individual data license is clearly stated, as in igraphdata. For epiparameter, we consider model estimates as facts (that is, not copyrightable).</p>
<hr>
<p>This blogpost helps explain a pattern of dual licensing rarely seen in the wild, and how to implement it in a CRAN conformant manner. By sharing this, we hope that those cases where people want to license both code and data, have a resource we wish we had while exploring this topic. Whether or not data packages and combined code + data packages should exist, is a question for another day.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For a full list of license accepted by CRAN see: <a href="https://svn.r-project.org/R/trunk/share/licenses/license.db" class="uri">https://svn.r-project.org/R/trunk/share/licenses/license.db</a> and they also accept stating the license as <a href="https://cran.r-project.org/doc/manuals/R-exts.html#Licensing-1">“Unlimited” for unrestricted distribution</a>.↩︎</p></li>
<li id="fn2"><p>A discussion of data and R packages can be found here: <a href="https://github.com/ropensci/unconf17/issues/61" class="uri">https://github.com/ropensci/unconf17/issues/61</a>. This thread is used as an example of some thoughts on packaging data in R but we acknowledge it is from 2017 so the opinions of the individuals in this thread may have changed.↩︎</p></li>
<li id="fn3"><p>To see the legal definition of the database right in Europe, and what constitutes it, see the <a href="https://eur-lex.europa.eu/eli/dir/1996/9/oj/eng">European Union Directive 96/9/EC</a>↩︎</p></li>
<li id="fn4"><p>See <a href="https://juliasilge.com/blog/sentiment-lexicons/">this blog post by Julia Silge on including external data sets into an R package and rectifying incompatibilities with license</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{lambert2024,
  author = {Lambert, Joshua and Hartgerink, Chris},
  title = {Dual Licensing {R} Packages with Code and Data},
  date = {2024-09-23},
  url = {https://epiverse-trace.github.io/posts/data-licensing.html},
  doi = {10.59350/4c9r0-71526},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-lambert2024" class="csl-entry quarto-appendix-citeas">
Lambert, Joshua, and Chris Hartgerink. 2024. <span>“Dual Licensing R
Packages with Code and Data.”</span> September 23, 2024. <a href="https://doi.org/10.59350/4c9r0-71526">https://doi.org/10.59350/4c9r0-71526</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>open-source</category>
  <category>package development</category>
  <category>DOI</category>
  <guid>https://epiverse-trace.github.io/posts/data-licensing.html</guid>
  <pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Some thoughts after a trial run of GitHub’s Copilot Workspace</title>
  <dc:creator>Joshua W. Lambert</dc:creator>
  <dc:creator>James Mba Azam</dc:creator>
  <dc:creator>Pratik Gupte</dc:creator>
  <dc:creator>Adam Kucharski</dc:creator>
  <link>https://epiverse-trace.github.io/posts/copilot-workspace/</link>
  <description><![CDATA[ 





<p>GitHub recently previewed <a href="https://github.blog/2024-04-29-github-copilot-workspace/">‘Copilot Workspace’</a>, which aims to use generative AI to assist software developers. Rather than just giving in-line suggestions, as GitHub copilot does, workspace allows users to map out and execute entire projects. We got early preview access to the tool, so decided to see how well it performed for our needs in Epiverse-TRACE.</p>
<p>In the Epiverse-TRACE initiative we aim to develop an ecosystem of epidemic analytics tools as <a href="https://digitalpublicgoods.net/">Digital Public Goods</a> in the form of R packages. We aim to <a href="https://epiverse-trace.github.io/blueprints/">follow best-practices</a> given that our tools will be used to inform public health decisions. For efficiency, we use a range of development tools, including integrated development environments (IDE), such as RStudio and Visual Studio Code, other R packages to help check and document our code, for example {lintr} and {roxygen2}, and version control and code sharing tools, git and GitHub.</p>
<p>Given the rapid development and increasing availability to artificial intelligence (AI) models, specifically large language models, offer the potential to be another development tool to add to the arsenal of researchers and software engineers to enhance productivity and improve the reliability of the code we write and others depend upon <span class="citation" data-cites="vanHoek2024">(Hoek et al. 2024)</span>. Large language models like ChatGPT from OpenAI, Gemini from Google, Claude from Anthropic, as well as many others and new ones frequently appearing, have presented opportunities to quickly generate material – text, code and images – from text prompts.</p>
<p>A small group of Epiverse-TRACE professors and research software engineers decided to explore the suitability of one such, GitHub Copilot integrated with GitHub Workspaces, for some typical use cases encountered in our day-to-day work. We do note that many other such tools are available, and we chose Copilot in Workspaces as our code is hosted on GitHub, making for easy evaluation of the specific contribution of the AI tool. However, some of our broad conclusions are based on using other tools for similar tasks.</p>
<p>The aim of this blog post is to summarise our experiences with Copilot and Workspaces, and share our thoughts more generally about how the current feature set of AI-powered development tools could help with our daily development tasks, and with research software development at large. We evaluated Copilot workspace across three tasks of varying difficulty and requirements:</p>
<ul>
<li><p>Experiment 1: Exporting an R function by updating the documentation</p></li>
<li><p>Experiment 2: Adding a basic epidemic model to an existing R package that contains other epidemiological models</p></li>
<li><p>Experiment 3: Conducting a code review on an R package</p></li>
</ul>
<section id="experiment-1-export-an-r-function-by-updating-the-documentation" class="level2">
<h2 class="anchored" data-anchor-id="experiment-1-export-an-r-function-by-updating-the-documentation">Experiment 1: Export an R function by updating the documentation</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Difficulty level: basic</p>
</div>
</div>
<p>The first experiment was on the {EpiNow2} R package. An existing <a href="https://github.com/epiforecasts/EpiNow2/issues/681">Issue #681</a> was chosen. It was a simple task to evaluate Copilot workspace’s ability to interpret requests that require small changes to the codebase of a package (i.e.&nbsp;can be achieved in a single commit by changing less than 5 lines of code). The issue stated that an internal function, <code>epinow2_cmdstan_model()</code> should be exported, with the issue description explaining this would help users specify custom options for running the models.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://epiverse-trace.github.io/posts/copilot-workspace/epinow2_issue.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of EpiNow2 package issue 681 which was used as an example application of GitHub Copilot Workspace.</figcaption>
</figure>
</div>
<!-- markdownlint-disable MD024 -->
<section id="outcome" class="level3">
<h3 class="anchored" data-anchor-id="outcome">Outcome</h3>
<p>The specification provided by Copilot workspace diagnosed the issue requirements, mentioning that the <code>NAMESPACE</code> file, which stores information on functions offered by a package and functions imported from other packages, would have to be updated for the R package to export this currently unexported function. The proposed solution also addressed the desired changes, stating that the function was to be exported and the keyword <code>internal</code> would be removed. The automatically generated plan proposed to edit the file documentation and <code>NAMESPACE</code>, but we edited this to more specifically replace the <code>@keyword internal</code> {roxygen} tag with <code>@export</code>.</p>
</section>
<section id="our-thoughts" class="level3">
<h3 class="anchored" data-anchor-id="our-thoughts">Our thoughts</h3>
<p>The implementation offered by GitHub copilot workspace was correct and replaced <code>@keywords internal</code> with <code>@export</code> in the correct function documentation <code>epinow2_stan_model()</code>.</p>
<p>However, it also changed the formatting of one of the function arguments (<code>@param model</code>) by moving some text to the next line and added a comma to the last but one item listed in the sentence. (It seems AI has taken a side on the Oxford comma debate).</p>
<p>Overall, this test case of GitHub copilot workspace was a partial success. It correctly recognised the links between inline R function documentation, Roxygen tags, and the R-specific documentation files in <code>man/</code>. However, it (naturally) does not have a mechanistic understanding of package development and how changing tags in documentation is used to auto-update doc files using development tools. It correctly modified the part of the file needed to export an internal function. This showcases an example of where this technology can be beneficial: those new to a language or paradigm that have not yet picked up all of the development details that are often second nature to experienced developers. In this example, the time taken to make this change in GitHub copilot workspace was likely ~10x longer than what our RSEs would take. However, if someone was used to developing in say, Python, and was new to the conventions of exporting functions in R using {roxygen} documentation, this test case shows how copilot workspace can reliably assist. On the other hand, because these changes make no reference to standard development tools, they would not help new developers learn how or where to use them.</p>
<p>The changes made will still require the user to manually run the documentation (using either <code>devtools::document()</code> or <code>roxygen2::roxygenize()</code>) to update the package <code>NAMESPACE</code> for the function to be exported. Our recommendation would be for AI tools to integrate with and call development tools used by developers (analogous to pre-commit hooks running tools before committing) to make sure this is taken care of all in a single generative step.</p>
</section>
</section>
<section id="experiment-2-add-a-simple-epidemic-model-to-an-r-package-that-contains-more-complex-models" class="level2">
<h2 class="anchored" data-anchor-id="experiment-2-add-a-simple-epidemic-model-to-an-r-package-that-contains-more-complex-models">Experiment 2: Add a simple epidemic model to an R package that contains more complex models</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Difficulty level: moderate to high</p>
</div>
</div>
<p>{epidemics} is an Epiverse-TRACE R package that exports a range of compartmental epidemiological models of varying complexities and applications.</p>
<p>In the second test case, we created an issue in the {epidemics} R package requesting a basic SIR model, with the issue description requesting the model to have no age structure and to use existing functionality in the package to specify a disease intervention. Additionally, the issue requested that the model be solved with the {deSolve} R package, which is a differential equation solver in R. A basic SIR model would have been new to the package, but one of several other compartmental models, and simpler than the models already implemented.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://epiverse-trace.github.io/posts/copilot-workspace/epidemics_issue.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of epidemics package issue 238 which was used as an example application of GitHub Copilot Workspace.</figcaption>
</figure>
</div>
<section id="outcome-1" class="level3">
<h3 class="anchored" data-anchor-id="outcome-1">Outcome</h3>
<p>GitHub copilot workspace outlined the existing functionality in the package and proposed changes including adding a new file called <code>R/model_sir.R</code>, which follows the <code>model_*.R</code> naming convention used in {epidemics}. As requested, copilot also proposed that the new SIR model would support the use of interventions that are already been implemented in the package.</p>
</section>
<section id="our-thoughts-1" class="level3">
<h3 class="anchored" data-anchor-id="our-thoughts-1">Our thoughts</h3>
<p>The code generated was an R function that constructed a basic SIR model, and this was well documented using a {roxygen2} documentation block. However, several aspects of the code generated did not match the proposal generated by copilot workspace, and the code contained inadvisable coding practices in R (i.e.&nbsp;code smells). Firstly the SIR model itself. The model implemented follows the standard set of differential equations that are solved using {deSolve}, as requested in our prompt. However, the model does not have any options to input interventions, which the proposed solution by GitHub copilot workspace suggested it would. The second downside is the use of <code>require(deSolve)</code> in the function body of the generated code. This is bad practice in R package development as functions should namespace any functions that are being called from other packages (e.g.&nbsp;<code>packagename::func_name()</code>).</p>
<p>This task required copilot workspace to understand the contents and conventions of the {epidemics} R package and generate a simple compartmental model which would integrate with the infrastructure in the package for defining interventions in models. Although it correctly summarised the package contents, its attempt to answer the specific request from our prompt had many inaccuracies. The generated code is likely influenced by the many examples of SIR models written in R on the internet and on GitHub. These might be R scripts or gists and thus coding practises used there are not always appropriate for writing code to be distributed in an R package, resulting in decisions like having <code>require(deSolve)</code> in the function.</p>
<p>AI-generated code like that seen in this example showcases where users need to be diligent and not assume that the text descriptions from copilot match the code. In the end, this was a test example and was unlikely to be merged into {epidemics} even if the code was correct. However, with the code generated, it presents almost no use; it would require as much time for an RSE to refactor this function as it would to write one from scratch following the design principles and demands of the {epidemics} package.</p>
</section>
</section>
<section id="experiment-3-conducting-a-code-review-on-an-r-package" class="level2">
<h2 class="anchored" data-anchor-id="experiment-3-conducting-a-code-review-on-an-r-package">Experiment 3: Conducting a code review on an R package</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Difficulty level: moderate to high</p>
</div>
</div>
<p>In the last test case, we requested GitHub copilot workspace to conduct a <a href="https://github.com/epiverse-trace/simulist/pull/117">code review of the entire code base of a package</a>. At Epiverse-TRACE, it is standard practise to conduct a full package review. As any code base develops, including R packages, more commits are added and often the number of lines of code increases. Reviewing all of these changes before releasing a new version of the package is a timely undertaking for package reviewers. If AI tools could review the code base, similar to how static code analysers work, and suggest improvements to, for example, code style, memory efficiency, documentation, unit testing, UX/UI, it would greatly improve efficiency before releasing the code.</p>
<section id="outcome-2" class="level3">
<h3 class="anchored" data-anchor-id="outcome-2">Outcome</h3>
<p>Here, Copilot provided no analysis of the code base. It regurgitated the changes described in the <a href="https://epiverse-trace.github.io/blueprints/code-review.html#full-package-review">package review pull request</a>, likely from a mix of the pull request description and the changelog (<code>NEWS.md</code> file), and did not analyse any of the code. Therefore, it provided no additional use than if the reviewer had just read the <code>NEWS</code>.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Based on our trials we observe that GitHub copilot Workspace may not provide a significant benefit to research software engineers in domain-specific R package development, where problems are complex and bespoke solutions are common. The evidence above suggests there’s still a long way to go before AI-powered tools can produce unsupervised code projects equivalent to that of a research software engineer. One observation is that generative AI is better trained for some purposes than others, biased by the amount of training data/information available. This makes it struggle in niche areas with a relatively smaller public code base to train models with (e.g.&nbsp;R functions for epidemic analysis are much rarer than generic JavaScript functions for web design). A second is that AI models don’t seem to understand how different parts of a codebase link together, so they provide solutions that are inconsistent with the requirements of the codebase (design principles, code style, etc). These models may, however, be more useful for more common tasks, such as building dashboard templates.</p>
<p>The test cases we experimented with suggest that this tool will not replace, and at times not even enhance development when the task requires a more integrated development than generating a standalone script. These tools are evolving rapidly and we are sure improvements will continue. In the short term tools like GitHub copilot workspace need to be used responsibly with an awareness of their limitations and not a blind trust that the code it writes is always correct. We would caution against relying on generative AI tools alone to develop software with potentially large-scale impacts - scrutiny by trained developers is still key. Research software engineers will play a key part in this as they will ensure that code and software written with and by AI tools meet required standards, are trustworthy, and are not potentially harmful. Where we see generative AI tools being more immediately useful in research software development is in <a href="https://billyquilty.substack.com/p/llmlinelist-enabling-rapid-outbreak">tasks that require sifting through or summarising vast amounts of information</a>; for example, in querying software documentation, or to help get started with a new programming framework or language.</p>
<p><strong>All authors thank Hugo Gruson and Chris Hartgerink for their valuable feedback and contributions to this post.</strong></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-vanHoek2024" class="csl-entry">
Hoek, Albert Jan van, Sebastian Funk, Stefan Flasche, Billy J Quilty, Esther van Kleef, Anton Camacho, and Adam J Kucharski. 2024. <span>“Importance of Investing Time and Money in Integrating Large Language Model-Based Agents into Outbreak Analytics Pipelines.”</span> <em>The Lancet Microbe</em>, May. <a href="https://doi.org/10.1016/s2666-5247(24)00104-6">https://doi.org/10.1016/s2666-5247(24)00104-6</a>.
</div>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{w._lambert2024,
  author = {W. Lambert, Joshua and Mba Azam, James and Gupte, Pratik and
    Kucharski, Adam},
  title = {Some Thoughts After a Trial Run of {GitHub’s} {Copilot}
    {Workspace}},
  date = {2024-07-15},
  url = {https://epiverse-trace.github.io/posts/copilot-workspace/},
  doi = {10.59350/ncsre-v2w98},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-w._lambert2024" class="csl-entry quarto-appendix-citeas">
W. Lambert, Joshua, James Mba Azam, Pratik Gupte, and Adam Kucharski.
2024. <span>“Some Thoughts After a Trial Run of GitHub’s Copilot
Workspace.”</span> July 15, 2024. <a href="https://doi.org/10.59350/ncsre-v2w98">https://doi.org/10.59350/ncsre-v2w98</a>.
</div></div></section></div> ]]></description>
  <category>AI</category>
  <category>GitHub</category>
  <category>Copilot Workspace</category>
  <category>R</category>
  <category>R package</category>
  <category>software development</category>
  <category>DOI</category>
  <guid>https://epiverse-trace.github.io/posts/copilot-workspace/</guid>
  <pubDate>Mon, 15 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Improving Ecosystem Interoperability Iteratively via Progressive Enhancement</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/progressive-enhancement/</link>
  <description><![CDATA[ 





<p>We are continuing our post series on S3 object orientation and interoperability in R. We have previously discussed <a href="../parent-class">what makes a good S3 class and how to choose a good parent for it, as well as when to write or not write a custom method</a>. We have highlighted in particular how classes inheriting from data.frames can simplify user experience because of familiarity, and reduce developer workload due to the pre-existing S3 methods.</p>
<p>We have detailed how to improve compatibility with the tidyverse by explaining:</p>
<ul>
<li><a href="https://hugogruson.fr/posts/compa-tibble/">how functions taking data.frames or data.frames subclass should also allow compatibility with tibble, which can be done in a few steps</a></li>
<li><a href="../extend-dataframes">how to ensure class attributes are preserved whenever possible while using dplyr functions</a>.</li>
</ul>
<p>Here, we are going to explore how to start adding support in the ecosystem for the new S3 classes while minimizing user-facing breaking changes. We have previously delved into this topic with our post <a href="../s3-generic">“Convert Your R Function to an S3 Generic: Benefits, Pitfalls &amp; Design Considerations”</a> and this is a wider and higher-level view of the same topic.</p>
<p>The strategy presented here is the variation of a common concept in web development and the web ecosystem: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement">progressive enhancement</a>. This philosophy aims to support browsers with a common set of essential features, and even richer features for browser with the most recent updates. It makes sense to think about this philosophy with the prism of introducing new classes to a new software ecosystem as it has the similar constraints of multiple stakeholders with different interests and timelines. The application of progressive enhancement in this context means that users or packages that have not (yet) adopted the new classes are not penalized compared to users or packages that have.</p>
<section id="adding-class-support-to-function-inputs-via-progressive-enhancement" class="level2">
<h2 class="anchored" data-anchor-id="adding-class-support-to-function-inputs-via-progressive-enhancement">Adding class support to function inputs via progressive enhancement</h2>
<p>The goal here is to allow functions to accept the new classes as inputs, while keeping the old behaviour unchanged for unclassed objects (or with a different class than the new one).</p>
<p>This can conveniently be done in an almost transparent way by converting the old function to the S3 generic, and using the default method to handle the old behaviour. The practical steps, and minor caveats, have been previously described in the post <a href="../s3-generic">“Convert Your R Function to an S3 Generic: Benefits, Pitfalls &amp; Design Considerations”</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://epiverse-trace.github.io/posts/progressive-enhancement/convert_to_generic.svg" class="img-fluid figure-img"></p>
<figcaption>A before / after type image showing the conversion of a function to a generic with a default method keeping the exisiting behaviour.</figcaption>
</figure>
</div>
<p>For a different, additional, example, we can consider a function working on patient-level data, which previously only accepted a <code>data.frame</code> as input:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Compute length of stay in hospital on a patient-level dataset</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param data A data.frame containing patient-level data</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param admission_column The name of the column containing the admission date</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param discharge_column The name of the column containing the discharge date</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @returns A numeric vector of hospitalization durations in days</span></span>
<span id="cb1-8">compute_hospitalization_duration <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, admission_column, discharge_column) {</span>
<span id="cb1-9"></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(</span>
<span id="cb1-11">    data[[discharge_column]],</span>
<span id="cb1-12">    data[[admission_column]],</span>
<span id="cb1-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span></span>
<span id="cb1-14">  )</span>
<span id="cb1-15"></span>
<span id="cb1-16">}</span></code></pre></div></div>
<p>We want to add support for <code>linelist</code> objects, as defined in the <a href="https://epiverse-trace.github.io/linelist">linelist package</a>. <code>linelist</code> objects inherit from <code>data.frame</code> and contain an additional <code>tags</code> attribute. In particular, <code>linelist</code> objects can have a <code>date_admission</code> and <code>date_discharge</code> tag. This means we can use the tags to automatically detect the columns to use.</p>
<p>But we want the function to keep working for standard <code>data.frame</code>s, <code>tibble</code>s, etc. We can follow the steps described in the previous post to convert the function to a generic, and add a default method to handle the old behaviour:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">compute_hospitalization_duration <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, ...) {</span>
<span id="cb2-2"></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compute_hospitalization_duration"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">}</span>
<span id="cb2-6"></span>
<span id="cb2-7">compute_hospitalization_duration.default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, admission_column, discharge_column) {</span>
<span id="cb2-8"></span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(</span>
<span id="cb2-10">    data[[discharge_column]],</span>
<span id="cb2-11">    data[[admission_column]],</span>
<span id="cb2-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span></span>
<span id="cb2-13">  )</span>
<span id="cb2-14"></span>
<span id="cb2-15">}</span>
<span id="cb2-16"></span>
<span id="cb2-17">compute_hospitalization_duration.linelist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, ...) {</span>
<span id="cb2-18"></span>
<span id="cb2-19">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> linelist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tags_df</span>(data)</span>
<span id="cb2-20"></span>
<span id="cb2-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_hospitalization_duration</span>(</span>
<span id="cb2-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> x,</span>
<span id="cb2-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">admission_column =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date_admission"</span>,</span>
<span id="cb2-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">discharge_column =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date_discharge"</span></span>
<span id="cb2-25">  )</span>
<span id="cb2-26"></span>
<span id="cb2-27">}</span></code></pre></div></div>
<p>If the function was already a generic, then a new method for the new class should be added, leaving everything else unchanged.</p>
</section>
<section id="adding-class-support-to-function-outputs-via-progressive-enhancement" class="level2">
<h2 class="anchored" data-anchor-id="adding-class-support-to-function-outputs-via-progressive-enhancement">Adding class support to function outputs via progressive enhancement</h2>
<p>Adding class support to function outputs is often more challenging. A common option is to add a new argument to the function, which would be a boolean indicating whether the output should be of the new class or not. But this doesn’t fit in the view of progressive enhancement, as it would require users to change their code to benefit from the new classes, or to suffer from breaking changes.</p>
<p>While the new argument approach is sometimes indeed the only possible method, there are some situations where we can have an approach truly following the progressive enhancement philosophy.</p>
<p>In particular, this is the case when the old output was already inheriting from the parent of the new class (hence the importance of carefully choosing the parent class). In this situation, the new attributes from the new class should not interfere with existing code for downstream analysis.</p>
<p>In this case, let’s consider a function that was previously returning an unclassed <code>data.frame</code> with patient-level data:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">create_patient_dataset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_patients =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb3-2"></span>
<span id="cb3-3">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">patient_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n_patients),</span>
<span id="cb3-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, n_patients, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-6">  )</span>
<span id="cb3-7"></span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data)</span>
<span id="cb3-9"></span>
<span id="cb3-10">}</span></code></pre></div></div>
<p>We want to start returning a <code>linelist</code> object. Because <code>linelist</code> objects are <code>data.frame</code>s (or <code>tibble</code>s) with an extra <code>attr</code>, it can be done in a transparent way:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">create_patient_dataset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_patients =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb4-2"></span>
<span id="cb4-3">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">patient_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n_patients),</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, n_patients, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-6">  )</span>
<span id="cb4-7"></span>
<span id="cb4-8">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> linelist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_linelist</span>(</span>
<span id="cb4-9">    data,</span>
<span id="cb4-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"patient_id"</span>,</span>
<span id="cb4-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span></span>
<span id="cb4-12">  )</span>
<span id="cb4-13"></span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data)</span>
<span id="cb4-15"></span>
<span id="cb4-16">}</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span></code></pre></div></div>
<p>For a more realistic example, you can also see the work in progress to integrate the <a href="https://github.com/socialcontactdata/contactmatrix">new <code>contactmatrix</code> standard format</a> for social contact data to the <a href="https://github.com/Bisaloo/contactdata">contactdata package</a>.</p>
<p>This is however only true if code in downstream analysis follows good practices in checking for the class of an object <sup>1</sup>. If existing code was testing equality of the class to a certain value, it will break when the new class value is appended. This is described in a <a href="https://developer.r-project.org/Blog/public/2019/11/09/when-you-think-class.-think-again/index.html">post on the R developer blog, when base R was adding a new <code>array</code> class value to <code>matrix</code> objects</a>. Class inheritance should never be tested via <code>class(x) == "some_class"</code>. Instead, <code>inherits(x, "some_class")</code> or <code>is(x, "some_class")</code> should be used to future-proof the code and allow appending an additional in the future.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Object oriented programming and S3 classes offer a convenient way to iteratively add interoperability in the ecosystem in a way that is minimally disruptive to users and developers. Newly classed input support can be added via custom methods (after converting the existing function to a generic if necessary). Newly classed output support can be added via progressive enhancement, by ensuring that the new class is a subclass of the old one and that downstream code uses good practices to test class inheritance.</p>
<p><strong>Thanks to James Azam and Tim Taylor for their very valuable feedback on this post.</strong></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This is now <a href="https://github.com/r-devel/r-svn/commit/77ebdff5adc200dfe9bc850bc4447088830d2ee0">enforced in R packages by R CMD check</a>, and via the <a href="https://lintr.r-lib.org/reference/class_equals_linter.html"><code>class_equals_linter()</code></a> in the <a href="https://lintr.r-lib.org/">lintr package</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gruson2024,
  author = {Gruson, Hugo},
  title = {Improving {Ecosystem} {Interoperability} {Iteratively} via
    {Progressive} {Enhancement}},
  date = {2024-07-05},
  url = {https://epiverse-trace.github.io/posts/progressive-enhancement/},
  doi = {10.59350/tdkxg-nd950},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gruson2024" class="csl-entry quarto-appendix-citeas">
Gruson, Hugo. 2024. <span>“Improving Ecosystem Interoperability
Iteratively via Progressive Enhancement.”</span> July 5, 2024. <a href="https://doi.org/10.59350/tdkxg-nd950">https://doi.org/10.59350/tdkxg-nd950</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>interoperability</category>
  <category>S3</category>
  <category>progressive enhancement</category>
  <category>ecosystem</category>
  <category>lifecycle</category>
  <category>object-oriented programming</category>
  <category>DOI</category>
  <guid>https://epiverse-trace.github.io/posts/progressive-enhancement/</guid>
  <pubDate>Fri, 05 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Choosing the Right Parent for R Object Classes</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/parent-class/</link>
  <description><![CDATA[ 





<p><a href="https://hugogruson.fr/posts/compa-tibble/">I have recently published</a> a <a href="https://epiverse-trace.github.io/posts/s3-generic/">series of blog posts</a> on the reasons why one may want to start using object-oriented programming (and more specifically R S3 classes) to improve interoperability with other tools from the ecosystem.</p>
<p>But there are still questions I have not addressed directly, even if they may have been implicitly included sometimes: what makes a good object class? What good practices in class &amp; function design can improve interoperability?</p>
<p>As you can expect from these questions, this post will present a subjective view on S3 class and method design. I will argue that it is often a good strategy to inherit from existing standards classes, and to leverage this inheritance relationship as much as possible.</p>
<section id="inherit-from-standard-classes" class="level2">
<h2 class="anchored" data-anchor-id="inherit-from-standard-classes">Inherit from standard classes</h2>
<p>A unique feature of R is the availability and centrality of <code>data.frame</code>s in the base language, whereas you need extra libraries for a similar functionality in most other languages (e.g., <a href="https://pandas.pydata.org/">pandas</a> in Python).</p>
<p><code>data.frame</code> is one of the first “complex” (in the sense of <a href="https://adv-r.hadley.nz/vectors-chap.html#atomic-vectors">non-atomic</a>) object most R learners will be exposed to and will develop a familiarity with. A good way to leverage this familiarity is to <a href="https://epiverse-trace.github.io/posts/extend-dataframes/">make your subclass a thin wrapper around <code>data.frame</code>s</a>.</p>
<p>This means that not only will users be able to get started with your package faster because of this familiarity, but you will also immediately benefit from the huge ecosystem of functions and packages working on <code>data.frame</code>s, such as the <a href="https://tidyverse.org">tidyverse</a>. If you want some examples, this is what collaborators and I did in the <a href="https://github.com/epiverse-trace/linelist">linelist</a>, <a href="https://github.com/rmaia/pavo">pavo</a>, <a href="https://github.com/epiforecasts/scoringutils">scoringutils</a>, <a href="https://github.com/epiverse-trace/epichains">epichains</a>, and <a href="https://github.com/epiverse-trace/vaccineff">vaccineff</a> R packages.</p>
<p>In some cases, the output is too complex to fit into a <code>data.frame</code>. Even in this situation, I would recommend inheriting from existing, well-established, classes for the same two reasons: familiarity and ecosystem. For example, for the <a href="https://github.com/epiverse-trace/serofoi">serofoi</a> R package, <a href="https://github.com/epiverse-trace/serofoi/pull/117">we have made the decision to inherit from <code>stanfit</code> objects, rather than a custom structure</a>.</p>
</section>
<section id="rely-on-parent-methods-as-much-as-possible" class="level2">
<h2 class="anchored" data-anchor-id="rely-on-parent-methods-as-much-as-possible">Rely on parent methods as much as possible</h2>
<p>A follow up recommendation from inheriting from standard classes is to leverage their methods wherever possible.</p>
<p><a href="https://github.com/epiverse-trace/linelist/pull/60">One of the first</a> <a href="https://github.com/epiverse-trace/linelist/pull/61">changes I made</a> when becoming maintainer of the <a href="https://github.com/epiverse-trace/linelist">linelist</a> package was to remove the <code>rename.linelist()</code> and <code>select.linelist()</code> methods. Indeed, they were, or could easily be, behaving identically as the parent <code>rename.data.frame()</code> and <code>select.data.frame()</code> methods. Rather than burdening the codebase and maintenance with an extra unnecessary method, it is much simpler and more robust to rely on the well-tested parent method. In fact, the <a href="https://dplyr.tidyverse.org/reference/dplyr_extending.html">dplyr documentation</a> explicitly recommends only writing methods for a couple of standard functions (including <code>[.subclass()</code> and <code>names&lt;-.subclass()</code>), which will enable the use of parent methods directly, rather than writing custom methods for each dplyr function.</p>
<p>Similarly, many developers have the reflex to write a custom <code>print.subclass()</code> method as part of the method implementation. While it may be justified in some cases, it is sometimes unnecessary. My recommendation would be to evaluate carefully what benefits the custom method brings over the default parent method.</p>
</section>
<section id="enable-conversion-to-standard-classes" class="level2">
<h2 class="anchored" data-anchor-id="enable-conversion-to-standard-classes">Enable conversion to standard classes</h2>
<p>If after careful consideration, extra metadata makes it too difficult to fit your new class into an existing class, you may sometimes have to define your own class from “scratch” (i.e., often <code>list()</code> in R).</p>
<p>But even in this case, you can still apply some of the ideas proposed earlier. As much as possible, you should provide helpers or methods to enable the streamlined conversion of your method to a standard class.</p>
<p>A good example here is the <a href="https://github.com/epiverse-trace/epiparameter">epiparameter</a> package, which provides a complex S3 class built on lists, including extensive metadata about probability distribution of epidemiological parameters. As such, this custom class cannot be used out of the box in most functions from other packages. <a href="https://github.com/epiverse-trace/epiparameter/blob/0f805b90f984def4851a78148f1cf44c3d480845/R/coercion.R#L18-L41">But an <code>as.function()</code> method is conveniently provided to enable the conversion of this probability distribution parameters into a density distribution</a>, which can then be used in functions which expect a <code>function</code> object.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In summary, I recommend relying on well-established parent classes such as <code>data.frame</code>s or at least providing direct conversion functions to these standard classes, and using parent methods wherever possible rather than writing custom dedicated methods. This should help produce a package:</p>
<ul>
<li>more easily accessible for users because it uses objects that feel familiar</li>
<li>more maintainable because a lot of method writing is offloaded to the parent class</li>
<li>more likely to be interoperable because standard classes are a good way to pass data between functions or packages</li>
</ul>
<p><strong>Thanks to Chris Hartgerink, James Azam and Josh Lambert, for their very valuable feedback on this post.</strong></p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gruson2024,
  author = {Gruson, Hugo},
  title = {Choosing the {Right} {Parent} for {R} {Object} {Classes}},
  date = {2024-06-26},
  url = {https://epiverse-trace.github.io/posts/parent-class/},
  doi = {10.59350/fk6nv-1k973},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gruson2024" class="csl-entry quarto-appendix-citeas">
Gruson, Hugo. 2024. <span>“Choosing the Right Parent for R Object
Classes.”</span> June 26, 2024. <a href="https://doi.org/10.59350/fk6nv-1k973">https://doi.org/10.59350/fk6nv-1k973</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R package</category>
  <category>object-oriented programming</category>
  <category>S3</category>
  <category>interoperability</category>
  <category>DOI</category>
  <guid>https://epiverse-trace.github.io/posts/parent-class/</guid>
  <pubDate>Wed, 26 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Things that can go wrong when using renv</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/renv-complications/</link>
  <description><![CDATA[ 





<p>Throughout the Epiverse project, we use the <a href="https://rstudio.github.io/renv/">renv R package</a> to ensure reproducibility of the training materials and the pipelines we are providing. But we sometimes get reports from users who struggle to rebuild the environment and run the code.</p>
<p>In this post, we dissect the source of these issues, explain why in reality renv is not at fault, and how this is caused by the inherent complexity of reproducibility. The renv documentation already includes <a href="https://rstudio.github.io/renv/articles/renv.html#caveats">caveats</a> explaining why some situations are bound to require more complex tools. This blog post reiterates some of these caveats and illustrates them with concrete examples.</p>
<p>Finally, we mention a couple of more complete (but more complex!) frameworks that can overcome the issues presented here. We do not explore these alternative framework in detail but provide links to more information.</p>
<section id="binaries-vs-building-from-source" class="level2">
<h2 class="anchored" data-anchor-id="binaries-vs-building-from-source">Binaries vs building from source</h2>
<p>Software, including R packages, can generally be delivered in two forms: as binaries or as source code. If you are building from the source code, you may in some case need a compilation toolchain on your computer. If that toolchain is missing, it can lead to errors such as:</p>
<blockquote class="blockquote">
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb1-1">ld: warning: search path '/opt/gfortran/lib' not found</span>
<span id="cb1-2">ld: library 'gfortran' not found</span></code></pre></div></div>
</blockquote>
<p>Most of the time, regular users of R will not see these errors because they are installing binaries. Indeed, CRAN provides pre-compiled binaries for Windows and macOS for the last version of the package and R.</p>
<p>With renv, you often want to install older versions of the packages, which won’t be available as binaries from CRAN. This means you are more likely to have to compile the package yourself and see this kind of errors, even though renv is not causing them.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>gfortran issues on Apple Silicon computers
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you are an Apple Silicon (Mac M1, M2, M3) user and encounter issues with gfortran, we have had success using the <a href="https://github.com/coatless-mac/macrtools/">macrtools R package</a> and we strongly recommend checking it out.</p>
</div>
</div>
</section>
<section id="beyond-renv-scope-incompatibility-with-system-dependency-versions" class="level2">
<h2 class="anchored" data-anchor-id="beyond-renv-scope-incompatibility-with-system-dependency-versions">Beyond renv scope: incompatibility with system dependency versions</h2>
<p>We <a href="../system-dependencies/">discussed previously the topic of system dependencies</a>, and <a href="https://blog.r-hub.io/2022/09/12/r-dependency/">dependencies on specific R versions</a>. These special dependencies can also be a source of headaches when using renv.</p>
<p>The heart of the issue is that renv provides a simplified solution to reproducibility: it focuses on R packages and their versions. But other sources of non-reproducibility are outside its scope. In many cases, this will not be a problem, as the main source of non-reproducibility, especially in the relatively short-term, will be R package versions.</p>
<p>But sometimes, it is possible that the <code>renv.lock</code> lockfile requires such an old version of an R package that it was written with a syntax that is no longer supported by recent R versions or modern compilers.</p>
<p>For example, a recent project (from 2023) was trying to install the version 0.60.1 of the <code>matrixStats</code> package (from 2021). This lead to this compilation error:</p>
<blockquote class="blockquote">
<p>error: ‘DOUBLE_XMAX’ undeclared (first use in this function); did you mean ‘DBL_MAX’?</p>
</blockquote>
<!-- markdownlint-disable MD033 -->
<details>
<summary>
Click to see the full error message
</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb2-1">! Error installing package 'matrixStats':</span>
<span id="cb2-2">=======================================</span>
<span id="cb2-3"></span>
<span id="cb2-4">* installing *source* package ‘matrixStats’ ...</span>
<span id="cb2-5">** package ‘matrixStats’ successfully unpacked and MD5 sums checked</span>
<span id="cb2-6">** using staged installation</span>
<span id="cb2-7">** libs</span>
<span id="cb2-8">using C compiler: ‘gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’</span>
<span id="cb2-9">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c 000.init.c -o 000.init.o</span>
<span id="cb2-10">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c allocMatrix2.c -o allocMatrix2.o</span>
<span id="cb2-11">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c anyMissing.c -o anyMissing.o</span>
<span id="cb2-12">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c binCounts.c -o binCounts.o</span>
<span id="cb2-13">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c binMeans.c -o binMeans.o</span>
<span id="cb2-14">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c colCounts.c -o colCounts.o</span>
<span id="cb2-15">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c colOrderStats.c -o colOrderStats.o</span>
<span id="cb2-16">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c colRanges.c -o colRanges.o</span>
<span id="cb2-17">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c diff2.c -o diff2.o</span>
<span id="cb2-18">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c indexByRow.c -o indexByRow.o</span>
<span id="cb2-19">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c logSumExp.c -o logSumExp.o</span>
<span id="cb2-20">gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -ffile-prefix-map=/build/r-base-H0vbME/r-base-4.3.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c mean2.c -o mean2.o</span>
<span id="cb2-21">In file included from mean2_lowlevel.h:14,</span>
<span id="cb2-22">                 from mean2.c:9:</span>
<span id="cb2-23">mean2_lowlevel_template.h: In function ‘mean2_int’:</span>
<span id="cb2-24">mean2_lowlevel_template.h:59:13: error: ‘DOUBLE_XMAX’ undeclared (first use in this function); did you mean ‘DBL_MAX’?</span>
<span id="cb2-25">   59 |   if (sum &gt; DOUBLE_XMAX) {</span>
<span id="cb2-26">      |             ^~~~~~~~~~~</span>
<span id="cb2-27">      |             DBL_MAX</span>
<span id="cb2-28">mean2_lowlevel_template.h:59:13: note: each undeclared identifier is reported only once for each function it appears in</span>
<span id="cb2-29">In file included from mean2_lowlevel.h:18,</span>
<span id="cb2-30">                 from mean2.c:9:</span>
<span id="cb2-31">mean2_lowlevel_template.h: In function ‘mean2_dbl’:</span>
<span id="cb2-32">mean2_lowlevel_template.h:59:13: error: ‘DOUBLE_XMAX’ undeclared (first use in this function); did you mean ‘DBL_MAX’?</span>
<span id="cb2-33">   59 |   if (sum &gt; DOUBLE_XMAX) {</span>
<span id="cb2-34">      |             ^~~~~~~~~~~</span>
<span id="cb2-35">      |             DBL_MAX</span>
<span id="cb2-36">make: *** [/usr/lib/R/etc/Makeconf:191: mean2.o] Error 1</span>
<span id="cb2-37">ERROR: compilation failed for package ‘matrixStats’</span></code></pre></div></div>
</details>
<p>The explanation for this error can be found in <a href="https://github.com/HenrikBengtsson/matrixStats/blob/799669fc6de6f55a74cab06cc6a97634aa24ab0e/NEWS.md?plain=1#L111-L113">the <code>matrixStats</code> release notes</a>, specifically the section for matrixStats 0.63.0:</p>
<blockquote class="blockquote">
<ul>
<li>Updated native code to use the C99 constant <code>DBL_MAX</code> instead of legacy S constant <code>DOUBLE_XMAX</code>, which is planned to be unsupported in R (&gt;= 4.2.0).</li>
</ul>
</blockquote>
</section>
<section id="some-solutions" class="level2">
<h2 class="anchored" data-anchor-id="some-solutions">Some solutions</h2>
<section id="alternative-package-managers" class="level3">
<h3 class="anchored" data-anchor-id="alternative-package-managers">Alternative package managers</h3>
<p>We discussed how many issues when using renv can arise during the package compilation from source. A potential solution would be to avoid this compilation step and always install pre-compiled binaries.</p>
<p>This is not possible while installing from CRAN as CRAN only provides binaries for recent versions of R and for a limited number of platforms.</p>
<p>But Posit for example provides a larger collection of binaries, for different package versions, and different platforms, via their Public <a href="https://packagemanager.posit.co/">Posit Package Manager (PPM)</a>.</p>
<p>Making sure you install from PPM rather than CRAN can be a first simple step to make some of the issues discussed here vanish.</p>
</section>
<section id="extending-the-scope-of-reproducibility" class="level3">
<h3 class="anchored" data-anchor-id="extending-the-scope-of-reproducibility">Extending the scope of reproducibility</h3>
<p>Another solution could be to add more complex reproducibility solutions that go beyond the scope of renv.</p>
<section id="renv-with-rig" class="level4">
<h4 class="anchored" data-anchor-id="renv-with-rig">renv with rig</h4>
<p>The R version is specified in <code>renv.lock</code> and to avoid incompatibility of older package versions with newer versions of R, you could run the declared R version. This can be achieved with various means but a convenient solution is the <a href="https://github.com/r-lib/rig">rig</a> tool.</p>
<p>There are even some <a href="https://github.com/r-lib/rig/issues/131">discussions</a> to integrate rig and renv more tightly and let rig detect automatically which R version to use based on the <code>renv.lock</code> file.</p>
</section>
<section id="docker-nix-and-others" class="level4">
<h4 class="anchored" data-anchor-id="docker-nix-and-others">Docker, Nix and others</h4>
<p>Alternatively, you could use other reproducibility toolkits that focus not just on the R package versions, but on the entire software stack (e.g., including the operating system, the system dependencies). These solutions can be more complex to set up and use, and we won’t detail them in this blog post but you can find more information in:</p>
<ul>
<li><a href="https://rstudio.github.io/renv/articles/docker.html">The “Using renv with Docker” renv vignette</a></li>
<li><a href="https://doi.org/10.32614/RJ-2017-065">the “An Introduction to Rocker: Docker Containers for R” paper</a></li>
<li><a href="https://www.brodrigues.co/blog/2023-07-13-nix_for_r_part1/">Bruno Rodrigues’ entire series of blog posts on Nix</a></li>
</ul>
</section>
</section>
<section id="conclusion-a-final-note-for-developers" class="level3">
<h3 class="anchored" data-anchor-id="conclusion-a-final-note-for-developers">Conclusion: a final note for developers</h3>
<p>renv is an elegant solution that focuses on the most immediate source of non-reproducibility. This however means it needs to be complemented by other tools in more complex cases.</p>
<p>Ultimately, reproducibility is a team effort. People who write code can minimise the risk of renv complications by keeping the packages they use close to their CRAN version and regularly updating their code and <code>renv.lock</code> accordingly. Other programming languages have automated tooling to help with this, via, e.g., the <a href="https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/">dependabot tool</a> which submits pull requests to update dependencies. There is no well established equivalent for R yet, but anyone willing to set this mechanism up can look at the code used by the <a href="https://github.com/carpentries/actions/tree/70ff4b4e8d50fdcd0eb33e7c33a4a6f305a82702/update-lockfile">Carpentries workbench</a> for this task.</p>
<p><em>Thanks to Pratik Gupte and Chris Hartgerink for their valuable comments on earlier drafts of this post.</em></p>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gruson2024,
  author = {Gruson, Hugo},
  title = {Things That Can Go Wrong When Using Renv},
  date = {2024-01-31},
  url = {https://epiverse-trace.github.io/posts/renv-complications/},
  doi = {10.59350/hsy4m-6se90},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gruson2024" class="csl-entry quarto-appendix-citeas">
Gruson, Hugo. 2024. <span>“Things That Can Go Wrong When Using
Renv.”</span> January 31, 2024. <a href="https://doi.org/10.59350/hsy4m-6se90">https://doi.org/10.59350/hsy4m-6se90</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>reproducibility</category>
  <category>renv</category>
  <category>DOI</category>
  <guid>https://epiverse-trace.github.io/posts/renv-complications/</guid>
  <pubDate>Wed, 31 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Using benchmarking to guide the adoption of dependencies in R packages</title>
  <dc:creator>James Mba Azam</dc:creator>
  <link>https://epiverse-trace.github.io/posts/benchmarking_design_decisions/</link>
  <description><![CDATA[ 





<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(bench)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cli)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span></code></pre></div></div>
</div>
<p>R package developers often have to take on dependencies for various reasons. Dependencies are external packages that provide extra functionalities or features to another package <span class="citation" data-cites="wickham2023r">(Wickham and Bryan 2023)</span>. Quite often, the goal of taking on a dependency is to utilize its rich features and reduce duplicated coding effort. For example, the <code>ggplot2</code> package is often adopted, instead of R’s inbuilt plotting functions, to make visualizations using its declarative system and implementation of the Grammar of Graphics, and slick automation across the board.</p>
<p>Sometimes, introducing a dependency might slow down existing processes. Hence, it is important to consider the speed of a dependency’s functions before adopting it. Code optimisation is often reserved for heavy processes like data processing steps. However, here, we will focus on lesser optimised processes, and in particular, printing of texts in R.</p>
<p>For this demonstration, we will look at a situation where a package developer is considering options for condition signalling beyond the functionalities provided in base R. Condition signalling refers to the process of communicating to a user that an issue has arisen during code execution <span class="citation" data-cites="wickham2019advanced">(Wickham 2019)</span>.</p>
<p>Base R ships with functionalities for condition signalling. There is <code>base::stop()</code> for signalling errors. Errors refer to cases where something fatal happens during code execution so that it halts, for example, when a function is run without specifying the required arguments.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>()</span></code></pre></div></div>
<div class="cell-output cell-output-error">
<pre><code>Error in rnorm(): argument "n" is missing, with no default</code></pre>
</div>
</div>
<p>Base R provides <code>base::warning()</code> for throwing warnings. Warnings are used to handle less fatal issues with code execution that do not need to halt the process. For example, when you compare two vectors of different lengths, R will throw a warning but will still return a result.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in c(1:2) &gt; c(1:3): longer object length is not a multiple of shorter
object length</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE FALSE</code></pre>
</div>
</div>
<p>Lastly, there is <code>base::message()</code> for throwing messages. Messages are used to provide useful information about processes. For example, packages throw messages about NAMESPACE conflicts when loaded. This is to inform the user so they know what next steps to take.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'data.table'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:dplyr':

    between, first, last</code></pre>
</div>
</div>
<p>These base R functions are, however, not flexible enough for advanced formatting: colour, progress bar, contextual pluralisation, and so forth. The package developer might want to adopt external dependencies for these flexibilities. The <a href="https://cli.r-lib.org/articles/semantic-cli.html">cli</a> package is well designed for this. <code>cli</code> offers many of the advanced formatting features. Here is a quick example (adopted from the help file) using <code>cli::cli_abort()</code>, the equivalent of <code>base::stop()</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c(1, 2, 3)"</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(</span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb10-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.var n} must be a numeric vector"</span>,</span>
<span id="cb10-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You've supplied a {.cls {class(n)}} vector."</span></span>
<span id="cb10-6">    )</span>
<span id="cb10-7">)</span></code></pre></div></div>
<div class="cell-output cell-output-error">
<pre><code>Error:
! `n` must be a numeric vector
✖ You've supplied a &lt;character&gt; vector.</code></pre>
</div>
</div>
<p>In this example, we used inline text formatting to print <code>n</code> as a variable and interpolated code to print the class of <code>n</code> in the error message and all in just 6 lines of code.</p>
<p>If this is enough to excite your interests, check out <code>cli</code>’s <a href="https://cli.r-lib.org/">website</a> and help files, which provide in-depth guides on its myriad features.</p>
<p>Now, considering all these amazing features that <code>cli</code> offers, what should a package developer consider to adopt it? In this article, we will demonstrate how to use (micro)benchmarking<sup>1</sup> to guide the decision through the lense of speed. Benchmarking can be used to check whether adopting <code>cli</code> as a dependency would slow down existing printing processes in undesirable ways.</p>
<p>Here, we will benchmark <code>cli::cli_warn()</code> against base R’s <code>base::warning()</code> to see if the former has any speed issues. The results of this exercise will provide us with insights on whether its worth taking on <code>cli</code> for its features as a trade-off for slower printing speed.</p>
<section id="experiment" class="level2">
<h2 class="anchored" data-anchor-id="experiment">Experiment</h2>
<p>We will consider different scenarios of number of warnings thrown to tease out the relationship between speed of the function and number of warnings thrown in a function with and without <code>cli::cli_warn()</code>. We will also check how the benchmark scales with the number of warnings in the function.</p>
<p>Based on this description, we will need the following packages: <code>cli</code> for its warning function, and <a href="https://cran.r-project.org/web/packages/bench/index.html">bench</a> for measuring the run times, <a href="https://dplyr.tidyverse.org/">dplyr</a> for manipulating the results, and <a href="https://ggplot2.tidyverse.org/">ggplot2</a> for plotting.</p>
<p>Let’s define a function that takes an argument <code>n</code> for the number of warnings to throw and <code>pkg</code> for the type of package to use.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">warn_Ntimes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n, pkg) {</span>
<span id="cb12-2">  warning_msg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be an integer"</span></span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span>(pkg,</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n)) {</span>
<span id="cb12-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(warning_msg)</span>
<span id="cb12-6">    },</span>
<span id="cb12-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cli =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n)) {</span>
<span id="cb12-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_warn</span>(warning_msg)</span>
<span id="cb12-9">    }</span>
<span id="cb12-10">  )</span>
<span id="cb12-11">}</span></code></pre></div></div>
</div>
<p>Let’s test our function to see if it works as expected.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warn_Ntimes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in warn_Ntimes(3, "base"): x must be an integer

Warning in warn_Ntimes(3, "base"): x must be an integer

Warning in warn_Ntimes(3, "base"): x must be an integer</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warn_Ntimes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cli"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: x must be an integer</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: x must be an integer
x must be an integer</code></pre>
</div>
</div>
<p>Now, we’ll consider scenarios where a function throws 1, 5, 10, 15, 20, and 100 warnings using base R and <code>cli</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of warnings to throw</span></span>
<span id="cb18-2">warnings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div></div>
</div>
<p>Let’s run benchmarks over the different scenarios and store results in a data.frame.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">bnmark_res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">press</span>(</span>
<span id="cb19-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warnings =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>),</span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb19-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cli =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warn_Ntimes</span>(warnings, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cli"</span>),</span>
<span id="cb19-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warn_Ntimes</span>(warnings, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span>)</span>
<span id="cb19-6">    )</span>
<span id="cb19-7">  )</span></code></pre></div></div>
</div>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>It’s time to explore the results of the data generated. Let’s first make a boxplot of the run times for the different scenarios.</p>
<p>Drum roll please…</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>(</span>
<span id="cb20-2">  bnmark_res,</span>
<span id="cb20-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boxplot"</span></span>
<span id="cb20-4">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb20-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>,</span>
<span id="cb20-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Functions throwing various numbers of warnings as indicated in the facet label"</span></span>
<span id="cb20-8">  )</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required namespace: tidyr</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://epiverse-trace.github.io/posts/benchmarking_design_decisions/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Now, let’s see how the benchmarks scale with the number of warnings thrown.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">bnmark_res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pkg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(bnmark_res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>expression, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>)</span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(bnmark_res) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(</span>
<span id="cb22-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb22-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> warnings,</span>
<span id="cb22-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> median,</span>
<span id="cb22-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> pkg</span>
<span id="cb22-9">    ),</span>
<span id="cb22-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb22-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb22-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of warnigns"</span>,</span>
<span id="cb22-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Median execution time"</span>,</span>
<span id="cb22-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span></span>
<span id="cb22-16">  )</span></code></pre></div></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://epiverse-trace.github.io/posts/benchmarking_design_decisions/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As we can see, <code>cli</code> is consistently slower than base R for the same number of warnings thrown. The median times also follow a similar non-linear trajectory. Benchmarking experiments with other <code>cli</code> functions have revealed similar non-linear relationships between its speed and the number of times it invokes those functions <sup>2</sup>. However, those exercises were not compared with equivalent functions in base R. The relative comparison here is useful for decision-making.</p>
<p>The developers of <code>cli</code> have also conducted benchmarks of the <code>ansi_*()</code> family of functions in <code>cli</code> in comparison to base R and the <code>fansi</code> package. They find that <code>cli</code> is consistently slower than base R, which corroborates the results of our experiment here. These benchmarks are available in the <code>cli</code> documentation <sup>3</sup>.</p>
<p>So, should we be worried about the speed of <code>cli</code>? Well, it depends on the context. The “R Packages” book by Hadley Wickham and Jenny Bryan suggests approaching such a decision from a holistic, balanced, and quantitative approach<span class="citation" data-cites="wickham2023r">(Wickham and Bryan 2023)</span>. We’ll leave the reader to make their own decision based on their use case.</p>
<p>Most developers might argue that this is an optimisation overkill<sup>4</sup>. However, it is important to consider speed differences in context. In the case of simple printing, the speed difference is negligible yet disruptive and somewhat painful. However, in the grand scheme of things, this might be nothing compared with much slower processes that need more attention. In those cases, the developer might want to consider other optimisation strategies such as profiling <sup>5</sup>. The essence of this experiment is to demonstrate the utility of benchmarking in making quick design decisions.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In designing R package infrastructure with dependencies, it might sometimes be necessary to check if they don’t slow down existing processes. Here, we have demonstrated how benchmarking is one way to achieve this for a process involving condition signalling. We show how a simple decision to use <code>cli::cli_warn()</code> to handle warnings could come at the cost of a tiny loss in speed, which is worth considering in its context.</p>
<p>The demonstration here can be extended to other dependency adoption decisions for input checking, loops, object manipulations, and so forth. We recommend benchmarking as a way to help developers make quick design decisions. However, we also recommend that developers consider the context of the optimisation in interpreting the results.</p>
<p><em>I would like to thank <a href="https://github.com/pratikunterwegs">Pratik Gupte</a>, <a href="https://github.com/joshwlambert">Joshua Lambert</a>, and <a href="https://github.com/Bisaloo">Hugo Gruson</a> for their invaluable reviews and suggestions that helped improve this post.</em></p>
</section>
<section id="other-r-packages-for-benchmarking" class="level2">
<h2 class="anchored" data-anchor-id="other-r-packages-for-benchmarking">Other R packages for benchmarking</h2>
<ul>
<li><a href="https://github.com/joshuaulrich/microbenchmark">microbenchmark</a>: an R package for comparing the execution time of R expressions.</li>
<li><a href="https://code.google.com/archive/p/rbenchmark/">rbenchmark</a>: an R package for benchmarking R code.</li>
<li><a href="https://github.com/collectivemedia/tictoc">tictok</a>: an R package to time R functions</li>
<li><a href="https://github.com/lorenzwalthert/touchstone/tree/main">touchstone</a>: an R package for benchmarking of pull requests with statistical confidence.</li>
</ul>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-wickham2019advanced" class="csl-entry">
Wickham, Hadley. 2019. <em>Advanced r</em>. CRC press.
</div>
<div id="ref-wickham2023r" class="csl-entry">
Wickham, Hadley, and Jennifer Bryan. 2023. <em>R Packages</em>. " O’Reilly Media, Inc.".
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Benchmark (Wikipedia): <a href="https://en.wikipedia.org/wiki/Benchmark_(computing)" class="uri">https://en.wikipedia.org/wiki/Benchmark_(computing)</a>↩︎</p></li>
<li id="fn2"><p>Formating errors can be slow/variable: <a href="https://github.com/r-lib/cli/issues/617" class="uri">https://github.com/r-lib/cli/issues/617</a>↩︎</p></li>
<li id="fn3"><p>cli benchmarks: <a href="https://cli.r-lib.org/articles/ansi-benchmark.html" class="uri">https://cli.r-lib.org/articles/ansi-benchmark.html</a>↩︎</p></li>
<li id="fn4"><p>Donald Knuth’s quoted as having said, “The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.” (See <a href="https://en.wikiquote.org/wiki/Donald_Knuth" class="uri">https://en.wikiquote.org/wiki/Donald_Knuth</a>)↩︎</p></li>
<li id="fn5"><p>Profiling (Wikipedia): <a href="https://csgillespie.github.io/efficientR/performance.html" class="uri">https://csgillespie.github.io/efficientR/performance.html</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{mba_azam2023,
  author = {Mba Azam, James},
  title = {Using Benchmarking to Guide the Adoption of Dependencies in
    {R} Packages},
  date = {2023-11-22},
  url = {https://epiverse-trace.github.io/posts/benchmarking_design_decisions/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-mba_azam2023" class="csl-entry quarto-appendix-citeas">
Mba Azam, James. 2023. <span>“Using Benchmarking to Guide the Adoption
of Dependencies in R Packages.”</span> November 22, 2023. <a href="https://epiverse-trace.github.io/posts/benchmarking_design_decisions/">https://epiverse-trace.github.io/posts/benchmarking_design_decisions/</a>.
</div></div></section></div> ]]></description>
  <category>benchmarking</category>
  <category>R</category>
  <category>cli</category>
  <category>R package</category>
  <category>software architecture</category>
  <guid>https://epiverse-trace.github.io/posts/benchmarking_design_decisions/</guid>
  <pubDate>Wed, 22 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Lesser-known reasons to prefer apply() over for loops</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/for-vs-apply/</link>
  <description><![CDATA[ 





<p>The debate regarding the use of <code>for</code> loops versus the <code>apply()</code> function family (<code>apply()</code>, <code>lapply()</code>, <code>vapply()</code>, etc., along with their purrr counterparts: <code>map()</code>, <code>map2()</code>, <code>map_lgl()</code>, <code>map_chr()</code>, etc.), has been a longstanding one in the R community.</p>
<p>While you may occasionally hear that <code>for</code> loops are slower, this notion has already been debunked <a href="https://privefl.github.io/blog/why-loops-are-slow-in-r/">in other posts</a>. When utilized correctly, a <code>for</code> loop can achieve performance on par with <code>apply()</code> functions.</p>
<p>However, there are still lesser-known reasons to prefer <code>apply()</code> functions over <code>for</code> loops, which we will explore in this post.</p>
<section id="preamble-for-loops-can-be-used-in-more-cases-than-apply" class="level2">
<h2 class="anchored" data-anchor-id="preamble-for-loops-can-be-used-in-more-cases-than-apply">Preamble: <code>for</code> loops can be used in more cases than <code>apply()</code></h2>
<p>It is important to understand that <code>for</code> loops and <code>apply()</code> functions are not always interchangeable. Indeed, <code>for</code> loops can be used in cases where <code>apply</code> functions can’t: when the next step depends on the previous one. This concept is known as <a href="https://en.wikipedia.org/wiki/Recursion"><em>recursion</em></a>.</p>
<p>Conversely, when each step is independent of the previous one, but you want to perform the same operation on each element of a vector, it is referred to as <a href="https://en.wikipedia.org/wiki/Iteration"><em>iteration</em></a>.</p>
<p><code>for</code> loops are capable of both <em>recursion</em> and <em>iteration</em>, whereas <code>apply()</code> can only do <em>iteration</em>.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Operator</th>
<th>Iteration</th>
<th>Recursion</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>for</code></td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr class="even">
<td><code>apply()</code></td>
<td>✔️</td>
<td>❌</td>
</tr>
</tbody>
</table>
<p>With this distinction in mind, we can now focus on why you should favour <code>apply()</code> for iteration over <code>for</code> loops.</p>
</section>
<section id="reason-1-clarity-of-intent" class="level2">
<h2 class="anchored" data-anchor-id="reason-1-clarity-of-intent">Reason 1: clarity of intent</h2>
<p>As mentioned earlier, <code>for</code> loops can be used for both iteration and recursion. By consistently employing <code>apply()</code> for iteration<sup>1</sup> and reserving <code>for</code> loops for recursion, we enable readers to immediately discern the underlying concept in the code. This leads to code that is easier to read and understand.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `for` solution -------------------</span></span>
<span id="cb1-4">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(l))</span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(l)) {</span>
<span id="cb1-6">  res[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(l[[i]])</span>
<span id="cb1-7">}</span>
<span id="cb1-8">res</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.0 4.0 6.0 4.8</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `vapply()` solution ---------------</span></span>
<span id="cb3-2">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(l, mean, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-3">res</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.0 4.0 6.0 4.8</code></pre>
</div>
</div>
<p>The simplicity of <code>apply()</code> is even more apparent in the case of multiple iterations. For example, if we want to find the median of each matrix row for a list of matrices:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `for` solution -------------------</span></span>
<span id="cb5-4">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(l)) {</span>
<span id="cb5-6">  meds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(l[[i]]))</span>
<span id="cb5-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(l[[i]]))) {</span>
<span id="cb5-8">    meds[[j]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(l[[i]][j, ])</span>
<span id="cb5-9">  }</span>
<span id="cb5-10">  res[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> meds</span>
<span id="cb5-11">}</span>
<span id="cb5-12">res</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 0.7807203 0.2448108 0.7407391

[[2]]
[1] 0.3249898 0.1742138 0.3917644

[[3]]
[1] 0.2876697 0.8835354 0.5606563

[[4]]
[1] 0.08360038 0.37515714 0.43738127

[[5]]
[1] 0.4834298 0.6106350 0.6328951</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `vapply()` solution ---------------</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(l, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e) {</span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(e, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, median)</span>
<span id="cb7-4">})</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 0.7807203 0.2448108 0.7407391

[[2]]
[1] 0.3249898 0.1742138 0.3917644

[[3]]
[1] 0.2876697 0.8835354 0.5606563

[[4]]
[1] 0.08360038 0.37515714 0.43738127

[[5]]
[1] 0.4834298 0.6106350 0.6328951</code></pre>
</div>
</div>
<p>Moreover, this clarity of intent is not limited to human readers alone; automated static analysis tools can also more effectively identify suboptimal patterns. This can be demonstrated using R most popular static analysis tool: the lintr package, suggesting vectorized alternatives:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">lintr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lint</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vapply(l, length, numeric(1))"</span>)</span>
<span id="cb9-2"></span>
<span id="cb9-3">lintr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lint</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apply(m, 1, sum)"</span>)</span></code></pre></div></div>
</div>
</section>
<section id="reason-2-code-compactness-and-conciseness" class="level2">
<h2 class="anchored" data-anchor-id="reason-2-code-compactness-and-conciseness">Reason 2: code compactness and conciseness</h2>
<p>As illustrated in the preceding example, <code>apply()</code> often leads to more compact code, as much of the boilerplate code is handled behind the scenes: you don’t have to initialize your variables, manage indexing, etc.</p>
<p>This, in turn, impacts code readability since:</p>
<ul>
<li>The boilerplate code does not offer meaningful insights into the algorithm or implementation and can be seen as visual noise.</li>
<li>While compactness should never take precedence over readability, a more compact solution allows for more code to be displayed on the screen without scrolling. This ultimately makes it easier to understand what the code is doing. With all things otherwise equal, the more compact solution should thus be preferred.</li>
</ul>
</section>
<section id="reason-3-variable-leak" class="level2">
<h2 class="anchored" data-anchor-id="reason-3-variable-leak">Reason 3: variable leak</h2>
<p>As discussed in the previous sections, you have to manually manage the iteration index in a <code>for</code> loop, whereas they are abstracted in <code>apply()</code>. This can sometimes lead to perplexing errors:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Paul"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pierre"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jacques"</span>)) {</span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello "</span>, k)</span>
<span id="cb10-5">}</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Hello Paul</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Hello Pierre</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Hello Jacques</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(letters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> k)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: NAs introduced by coercion</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in rep(letters, times = k): invalid 'times' argument</code></pre>
</div>
</div>
<p>This is because the loop index variable leaks into the global environment and can overwrite existing variables:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb17-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do something</span></span>
<span id="cb17-3">}</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The value of k is now "</span>, k)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>The value of k is now 3</code></pre>
</div>
</div>
</section>
<section id="reason-4-pipelines" class="level2">
<h2 class="anchored" data-anchor-id="reason-4-pipelines">Reason 4: pipelines</h2>
<p>The final reason is that <code>apply()</code> (or more commonly in this situation <code>purrr::map()</code>) can be used in pipelines due to their functional nature:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without pipe</span></span>
<span id="cb19-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(l, mean, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.0 4.0 6.0 4.8</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With pipe</span></span>
<span id="cb21-2">l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(mean, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.0 4.0 6.0 4.8</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(mean)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.0 4.0 6.0 4.8</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post hopefully convinced you why it’s better to use <code>apply()</code> functions rather than <code>for</code> loops where possible (i.e., for iteration). Contrary to common misconception, the real reason is not performance, but code robustness and readability.</p>
<p><em>Thanks to Jaime Pavlich-Mariscal, James Azam, Tim Taylor, and Pratik Gupte for their thoughtful comments and suggestions on earlier drafts of this post.</em></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Beyond R">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Beyond R
</div>
</div>
<div class="callout-body-container callout-body">
<p>This post focused on R, but the same principles generally apply to other functional languages. In Python for example, you would use <a href="https://www.w3schools.com/python/python_lists_comprehension.asp">list comprehensions</a> or the <a href="https://www.w3schools.com/python/ref_func_map.asp"><code>map()</code> function</a>.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Further reading">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Further reading
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you liked the code patterns recommended in this post and want to use functional programming in more situations, including recursion, I recommend you check out the <a href="https://adv-r.hadley.nz/functionals.html#functionals">“Functionals” chapter of the <em>Advanced R</em> book by Hadley Wickham</a></p>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>There are a handful of rare corner cases where <code>apply()</code> is not the best method for iteration. These are cases that make use of <code>match.call()</code> or <code>sys.call()</code>. More details are available in <code>lapply()</code> documentation and in <a href="https://github.com/epiverse-trace/epiverse-trace.github.io/pull/125#issuecomment-1775929451">this GitHub comment by Tim Taylor during the review of this post</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gruson2023,
  author = {Gruson, Hugo},
  title = {Lesser-Known Reasons to Prefer `Apply()` over for Loops},
  date = {2023-11-02},
  url = {https://epiverse-trace.github.io/posts/for-vs-apply/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gruson2023" class="csl-entry quarto-appendix-citeas">
Gruson, Hugo. 2023. <span>“Lesser-Known Reasons to Prefer `Apply()` over
for Loops.”</span> November 2, 2023. <a href="https://epiverse-trace.github.io/posts/for-vs-apply/">https://epiverse-trace.github.io/posts/for-vs-apply/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>functional programming</category>
  <category>iteration</category>
  <category>readability</category>
  <category>good practices</category>
  <category>tidyverse</category>
  <guid>https://epiverse-trace.github.io/posts/for-vs-apply/</guid>
  <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>System Dependencies in R Packages &amp; Automatic Testing</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/system-dependencies/</link>
  <description><![CDATA[ 





<p><em>This post has been <a href="https://blog.r-hub.io/2023/09/26/system-dependency/">cross-posted on the R-hub blog</a>, and the R-hub blog maintainers have contributed to the review and improvement of this post.</em></p>
<p>In a <a href="https://blog.r-hub.io/2022/09/12/r-dependency/">previous R-hub blog post</a>, we discussed a package dependency that goes slightly beyond the normal R package ecosystem dependency: R itself. Today, we step even further and discuss dependencies outside of R: system dependencies. This happens when packages rely on external software, such as how <a href="https://github.com/search?q=org%3Acran+cuda+path%3ADESCRIPTION&amp;type=code">R packages integrating CUDA GPU computation in R</a> require the <a href="https://en.wikipedia.org/wiki/CUDA">CUDA library</a>. In particular, we are going to talk about system dependencies in the context of automated testing: is there anything extra to do when setting continuous integration for your package with system dependencies? In particular, we will focus with the integration with <a href="https://beamilz.com/posts/series-gha/2022-series-gha-1-what-is/en/">GitHub Actions</a>. How does it work behind the scenes? And how to work with edge cases?</p>
<section id="introduction-specifying-system-dependencies-in-r-packages" class="level2">
<h2 class="anchored" data-anchor-id="introduction-specifying-system-dependencies-in-r-packages">Introduction: specifying system dependencies in R packages</h2>
<p>Before jumping right into the topic of continuous integration, let’s take a moment to introduce, or remind you, how system dependencies are specified in R packages.</p>
<p>The official ‘Writing R Extensions’ guide states <sup>1</sup>:</p>
<blockquote class="blockquote">
<p>Dependencies external to the R system should be listed in the ‘SystemRequirements’ field, possibly amplified in a separate README file.</p>
</blockquote>
<p>This was initially purely designed for humans. No system within R itself makes use of it. One important thing to note is that this field contains free text :scream:. As such, to refer to the same piece of software, you could write either one of the following in the package <code>DESCRIPTION</code>:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SystemRequirements</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ExternalSoftware</span></span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SystemRequirements</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ExternalSoftware 0.1</span></span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SystemRequirements</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> lib-externalsoftware</span></span></code></pre></div></div>
<p>However, it is probably good practice check what other R packages with similar system dependencies are writing in <code>SystemRequirements</code>, to facilitate the automated identification process we describe below.</p>
</section>
<section id="the-general-case-everything-works-automagically" class="level2">
<h2 class="anchored" data-anchor-id="the-general-case-everything-works-automagically">The general case: everything works automagically</h2>
<p>If while reading the previous section, you could already sense the problems linked to the fact <code>SystemRequirements</code> is a free-text field, fret not! In the very large majority of cases, setting up continuous integration in an R package with system dependencies is exactly the same as with any other R package.</p>
<p>Using, as often, the supercharged usethis package, you can automatically create the relevant GitHub Actions workflow file in your project <sup>2</sup>:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_github_action</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"check-standard"</span>)</span></code></pre></div></div>
</div>
<p>The result is:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Workflow derived from https://github.com/r-lib/actions/tree/v2/examples</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> master</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_request</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> master</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> R-CMD-check</span></span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R-CMD-check</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ matrix.config.os }}</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ matrix.config.os }} (${{ matrix.config.r }})</span></span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strategy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fail-fast</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb5-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">config</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">os</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> macos-latest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'release'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb5-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">os</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> windows-latest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'release'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb5-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">os</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'devel'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">http-user-agent</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'release'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb5-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">os</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'release'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb5-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">os</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'oldrel-1'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb5-26"></span>
<span id="cb5-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GITHUB_PAT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.GITHUB_TOKEN }}</span></span>
<span id="cb5-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R_KEEP_PKG_SOURCE</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">yes</span></span>
<span id="cb5-30"></span>
<span id="cb5-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb5-33"></span>
<span id="cb5-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> r-lib/actions/setup-pandoc@v2</span></span>
<span id="cb5-35"></span>
<span id="cb5-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> r-lib/actions/setup-r@v2</span></span>
<span id="cb5-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r-version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ matrix.config.r }}</span></span>
<span id="cb5-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">http-user-agent</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ matrix.config.http-user-agent }}</span></span>
<span id="cb5-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use-public-rspm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb5-41"></span>
<span id="cb5-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> r-lib/actions/setup-r-dependencies@v2</span></span>
<span id="cb5-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extra-packages</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> any::rcmdcheck</span></span>
<span id="cb5-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> check</span></span>
<span id="cb5-46"></span>
<span id="cb5-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> r-lib/actions/check-r-package@v2</span></span>
<span id="cb5-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">upload-snapshots</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div></div>
<p>You may notice there is no explicit mention of system dependencies in this file. Yet, if we use this workflow in an R package with system dependencies, everything will work out-of-the-box in most cases. So, when are system dependencies installed? And how the workflow does even know which dependencies to install since the <code>SystemRequirements</code> is free text that may not correspond to the exact name of a library?</p>
<p>The magic happens in the <code>r-lib/actions/setup-r-dependencies</code> step. If you want to learn about it, you can read the <a href="https://github.com/r-lib/actions/blob/756399d909bf9c180bbdafe8025f794f51f2da02/setup-r-dependencies/action.yaml">source code of this step</a>. It is mostly written in R but it contains a lot of bells and whistles to handle messaging within the GitHub Actions context and as such, it would be too long to go through it line by line in this post. However, at a glance, you can notice many mentions of the <a href="https://pak.r-lib.org/">pak R package</a>.</p>
<p>If it’s the first time you’re hearing about the pak package, we strongly recommend we go through the <a href="https://pak.r-lib.org/reference/features.html">list of the most important pak features</a>. It is <del>paked</del> packed with many very powerful features. The specific feature we’re interested in here is the automatic install of system dependencies via <a href="https://pak.r-lib.org/reference/local_system_requirements.html"><code>pak::pkg_sysreqs()</code></a>, which in turn uses <code>pkgdepends::sysreqs_install_plan()</code>.</p>
<p>We now understand more precisely where the magic happens but it still doesn’t explain how pak is able to know which precise piece of software to install from the free text <code>SystemRequirements</code> field. As often when you want to increase your understanding, it is helpful to <a href="https://blog.r-hub.io/2019/05/14/read-the-source/">read the source</a>. While browsing pkgdepends source code, we see a call to <a href="https://github.com/r-hub/r-system-requirements" class="uri">https://github.com/r-hub/r-system-requirements</a>.</p>
<p>This repository contains a set of <a href="https://github.com/rstudio/r-system-requirements/tree/main/rules">rules</a> as json files which match unformatted software name via regular expressions to the exact libraries for each major operating system. Let’s walk through an example together:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"patterns"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">bnvcc</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">bcuda</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dependencies"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"packages"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nvidia-cuda-dev"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"constraints"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-8">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"os"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-9">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"distribution"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ubuntu"</span></span>
<span id="cb6-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-11">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-13">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p>The regular expression tells that each time a package lists something as <code>SystemRequirements</code> with the word “nvcc” or “cuda”, the corresponding Ubuntu library to install is <code>nvidia-cuda-dev</code>.</p>
<p>This interaction between <code>r-system-requirements</code> and pak is also documented in pak’s dev version, with extra information about how the <code>SystemRequirements</code> field is extracted in different situations: <a href="https://pak.r-lib.org/dev/reference/sysreqs.html#how-it-works" class="uri">https://pak.r-lib.org/dev/reference/sysreqs.html#how-it-works</a></p>
</section>
<section id="when-its-not-working-out-of-the-box" class="level2">
<h2 class="anchored" data-anchor-id="when-its-not-working-out-of-the-box">When it’s not working out-of-the-box</h2>
<p>We are now realizing that this automagical setup we didn’t pay so much attention to until now actually requires a very heavy machinery under the hood. And it happens, very rarely, that this complex machinery is not able to handle your specific use case. But it doesn’t mean that you cannot use continuous integration in your package. It means that some extra steps might be required to do so. Let’s review these possible solutions together in order of complexity.</p>
<section id="fix-it-for-everybody-by-submitting-a-pull-request" class="level3">
<h3 class="anchored" data-anchor-id="fix-it-for-everybody-by-submitting-a-pull-request">Fix it for everybody by submitting a pull request</h3>
<p>One first option might be that the regular expression used by <code>r-system-requirements</code> to convert the free text in <code>SystemRequirements</code> to a library distributed by your operating system does not recognize what is in <code>SystemRequirements</code>.</p>
<p>To identify if this is the case, you need to find the file containing the specific rule for the system dependency of interest in <code>r-system-requirements</code>, and test the regular expression on the contents of <code>SystemRequirements</code>.</p>
<p>If we re-use the cuda example from the previous section and we are wondering why it is not automatically installed for a package specifying “cudaa”:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_match</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cudaa"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">bnvcc</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">bcuda</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span>))</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,] NA  
[2,] NA  </code></pre>
</div>
</div>
<p>This test confirms that the <code>SystemRequirements</code> field contents are not recognized by the regular expression. Depending on the case, the best course of action might be to:</p>
<ul>
<li>either edit the contents of <code>SystemRequirements</code> so that it’s picked up by the regular expression</li>
<li>or submit a pull request to <a href="https://github.com/rstudio/r-system-requirements"><code>rstudio/r-system-requirements</code></a> <sup>3</sup> if you believe the regular expression is too restrictive and should be updated (<a href="https://github.com/rstudio/r-system-requirements/pull/93">example</a>)</li>
</ul>
<p>Note however that the first option is likely always the simplest as it doesn’t impact all the rest of the ecosystem (which is why <code>r-system-requirements</code> maintainers might be reluctant to relax a regular expression) and it is often something directly in your control, rather than a third-party who might not immediately be available to review your PR.</p>
</section>
<section id="install-system-dependencies-manually" class="level3">
<h3 class="anchored" data-anchor-id="install-system-dependencies-manually">Install system dependencies “manually”</h3>
<p>However, you might be in a case where you cannot rely on the automated approach. For example, maybe the system dependency to install is not provided by package managers at all. Typically, if you had to compile or install it manually on your local computer, you’re very likely to have to do the same operation in GitHub Actions. There two different, but somewhat equivalent, ways to do so, as detailed below.</p>
<section id="directly-in-the-github-actions-workflow" class="level4">
<h4 class="anchored" data-anchor-id="directly-in-the-github-actions-workflow">Directly in the GitHub Actions workflow</h4>
<p>You can insert the installation steps you used locally in the GitHub Actions workflow file. So, instead of having the usual structure, you have an extra step “Install extra system dependencies manually” that may look something like this:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode diff code-with-copy"><code class="sourceCode diff"><span id="cb9-1">jobs:</span>
<span id="cb9-2">  R-CMD-check:</span>
<span id="cb9-3">    runs-on: ubuntu-latest</span>
<span id="cb9-4">    env:</span>
<span id="cb9-5">      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}</span>
<span id="cb9-6">      R_KEEP_PKG_SOURCE: yes</span>
<span id="cb9-7">    steps:</span>
<span id="cb9-8">      - uses: actions/checkout@v3</span>
<span id="cb9-9"></span>
<span id="cb9-10">      - uses: r-lib/actions/setup-r@v2</span>
<span id="cb9-11">        with:</span>
<span id="cb9-12">          use-public-rspm: true</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+      - name: Install extra system dependencies manually</span></span>
<span id="cb9-15"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+        run:</span></span>
<span id="cb9-16"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+          wget ...</span></span>
<span id="cb9-17"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+          make</span></span>
<span id="cb9-18"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+          sudo make install</span></span>
<span id="cb9-19"></span>
<span id="cb9-20">      - uses: r-lib/actions/setup-r-dependencies@v2</span>
<span id="cb9-21">        with:</span>
<span id="cb9-22">          extra-packages: any::rcmdcheck</span>
<span id="cb9-23">          needs: check</span>
<span id="cb9-24"></span>
<span id="cb9-25">      - uses: r-lib/actions/check-r-package@v2</span></code></pre></div></div>
<p>You can see <a href="https://github.com/sbfnk/rbi/blob/9b05a24ce42f7b1b53481370f3bde3dcd86bca02/.github/workflows/R-CMD-check.yaml">a real-life example in the rbi R package</a>.</p>
</section>
<section id="using-a-docker-image-in-github-actions" class="level4">
<h4 class="anchored" data-anchor-id="using-a-docker-image-in-github-actions">Using a Docker image in GitHub Actions</h4>
<p>Alternatively, you can do the manual installation in a Docker image and use this image in your GitHub Actions workflow. This is a particularly good solution if there is already a public Docker image or you already wrote a <code>DOCKERFILE</code> for your own local development purposes. If you use a public image, you can follow <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-running-a-job-within-a-container">the steps in the official documentation</a> to integrate it to your GitHub Actions job. If you use a <code>DOCKERFILE</code>, you can follow <a href="https://stackoverflow.com/q/61154750/4439357">the answers to this stackoverflow question</a> (in a nutshell, use <code>docker compose</code> in your job or publish the image first and then follow the official documentation).</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode diff code-with-copy"><code class="sourceCode diff"><span id="cb10-1">jobs:</span>
<span id="cb10-2">  R-CMD-check:</span>
<span id="cb10-3">    runs-on: ubuntu-latest</span>
<span id="cb10-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    container: ghcr.io/org/repo:main</span></span>
<span id="cb10-5">    env:</span>
<span id="cb10-6">      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}</span>
<span id="cb10-7">      R_KEEP_PKG_SOURCE: yes</span>
<span id="cb10-8">    steps:</span>
<span id="cb10-9">      - uses: actions/checkout@v3</span>
<span id="cb10-10"></span>
<span id="cb10-11">      - uses: r-lib/actions/setup-r@v2</span>
<span id="cb10-12">        with:</span>
<span id="cb10-13">          use-public-rspm: true</span>
<span id="cb10-14"></span>
<span id="cb10-15">      - uses: r-lib/actions/setup-r-dependencies@v2</span>
<span id="cb10-16">        with:</span>
<span id="cb10-17">          extra-packages: any::rcmdcheck</span>
<span id="cb10-18">          needs: check</span>
<span id="cb10-19"></span>
<span id="cb10-20">      - uses: r-lib/actions/check-r-package@v2</span></code></pre></div></div>
<p>You can again see <a href="https://github.com/sbfnk/rbi/pull/46/files">a real-life example in the rbi R package</a>.</p>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this post, we have provided an overview of how to specify system requirements for R package, how this seemingly innocent task requires a very complex infrastructure so that it can be understood by automated tools and that your dependencies are smoothly installed in a single command. We also gave some pointers on what to do if you’re in one of the rare cases where the automated tools don’t or can’t work.</p>
<p>One final note on this topic is that there might be a move from CRAN to start requiring more standardization in the <code>SystemRequirements</code> field. One R package developer has reported being asked to change “Java JRE 8 or higher” to “Java (&gt;= 8)”.</p>
<p><em>Many thanks to <a href="https://masalmon.eu/">Maëlle Salmon</a> &amp; <a href="https://github.com/gaborcsardi">Gábor Csárdi</a> for their insights into this topic and their valuable feedback on this post.</em></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For R history fans, this has been the case <a href="https://github.com/r-devel/r-svn/blob/9c46956fd784c6985867aca069b926d774602928/doc/NEWS.1#L2348-L2350">since R 1.7.0</a>, released in April 2003.↩︎</p></li>
<li id="fn2"><p>Alternatively, if you’re not using usethis, you can manually copy-paste the relevant GitHub Actions workflow file from the <a href="https://github.com/r-lib/actions/tree/HEAD/examples"><code>examples</code> of the <code>r-lib/actions</code> project</a>.↩︎</p></li>
<li id="fn3"><p>If you are wondering why we are saying to submit PR to <code>rstudio/r-system-requirements</code> when we were previously talking about <code>r-hub/r-system-requirements</code>, you can check out <a href="https://github.com/r-hub/blog/pull/165#discussion_r1280644182">this comment thread</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gruson2023,
  author = {Gruson, Hugo},
  title = {System {Dependencies} in {R} {Packages} \&amp; {Automatic}
    {Testing}},
  date = {2023-09-26},
  url = {https://epiverse-trace.github.io/posts/system-dependencies/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gruson2023" class="csl-entry quarto-appendix-citeas">
Gruson, Hugo. 2023. <span>“System Dependencies in R Packages &amp;
Automatic Testing.”</span> September 26, 2023. <a href="https://epiverse-trace.github.io/posts/system-dependencies/">https://epiverse-trace.github.io/posts/system-dependencies/</a>.
</div></div></section></div> ]]></description>
  <category>package development</category>
  <category>R</category>
  <category>R package</category>
  <category>continuous integration</category>
  <category>system dependencies</category>
  <guid>https://epiverse-trace.github.io/posts/system-dependencies/</guid>
  <pubDate>Tue, 26 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Communicating development stages of open-source software</title>
  <dc:creator>Joshua W. Lambert</dc:creator>
  <link>https://epiverse-trace.github.io/posts/comm-software-devel/</link>
  <description><![CDATA[ 





<p>Software is not immediately stable when being developed. It undergoes design changes, changes to the user interface (application programming interface, API), and features get added or removed over time. Software in a open-source setting, in which the code is publicly hosted in a repository (e.g., Github, GitLab, Bitbucket), allows anyone to track developments. It also allows the developer community to easily contribute to the software.</p>
<p>There are certain metrics which can be used to convey the stage of development to users or other developers. For example the number of commits, a repository with few commits may indicate that a project is still in an incipient phase and will undergo several breaking changes. However, different software projects become stable at different rates and the number of commits may mean very different things for a repository containing an operating system compared to an R package with minimal functionality. It is therefore important that developers communicate with users and other developers at what stage the project is in, and how stable the code base is.</p>
<p>Software development, and specifically R package development, has several methods to communicate stability. This blog post will discuss two such methods and give examples for each. The first of these is versioning code, which establishes points in development where the code is ready for use; and the second is lifecycle badges, these can be placed at a different levels within software (e.g., package, function, function argument) to convey how a user should interact and use.</p>
<section id="versioning" class="level2">
<h2 class="anchored" data-anchor-id="versioning">Versioning</h2>
<p>Versioning code is not a new concept and has been used for decades<sup>1</sup>. It has led to version control systems such as <a href="https://git-scm.com/">git</a>. However, in this post we are interested in versioning to communicate development.</p>
<section id="semantic-versioning" class="level3">
<h3 class="anchored" data-anchor-id="semantic-versioning">Semantic versioning</h3>
<p>One such philosophy is <a href="https://semver.org/">semantic versioning</a> (SemVer). This aims to describe the stage of software development by attaching semantics (i.e.&nbsp;meaning) to the format and numbering of versions. The version system works through three numbers, each separated by a dot. The numbers, from left to right, convey major version, minor version and patch version. As an example, 0.5.2, is newer than 0.3.9.</p>
<p>Employing semantic versioning in ones code development allows others to determine whether a package has undergone substantial development and testing, and informs to whether it would make a suitable package to use in a script or as a dependency for another package. Semantic versioning also describes the changes made to a package. As explained on <a href="https://semver.org/">their website</a>, incrementing the major version implies a breaking change, a minor increment is a backwards compatible change and lastly patches are mostly applied to bug fixes. This aids users in understanding whether they should continue using a package, whether their package needs updating due to a breaking change or whether they need to install the newest version because a bug was recently fixed.</p>
<p>Examples of changes that correspond to major, minor or patch updates can be seen in the version release notes (NEWS.md file) of <a href="https://github.com/tidyverse/dplyr/blob/main/NEWS.md">{dplyr}</a> and <a href="https://github.com/tidyverse/ggplot2/blob/main/NEWS.md">{ggplot2}</a>.</p>
<p>In R there are several packages that work with versioning, and specifically semantic versioning. The <a href="https://CRAN.R-project.org/package=semver">{semver}</a> package provides functions for parsing, rendering and comparing versions. There is also the <a href="https://CRAN.R-project.org/package=semverutils">{semverutils}</a> R package which provides similar functionality using <code>R6</code>. The <a href="https://CRAN.R-project.org/package=usethis">{usethis}</a> package provides handy utility functions for changing the versions of R packages (<code>usethis::use_version()</code> and <code>usethis::use_dev_version()</code>). R also comes with a <code>package_version()</code> function for creating and validating versions.</p>
<p>Overall semantic versioning provides what they describe as a “formal specification” to facilitate management of package development and the dependencies of that package. It is the most widely-used versioning system and therefore will be understood by a wide variety of users and developers.</p>
<p>Some of the critique raised for semantic versioning is the difficulty of defining how changes correspond to a version increment. Semantic versioning states only breaking changes warrant major releases, but a vast re-write of a code base may also justify a major version change. Different breaking changes have different magnitudes, therefore a change to a single exported function or a change to every exported function will be communicated in a single, equal, version increment.</p>
</section>
<section id="alternatives-to-semantic-versioning" class="level3">
<h3 class="anchored" data-anchor-id="alternatives-to-semantic-versioning">Alternatives to semantic versioning</h3>
<p>There are several other versioning frameworks aside from semantic versioning. One common option is <a href="https://calver.org/">calendar versioning</a> (CalVer). The format of CalVer is usually year-month (YY-MM), or year-month-day (YY-MM-DD), depending on the regularity of releases, and allows appending tags (micros or modifiers, e.g.&nbsp;YY-MM.1).</p>
<p>Other versioning schemes can appear similar to semantic versioning, but do not follow the guidelines around version semantics. In these cases, a bump in the major version may not relate to a breaking change. Additionally, other numbers can be attached to the traditional x.y.z format, such as build numbers. Build number versioning adds an extra number to specify the build (x.y.z.build_number). There are many other variants but covering all versioning systems is outside the scope of this post.</p>
</section>
<section id="versioning-an-r-package" class="level3">
<h3 class="anchored" data-anchor-id="versioning-an-r-package">Versioning an R package</h3>
<p>There are some restrictions on valid version numbers for R packages. The <a href="https://cran.r-project.org/doc/manuals/R-exts.html#The-DESCRIPTION-file">official “Writing R Extensions” guide</a> state:</p>
<blockquote class="blockquote">
<p>This is a sequence of at least two (and usually three) non-negative integers separated by single ‘.’ or ‘-’ characters.</p>
</blockquote>
</section>
<section id="why-version" class="level3">
<h3 class="anchored" data-anchor-id="why-version">Why version?</h3>
<p>The benefits of versioning apply beyond communicating with users and developers. Implementing versioning eases reproducibility by allowing systems to record which version of a language or package was used. In R this can be achieved in several ways, with some popular examples being the <a href="https://rstudio.github.io/renv/index.html">{renv} package</a> and <a href="https://www.docker.com/">docker</a>.</p>
</section>
</section>
<section id="lifecycle-badges" class="level2">
<h2 class="anchored" data-anchor-id="lifecycle-badges">Lifecycle badges</h2>
<p>Badges can be pasted onto visible parts of the code, for example a readme document in the root of the repository, to show the development phase and stability. The three badging systems we will discuss in this post are:</p>
<ul>
<li><a href="https://www.repostatus.org/">RepoStatus</a></li>
<li><a href="https://lifecycle.r-lib.org/">Tidyverse lifecycles</a></li>
<li><a href="https://www.reconverse.org/lifecycle.html">Reconverse lifecyles</a></li>
</ul>
<section id="repostatus" class="level3">
<h3 class="anchored" data-anchor-id="repostatus">RepoStatus</h3>
<p>RepoStatus is a language agnostic set of badges which describe the stages of code development and the possible transitions between those stages.</p>
<p>As shown in the figure below, there are multiple stages to communicate both unstable and stable software. There are also multiple paths between each stage, recognising the varied routes software development can take.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/jantman/repostatus.org/master/gh_pages/images/lifecycle.svg" class="img-fluid figure-img" alt="Flow diagram of the possible transitions from one state to the other in the RepoStatus framework. The flow is not strictly linear as one package can enter and exist stages such as 'suspended', 'abandoned', 'inactive', etc. There a thin green line with the text 'Repo has reached a stable state' between the stages 'concept', 'WIP', 'abandoned', 'suspended' and the stages 'active', 'unsupported', 'inactive'."></p>
<figcaption>RepoStatus badge system. <em>Reused under CC BY-SA 4.0 from <a href="https://www.repostatus.org/">repostatus.org</a></em></figcaption>
</figure>
</div>
</section>
<section id="tidyverse" class="level3">
<h3 class="anchored" data-anchor-id="tidyverse">Tidyverse</h3>
<p>The tidyverse approach is broadly similar to RepoStatus. The {lifecycle} R package contains the description of their process. There are four stages:</p>
<ol type="1">
<li>Experimental</li>
<li>Stable</li>
<li>Superseded (previously called retired)</li>
<li>Deprecated</li>
</ol>
<p>Most code will go through the experimental phase, as it will likely change its API and the number and order of arguments might change. Once code is not going to drastically change (i.e.&nbsp;no breaking changes), at least from a users point of view, it can be labelled stable. In the tidyverse lifecycle schematic, all experimental code transitions to stable code.</p>
<p>The two stages that follow stable are: superseded and deprecated. The former describes a situation in which a new package, a new function or a new argument, depending on the context, has been developed which the developer feels should be used instead of the now superseded code. Superseded code is still developed in the sense that changes to the language or package that may break the function will be fixed as well as bug fixes, but the function will not received ongoing development. The latter, deprecation, is used in cases when the developer thinks that a package or function should not longer be used. This is primarily employed when code is depended on by other software and therefore deleting the code would cause breaks in reverse dependencies. Thus the deprecation warning allows developers of those dependencies time to make the relevant changes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/r-lib/lifecycle/main/vignettes/figures/lifecycle.svg" class="img-fluid figure-img" alt="Flow diagram of the possible transitions from one state to the other in the tidyverse lifecycle framework. Packages will go from experimental to stable, and possibly end up in a superseded or deprecated stage."></p>
<figcaption>{lifecycle} badge system. <em>Reused under MIT license from <a href="https://lifecycle.r-lib.org/articles/stages.html">lifecycles R package</a></em></figcaption>
</figure>
</div>
<p>One of the main differences between the tidyverse lifecycles, compared to the others discussed in this posts is their applicability at different levels in the code. The lifecycle badges can be applied at the package-level (e.g., <a href="https://github.com/tidyverse/stringr">stringr</a>), the function-level (e.g.&nbsp;<a href="https://github.com/tidyverse/dplyr/blob/16b472fb2afc50a87502c2b4ed803e2f5f82b9d6/R/group-trim.R"><code>dplyr::group_trim()</code></a>) or the argument level (e.g., <a href="https://github.com/tidyverse/dplyr/blob/16b472fb2afc50a87502c2b4ed803e2f5f82b9d6/R/across.R#L36"><code>dplyr::across()</code></a>).</p>
<p>Using {lifecycle} in a package can be setup using <code>usethis::use_lifecycle()</code>. The {lifecycle} package not only provides badges, but also informative deprecation notices which communicate to users that a function is not longer supported since a version release of a package. This offers the user a chance to find an alternative function for future use.</p>
<p>The use of deprecation warnings from {lifecycle} leads onto another aspect of tidyverse development: protracted deprecation. There is no fixed rules on how long after a deprecation warning is made to when code should be removed. In the tidyverse, this process is given ample time in order to allow the many developers that utilise tidyverse software to make the necessary changes. Full descriptions of the {lifecycle} package can be found on the <a href="https://lifecycle.r-lib.org/index.html">website</a>, including the deprecated use of questioning and maturing stages.</p>
</section>
<section id="reconverse" class="level3">
<h3 class="anchored" data-anchor-id="reconverse">Reconverse</h3>
<p>Reconverse provides four stages of software development:</p>
<ol type="1">
<li>concept</li>
<li>experimental</li>
<li>maturing</li>
<li>stable</li>
</ol>
<p>A difference between {lifecycle} and reconverse is the explicit connection between semantic versioning and development stage in <a href="https://www.reconverse.org/lifecycle.html">reconverse</a>. The transitions between experimental, maturing and stable are linked to the versioning less than 0.1.0, less than 1.0.0 and greater than 1.0.0, respectively.</p>
</section>
<section id="dynamic-badges" class="level3">
<h3 class="anchored" data-anchor-id="dynamic-badges">Dynamic badges</h3>
<p>All badge frameworks discussed only offer static badges that require developers to manually update as the project moves between phases. This is subject to the maintainers remembering, which can lead to miscommunication about a package’s stage, which may have move on from being experimental, or not been worked on in years but has an active badge.</p>
<p>Dynamics badges, like those offered by <a href="https://shields.io/" class="uri">https://shields.io/</a> give a good indication of how recently the project was changed by showing time since last commit, or the number of commits since last release. These too are not perfect but may better track changes and take the burden of badge updates off the project maintainer.</p>
</section>
</section>
<section id="communicating-development-in-the-epiverse-trace" class="level2">
<h2 class="anchored" data-anchor-id="communicating-development-in-the-epiverse-trace">Communicating development in the Epiverse-TRACE</h2>
<p>Within the Epiverse-TRACE initiative we use semantic versioning and badges to convey to the community interacting with our code at which stage of developement each project is in. We do not have fixed rules on which badges to use and a variety of badges can be found across the repositories in the <a href="https://github.com/epiverse-trace">organisation</a>. For example reconverse badges are used for <a href="https://github.com/epiverse-trace/linelist">{linelist}</a>, RepoStatus badge is used in <a href="https://github.com/epiverse-trace/finalsize">{finalsize}</a>, and tidyverse badges are used in <a href="https://github.com/epiverse-trace/epiparameter">{epiparameter}</a>.</p>
<p>We take this approach as no lifecycle badging system is perfect, each with benefits and downsides. The badges from {lifecycle} are the most common and thus recognisable in R package development, however may not port well to other languages or be familiar to developers coming to R from other frameworks. RepoStatus has the benefit of not being designed for a single language, and it’s number of badges gives greater acuity to the stage of development for a project. This may be especially useful if a package is newly developed and {lifecycle} would describe it as experimental, but RepoStatus provides granularity as to whether it is a concept package, work in progress (WIP) or started but abandoned.</p>
<p>There is some ambiguity in the semantics of the active stage in RepoStatus, which in the definition is “stable, usable state”, but may be misinterpreted as being unstable but actively developed.</p>
<p>Lastly reconverse provides a system akin to {lifecycle} and may be useful for those working in the epidemiology developer space. However, one downside of the reconverse system is there are no clear semantics for a package being deprecated or archived. As with almost all code, at some point development ceases and this stage should be communicated, even if just to say that the package is not being updated inline with developments in the underlying language, in this case R.</p>
<p>There are no plans within Epiverse-TRACE to develop a new badging system as the existing systems cover almost all use cases. In the event that the current development stage cannot be adequately communicated with a single badge from one of the frameworks discussed, a combination of badges can be used. For example, early on in a project adding both the experimental badge from {lifecycle} or reconverse and the WIP badge from RepoStatus may more accurately describe the projects develop pace. Alternatively, the stable badge, from either {lifecycle} or reconverse, can be coupled with either active or inactive from RepoStatus to let other developers know if software will be updated with new language features or dependency deprecations.</p>
<p>Overall, the use of any of the three lifecycle frameworks described here is better than none.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://en.wikipedia.org/wiki/Version_control" class="uri">https://en.wikipedia.org/wiki/Version_control</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{w._lambert2023,
  author = {W. Lambert, Joshua},
  title = {Communicating Development Stages of Open-Source Software},
  date = {2023-07-18},
  url = {https://epiverse-trace.github.io/posts/comm-software-devel/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-w._lambert2023" class="csl-entry quarto-appendix-citeas">
W. Lambert, Joshua. 2023. <span>“Communicating Development Stages of
Open-Source Software.”</span> July 18, 2023. <a href="https://epiverse-trace.github.io/posts/comm-software-devel/">https://epiverse-trace.github.io/posts/comm-software-devel/</a>.
</div></div></section></div> ]]></description>
  <category>open-source</category>
  <category>R</category>
  <category>R package</category>
  <category>versioning</category>
  <category>lifecycles</category>
  <category>community</category>
  <guid>https://epiverse-trace.github.io/posts/comm-software-devel/</guid>
  <pubDate>Tue, 18 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Sharing the C++ Code of an Rcpp Package</title>
  <dc:creator>Pratik Gupte</dc:creator>
  <link>https://epiverse-trace.github.io/posts/share-cpp/</link>
  <description><![CDATA[ 





<section id="why-share-c-code-from-an-rcpp-package" class="level2">
<h2 class="anchored" data-anchor-id="why-share-c-code-from-an-rcpp-package">Why share C++ code from an Rcpp package</h2>
<p>Using the <a href="https://www.rcpp.org/">{Rcpp}</a> package is the dominant method for linking the usability of R with the speed of C++, and can be used to write R packages that are fast and easy to use for both end-users and developers.</p>
<p>From the point of view of developers, it’s very easy to export R code such as functions and classes from an R(cpp) package, but the guidance in the <a href="https://www.rdocumentation.org/packages/Rcpp/versions/1.0.10">Rcpp documentation</a> does not detail how to export the C++ code so that it can be shared with your other Rcpp packages.</p>
<p>Allowing C++ code to be shared can be very beneficial for the same reasons that sharing R code is — packaging code is a reliable way to reuse it.</p>
<p>Some widely used examples of this practice are the <a href="https://cran.r-project.org/web/packages/RcppEigen/index.html">{RcppEigen}</a>, <a href="https://cran.r-project.org/web/packages/RcppArmadillo/index.html">{RcppArmadillo}</a>, <a href="https://cran.r-project.org/web/packages/RcppGSL/index.html">{RcppGSL}</a>, and <a href="https://cran.r-project.org/web/packages/BH/index.html">Boost Headers {BH}</a> packages. Indeed, in the Epiverse-TRACE team, {RcppEigen} underpins the <a href="https://github.com/epiverse-trace/finalsize">{finalsize}</a> and upcoming <a href="https://github.com/epiverse-trace/epidemics">{epidemics}</a> packages.</p>
</section>
<section id="two-ways-to-share-c-code" class="level2">
<h2 class="anchored" data-anchor-id="two-ways-to-share-c-code">Two ways to share C++ code?</h2>
<p>Developers searching for a way to make the C++ code of their Rcpp-based packages shareable will likely find two seemingly distinct ways of doing so.</p>
<ol type="1">
<li><p>Developers reading the Rcpp Attributes documentation will find that package C++ code can be shared by generating a C++ interface for functions that also have an R interface, <a href="https://dirk.eddelbuettel.com/code/rcpp/Rcpp-attributes.pdf">using Rcpp attributes</a>.</p></li>
<li><p>Developers instead scanning widely used Rcpp packages such as {RcppEigen} will notice that C++ code can also be shared by defining the majority of the C++ functions in a package header, to which other Rcpp packages can be linked.</p></li>
</ol>
<p>These are simply different pathways to the writing and export of an R(cpp) package header, which allows Rcpp to link the package’s C++ code to other packages.</p>
<p>This blog post explores different ways of doing this, and explains how the Rcpp packages from Epiverse-TRACE implement C++ code sharing.</p>
</section>
<section id="the-package-header" class="level2">
<h2 class="anchored" data-anchor-id="the-package-header">The package header</h2>
<p>The package header of the package <code>{mypackage}</code> is a file of the name <code>mypackage.h</code> under <code>inst/include</code>. Defining this header is the key step in making (R)C++ code shareable.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># conceptual organisation of an Rcpp package with a package header</span></span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> DESCRIPTION</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> NAMESPACE</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> R</span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── RcppExports.R</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> inst</span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── include</span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     └── mypackage.h       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;= the package header</span></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> src</span>
<span id="cb1-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> RcppExports.cpp</span>
<span id="cb1-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> rcpp_hello.cpp        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;= code from which RcppExports.cpp generates</span></span></code></pre></div></div>
<section id="autogenerating-the-package-header" class="level3">
<h3 class="anchored" data-anchor-id="autogenerating-the-package-header">Autogenerating the package header</h3>
<p>The package header is autogenerated when the attributes of an Rcpp function are edited to also generate a C++ interface.</p>
<p>Consider the Rcpp function below which is exposed to R and exported from the package. The line <code>// [[Rcpp::interfaces(cpp)]]</code> instructs Rcpp to autogenerate two header files under <code>inst/include</code>:</p>
<ol type="1">
<li>A package header, called <code>mypackage.h</code>, and</li>
<li>A helper header called <code>mypackage_RcppExports.h</code> with ‘automagic’ C++ bindings for the function <code>hello_world_rcpp()</code>.</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/rcpp_hello.cpp</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" data-filename="src/rcpp_hello.cpp" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::interfaces(cpp)]]</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @title Test Rcpp function</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' </span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @export</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[[Rcpp::export]]</span></span>
<span id="cb2-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> hello_world_rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-10">  Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Rcout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
</section>
<section id="manually-creating-the-package-header" class="level3">
<h3 class="anchored" data-anchor-id="manually-creating-the-package-header">Manually creating the package header</h3>
<p>The package header can also be created manually, as <code>mypackage.h</code> under <code>inst/include</code>. In this case, the helper file <code>mypackage_RcppExports.h</code> is not generated.</p>
<p>Examples of this are the widely used {RcppEigen} and {RcppArmadillo} packages, while <a href="https://github.com/coatless-r-n-d/rcpp-shared-cpp-functions">this demonstration package by James Balamuta</a> is a minimal example that is a good place to get started to understand how this approach works.</p>
<p>The manually defined package header can initially be empty, and is populated by the developer — more on header contents below.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>It is possible to edit an autogenerated package header to include manually created header files in addition to <code>mypackage_RcppExports.h</code>. To do this, remove the generator tag (see below) to prevent this file from being overwritten by <code>Rcpp::compileAttributes()</code>. Then include any extra header files as usual.</p>
<p>We would however recommend not autogenerating headers from Rcpp functions, but rather writing a header-heavy package — this is the approach used by {RcppEigen} etc. (see more below on how we organise our packages).</p>
</div>
</div>
</section>
<section id="contents-of-the-package-header" class="level3">
<h3 class="anchored" data-anchor-id="contents-of-the-package-header">Contents of the package header</h3>
<p>We found it difficult to get information on the content of the package header.</p>
<p>Autogenerated package headers contain an autogeneration message and a generator token, similar to that present in <code>RcppExports</code> files. Package headers should contain a <a href="https://en.wikipedia.org/wiki/Include_guard">header include guard</a>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The style of the header name in the include guard for autogenerated headers is <code>RCPP_mypackage_H_GEN_</code>. Package headers from the Rcpp core team, such as {RcppEigen} and {RcppArmadillo}, are manually defined and follow the convention <code>mypackage__mypackage__h</code>. In examples, <a href="https://github.com/coatless-r-n-d/rcpp-shared-cpp-functions">such as this bare-bones demonstration package by James Balamuta</a>, you might also encounter a single underscore (<code>_</code>) and a capital <code>H</code> (<code>mypackage_mypackage_H</code>).</p>
<p>If you are <a href="../lint-rcpp/">linting your Rcpp package’s C++ code</a> with <a href="https://github.com/cpplint/cpplint">Cpplint</a>, all three are incompatible with Cpplint’s preference, which is <code>DIR_SUBDIR_FILE_H</code>. Exclude the package header from linting to avoid this warning if you wish to follow an Rcpp community style instead.</p>
</div>
</div>
<p>The package header must also link to the code you want to export, and there are at least three ways of doing this.</p>
<ol type="1">
<li>Include the autogenerated file <code>mypackage_RcppExports.h</code>; this is already done as part of the package header generation.</li>
<li>Directly write C++ code in the package header. This is technically possible, but unlikely to be a good option as your package’s C++ codebase grows.</li>
<li>Manually include any other C++ header files in the package header. This last option might lead to a package header such as that shown below.</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>inst/include/mypackage.h</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" data-filename="inst/include/mypackage.h" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Manually created package header with manual code inclusion</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef mypackage_mypackage_H</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define mypackage_mypackage_H</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// include files using paths relative to inst/include</span></span>
<span id="cb3-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"header_01.h"</span></span>
<span id="cb3-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"header_02.h"</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// mypackage_mypackage_H</span></span></code></pre></div></div>
</div>
<p>Here, the header files might contain code that you wish to make available to other packages, such as a C++ function, struct, or class, and indeed in the current package as well — more on how to do this below.</p>
</section>
</section>
<section id="using-rcpp-in-header-code" class="level2">
<h2 class="anchored" data-anchor-id="using-rcpp-in-header-code">Using Rcpp in header code</h2>
<p>Using {Rcpp}’s C++ functionality, such as the Rcpp classes <code>DataFrame</code> or <code>List</code>, or classes and functions of Rcpp-based packages such as {RcppEigen}, is as simple as including those headers in the appropriate location, just as one would in a source file — see the example below.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>inst/include/header_01.h</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" data-filename="inst/include/header_01.h" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// In a manually created header file, say, header_01.h</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// which is included in mypackage.h</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// to use Rcpp</span></span>
<span id="cb4-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// note the use of inline, more on this later</span></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inline</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> hello_world_rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9">  Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Rcout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
<p>The appropriate headers are automatically included in autogenerated package headers’ helper files, and the developer need not do anything more.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Don’t forget to link to {Rcpp} or similar packages to the package under development by adding the package names under <code>Imports</code>, <code>Depends</code>, or <code>LinkingTo</code> as appropriate.</p>
<p>This can often be handled by functions in the {usethis} package such as <code>usethis::use_rcpp_eigen()</code>. You might also need to add <code>// [[Rcpp::depends(&lt;package&gt;)]]</code> in your package’s C++ source files, with a suitable package dependency specified.</p>
</div>
</div>
<p>The same principles apply to using C++ code from this package ({mypackage}) in future packages.</p>
</section>
<section id="using-header-code-in-the-package" class="level2">
<h2 class="anchored" data-anchor-id="using-header-code-in-the-package">Using header code in the package</h2>
<p>There are some considerations when seeking to use header code from {mypackage} within {mypackage} itself.</p>
<p>Any functions defined in the package headers must be inline functions (see the example above). This prevents compilation errors related to multiple definitions.</p>
<p>C++ source files should include the package header, using <code>#include mypackage.h</code>. Functions, structs, or classes defined in header files will be available from the namespace <code>mypackage</code>, as shown in the example below.</p>
<p>The code in header files will usually need to be wrapped in (R)C++ code that is exposed to R to make functions from the headers available in R — see the snippet below.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mypackage/src/hello_world.cpp</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" data-filename="mypackage/src/hello_world.cpp" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #include &lt;Rcpp.h&gt;       // include Rcpp if necessary</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;mypackage.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">     </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// include package header</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function exposed to R</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @title Rcpp function wrapping a header function</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @export</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb5-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> print_hello_world<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-10">  mypackage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>hello_world_rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// note the namespacing</span></span>
<span id="cb5-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Remember to add <code>PKG_CPPFLAGS += -I../inst/include/</code> to both <code>Makevars</code> and <code>Makevars.win</code> under <code>src/</code>. Furthermore, as noted in the <a href="https://dirk.eddelbuettel.com/code/rcpp/Rcpp-attributes.pdf">Rcpp attributes documentation</a>, the package will not automatically cause a rebuild when headers are modified — this needs to be done manually.</p>
</div>
</div>
</section>
<section id="linking-header-code-between-pacakges" class="level2">
<h2 class="anchored" data-anchor-id="linking-header-code-between-pacakges">Linking header code between pacakges</h2>
<p>Once you have developed your package, you can link to its C++ header code in the same way as you would to any other Rcpp-based package.</p>
<p>Consider the snippet below which shows how to link the C++ code from {mypackage} in a different package called {yourpackage}.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>yourpackage/src/hello_world.cpp</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" data-filename="yourpackage/src/hello_world.cpp" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::depends(mypackage)]]   /// specify dependency</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;mypackage.h&gt;</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define and export an Rcpp function</span></span>
<span id="cb6-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> print_linked_hello<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-6">  mypackage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>hello_world_rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
<p>Be sure to add <code>LinkingTo: mypackage</code> in the <code>DESCRIPTION</code> of the second package {yourpackage}.</p>
</section>
<section id="c-code-sharing-in-epiverse-trace" class="level2">
<h2 class="anchored" data-anchor-id="c-code-sharing-in-epiverse-trace">C++ code sharing in Epiverse-TRACE</h2>
<p>In Epiverse-TRACE, we have structured the {finalsize} and {epidemics} packages to have manually created headers, following the principles laid out above. We follow some additional principles as well.</p>
<dl>
<dt>Header-heavy packages</dt>
<dd>
Our packages are header-heavy, so that most of the actual code is defined in the headers. The source files are primarily intended to contain wrappers that expose the header code to R (and our users).
</dd>
<dt>Namespaces to organise header code</dt>
<dd>
Our header code is organised into C++ namespaces, which makes it easier to understand where functions are likely to be defined, and what they might be related to. It also makes it possible to include the package headers (and namespaces) that are relevant to users, rather than including the entire codebase.
</dd>
</dl>
<p>As an example, functions related to non-pharmaceutical interventions or vaccination regimes from the {epidemics} package can be used in other packages without also including the compartmental epidemic models contained therein.</p>
</section>
<section id="ensuring-the-quality-of-header-code" class="level2">
<h2 class="anchored" data-anchor-id="ensuring-the-quality-of-header-code">Ensuring the quality of header code</h2>
<p>You can lint and statically check code in a package header using <a href="../lint-rcpp/">tools for linting C++ code such as Cpplint and Cppcheck</a>. When doing so, it may be important to specify minimum C++ standards, or even the language (C or C++) to avoid linter errors. This is because tools — such as Cppcheck — assume that headers with the extension <code>.h</code> are C headers, which throws errors when encountering C++ features such as the use of namespaces.</p>
<p>Cppcheck’s language and C++ standard can be set using:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cppcheck</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--std</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>c++14 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--language</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>c++ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--enable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>warning,style <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--error-exitcode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1 inst/include/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.h</span></code></pre></div></div>
<p>Furthermore, header code can also be tested independently of the R(cpp) code that eventually wraps it. This can be done using the <a href="https://github.com/catchorg/Catch2">Catch2 testing framework</a>, which is <a href="https://testthat.r-lib.org/reference/use_catch.html">conveniently available using {testthat}</a> — this is an extensive topic for another post.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Developing an Rcpp-based package with C++ code sharing in mind takes some organisation, or even reorganisation, of the C++ codebase. It is probably a good idea to consider whether your package will implement code that would be of interest to other developers, or to you in related projects. If either of these is true, it may help to structure your package with C++ code sharing in mind from the very beginning of development. This can substantially reduce development overheads and mistakes associated with maintaining multiple copies of the same or similar code in different projects. Fortunately, some great examples of how to do this are among the most-used Rcpp-based packages, providing both a conceptual template to consult for your work, as well as being a demonstration of how beneficial this practice can be in the long run. In Epiverse-TRACE, we intend to continue developing with C++ code sharing as a core principle so that we and other developers can build on our initial work.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gupte2023,
  author = {Gupte, Pratik},
  title = {Sharing the {C++} {Code} of an {Rcpp} {Package}},
  date = {2023-06-05},
  url = {https://epiverse-trace.github.io/posts/share-cpp/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gupte2023" class="csl-entry quarto-appendix-citeas">
Gupte, Pratik. 2023. <span>“Sharing the C++ Code of an Rcpp
Package.”</span> June 5, 2023. <a href="https://epiverse-trace.github.io/posts/share-cpp/">https://epiverse-trace.github.io/posts/share-cpp/</a>.
</div></div></section></div> ]]></description>
  <category>code sharing</category>
  <category>R</category>
  <category>R package</category>
  <category>Rcpp</category>
  <category>interoperability</category>
  <category>package development</category>
  <guid>https://epiverse-trace.github.io/posts/share-cpp/</guid>
  <pubDate>Mon, 05 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Extending Data Frames</title>
  <dc:creator>Joshua W. Lambert</dc:creator>
  <link>https://epiverse-trace.github.io/posts/extend-dataframes/</link>
  <description><![CDATA[ 





<section id="extending-data-frames-in-r" class="level2">
<h2 class="anchored" data-anchor-id="extending-data-frames-in-r">Extending Data Frames in R</h2>
<p>R is a commonly used language for data science and statistical computing. Foundational to this is having data structures that allow manipulation of data with minimal effort and cognitive load. One of the most commonly required data structures is tabular data. This can be represented in R in a few ways, for example a matrix or a data frame. The data frame (class <code>data.frame</code>) is a flexible tabular data structure, as it can hold different data types (e.g.&nbsp;numbers, character strings, etc.) across different columns. This is in contrast to matrices – which are arrays with dimensions – and thus can only hold a single data type.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data frame can hold heterogeneous data types across different columns</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>))</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>  a b c
1 1 4 a
2 2 5 b
3 3 6 c</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each column must be of the same type</span></span>
<span id="cb3-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be careful of the silent type conversion</span></span>
<span id="cb3-4">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>b</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "4" "5" "6"</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-2">mat</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">mat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be careful of the silent type conversion</span></span>
<span id="cb9-3">mat</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,] "1"  "4"  "7" 
[2,] "2"  "5"  "8" 
[3,] "3"  "6"  "9" </code></pre>
</div>
</div>
<p>Data frames can even be nested, cells can be data frames or lists.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb11-2">df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>))</span>
<span id="cb11-3">df</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>     a b
1 y, z x</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb13-2">df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">d =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>))</span>
<span id="cb13-3">df</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>     a b
1 y, z x</code></pre>
</div>
</div>
<p>It is therefore clear why data frames are so prevalent. However, they are not without limitations. They have a relatively basic printing method which can fload the R console when the number of columns or rows is large. They have useful methods (e.g., <code>summary()</code> and <code>str()</code>), but these might not be appropriate for certain types of tabular data. In these cases it is useful to utilise R’s inheritance mechanisms (specifically S3 inheritance) to write extensions for R’s <code>data.frame</code> class. In this case the data frame is the superclass and the new subclass extends it and inherits its methods (see <a href="https://adv-r.hadley.nz/s3.html#s3-inheritance">the <em>Advanced R</em> book</a> for more details on S3 inheritance).</p>
<p>One of the most common extension of the data frame is the <code>tibble</code> from the {tibble} R package. Outlined in <a href="https://tibble.tidyverse.org/articles/tibble.html">{tibble}’s vignette</a>, <code>tibble</code>s offer improvements in printing, subsetting and recycling rules. Another commonly used data frame extension is the <code>data.table</code> class from the <a href="https://github.com/Rdatatable/data.table">{data.table} R package</a>. In addition to the improved printing, this class is designed to improve the performance (i.e.&nbsp;speed and efficiency of operations and storage) of working with tabular data in R and provide a terse syntax for manipulation.</p>
<p>In the process of developing R software (most likely an R package), a new tabular data class that builds atop data frames can become beneficial. This blog post has two main sections:</p>
<ol type="1">
<li>a brief overview of the steps required to setup a class that extends data frames</li>
<li>guide to the technical aspects of class invariants (required data members of a class) and design and implementation decisions, and tidyverse compatibility</li>
</ol>
<section id="writing-a-custom-data-class" class="level3">
<h3 class="anchored" data-anchor-id="writing-a-custom-data-class">Writing a custom data class</h3>
<p>It is useful to write a class constructor function that can be called to create an object of your new class. The functions defined below are a redacted version (for readability) of functions available in the <a href="https://github.com/joshwlambert/ExtendDataFrames">{ExtendDataFrames} R package</a>, which contains example functions and files discussed in this post. When assigning the class name ensure that it is a vector containing <code>"data.frame"</code> as the last element to correctly inherit properties and methods from the <code>data.frame</code> class.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb15-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the vector of classes is required for it to inherit from `data.frame`</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthdays"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>))</span>
<span id="cb15-4">}</span></code></pre></div></div>
<p>That’s all that’s needed to create a subclass of a data frame. However, although we’ve created the class we haven’t given it any functionality and thus it will be identical to a data frame due to inheritance.</p>
<p>We can now write as many methods as we want. Here we will show two methods, one of which does not require writing a generic (<code>print.birthdays</code>) and the second that does (<code>birthdays_per_month</code>). The <code>print()</code> generic function is provided by R, which is why we do not need to add one ourselves. See <a href="https://adv-r.hadley.nz/s3.html#s3-methods">Adv R</a> and this <a href="https://epiverse-trace.github.io/posts/s3-generic/">Epiverse blog post</a> to find out more about S3 generics.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">print.birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(</span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(</span>
<span id="cb16-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A `birthdays` object with %s rows and %s cols"</span>,</span>
<span id="cb16-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(x)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(x)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb16-6">    )</span>
<span id="cb16-7">  )</span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x)</span>
<span id="cb16-9">}</span>
<span id="cb16-10"></span>
<span id="cb16-11">birthdays_per_month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthdays_per_month"</span>)</span>
<span id="cb16-13">}</span>
<span id="cb16-14"></span>
<span id="cb16-15">birthdays_per_month.birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb16-16">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>birthday))</span>
<span id="cb16-17">  months <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb16-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mar"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"May"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jun"</span>,</span>
<span id="cb16-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jul"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aug"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sep"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oct"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nov"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dec"</span></span>
<span id="cb16-20">  )</span>
<span id="cb16-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(out) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> months[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(out))]</span>
<span id="cb16-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(out)</span>
<span id="cb16-23">}</span></code></pre></div></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Useful resources for the “Writing custom data class” section: <a href="https://tibble.tidyverse.org/articles/extending.html">extending <code>tibbles</code> and their functionality</a></p>
</div>
</div>
</section>
<section id="design-decision-around-class-invariants" class="level3">
<h3 class="anchored" data-anchor-id="design-decision-around-class-invariants">Design decision around class invariants</h3>
<p>We will now move on to the second section of the post, in which we discuss the design choices when creating and using S3 classes in R. <strong><em>Class invariants</em></strong> are members of your class that define it. In other words, without these elements your class does not fulfil its basic definition. It is therefore sensible to make sure that your class contains these elements at all times (or at least after operations have been applied to your class). In cases when the class object contains all the invariants normal service can be continued. However, in the case that an invariant is missing or modified to a non-conformist type (e.g.&nbsp;a date converted to a numeric) a decision has to be made. Either the code can error, hopefully giving the user an informative message as to why their modification broke the object; alternatively, the subclass can be revoked and the superclass can be returned. In almost all cases the superclass (i.e.&nbsp;the base class being inherited from) is more general and won’t have the same class invariant restrictions.</p>
<p>For our example class, <code>&lt;birthdays&gt;</code>, the invariants are a column called <code>name</code> which must contain characters, and a column called <code>birthday</code> which must contain dates. The order of the rows and columns is not considered an invariant property, and having extra columns with other names and data types is also allowed. The number of rows is also not an invariant as we can have as many birthdays as we like in the data object.</p>
<p>Here we present both cases as well as considerations and technical details of both options. We’ll demonstrate both of these cases with the subset function in R (subsetting uses a single square bracket for tabular data, <code>[</code>). First the fail-on-subsetting. Before we write the subsetting function it is useful to have a function that checks that an object of our class is valid, a so-called validator function.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">validate_birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb17-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input must contain 'name' and 'birthday' columns"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb17-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthday"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(x)),</span>
<span id="cb17-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"names must be a character"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb17-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name),</span>
<span id="cb17-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthday must be a date"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb17-8">      lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>birthday)</span>
<span id="cb17-9">  )</span>
<span id="cb17-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x)</span>
<span id="cb17-11">}</span></code></pre></div></div>
</div>
<p>This will return an error if the class is not valid (defined in terms of the class’ invariants).</p>
<p>Now we can show how to error if one of the invariants are removed during subsetting. See <code>?NextMethod()</code> for information on method dispatch.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.birthdays</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_birthdays</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>())</span>
<span id="cb18-3">}</span>
<span id="cb18-4"></span>
<span id="cb18-5">birthdays[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Error in validate_birthdays(NextMethod()) :</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  input must contain 'name' and 'birthday' columns</span></span></code></pre></div></div>
</div>
<p>The second design option is the reconstruct-on-subsetting. This checks whether the class is valid, and if not downgrade the class to the superclass, in our case a data frame. This is done by not only validating the object during subsetting but to check whether it is a valid class object, and then either ensuring all of the attributes of the subclass – in our case <code>&lt;birthdays&gt;</code> – are maintained, or attributes are stripped and only the attributes of the base superclass – in our case <code>data.frame</code> – are kept.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Important note: this section of the post relies heavily on <a href="https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat" class="uri">https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat</a>.</p>
</div>
</div>
<p>The four functions that are required to be added to ensure our class is correctly handled when invaliding it are:</p>
<ul>
<li><code>birthdays_reconstruct()</code></li>
<li><code>birthdays_can_reconstruct()</code></li>
<li><code>df_reconstruct()</code></li>
<li><code>dplyr_reconstruct.birthdays()</code></li>
</ul>
<p>We’ll tackle the first three first, and then move onto to the last one as this requires some extra steps.</p>
<p><code>birthdays_reconstruct()</code> is a function that contains an if-else statement to determine whether the returned object is a <code>&lt;birthdays&gt;</code> or <code>data.frame</code> object.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">birthdays_reconstruct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, to) {</span>
<span id="cb19-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_can_reconstruct</span>(x)) {</span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df_reconstruct</span>(x, to)</span>
<span id="cb19-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb19-5">     x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(x)</span>
<span id="cb19-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Removing crucial column in `&lt;birthdays&gt;` returning `&lt;data.frame&gt;`"</span>)</span>
<span id="cb19-7">    x</span>
<span id="cb19-8">  }</span>
<span id="cb19-9">}</span></code></pre></div></div>
</div>
<p>The if-else evaluation is controlled by <code>birthdays_can_reconstruct()</code>. This function determines whether after subsetting the object is a valid <code>&lt;birthdays&gt;</code> class. It checks whether the validator fails, in which case it returns <code>FALSE</code>, otherwise the function will return <code>TRUE</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">birthdays_can_reconstruct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb20-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check whether input is valid</span></span>
<span id="cb20-3">  valid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb20-4">    { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_birthdays</span>(x) },</span>
<span id="cb20-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(cnd) <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb20-6">  )</span>
<span id="cb20-7"></span>
<span id="cb20-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return boolean</span></span>
<span id="cb20-9">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(valid)</span>
<span id="cb20-10">}</span></code></pre></div></div>
</div>
<p>The next function required is <code>df_reconstruct()</code>. This is called when the object is judged to be a valid <code>&lt;birthdays&gt;</code> object and simply copies the attributes over from the <code>&lt;birthdays&gt;</code> class to the object being subset.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">df_reconstruct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, to) {</span>
<span id="cb21-2">  attrs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(to)</span>
<span id="cb21-3">  attrs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x)</span>
<span id="cb21-4">  attrs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>row.names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.row_names_info</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L)</span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> attrs</span>
<span id="cb21-6">  x</span>
<span id="cb21-7">}</span></code></pre></div></div>
</div>
<p>The three functions defined for reconstruction can be added to a package with the subsetting function in order to subset <code>&lt;birthdays&gt;</code> objects and returning either <code>&lt;birthdays&gt;</code> objects if still valid, or data frames when invalidated. This design has the benefit that when conducting data exploration a user is not faced with an error, but can continue with a data frame, while being informed by the message printed to console in <code>birthdays_reconstruct()</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.birthdays</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb22-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>()</span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_reconstruct</span>(out, x)</span>
<span id="cb22-4">}</span></code></pre></div></div>
</div>
</section>
<section id="compatibility-with-dplyr" class="level3">
<h3 class="anchored" data-anchor-id="compatibility-with-dplyr">Compatibility with {dplyr}</h3>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div></div>
</div>
<p>In order to be able to operate on our <code>&lt;birthdays&gt;</code> class using functions from the package {dplyr}, as would be common for data frames, we need to make our function compatible. This is where the function <code>dplyr_reconstruct.birthdays()</code> comes in. <code>dplyr_reconstruct()</code> is a generic function exported by {dplyr}. It is called in {dplyr} verbs to make sure that the objects are restored to the input class when not invalidated.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">dplyr_reconstruct.birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, template) {</span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_reconstruct</span>(data, template)</span>
<span id="cb24-3">}</span></code></pre></div></div>
</div>
<p>Information about the generic can be found through the {dplyr} help documentation.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">?dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>dplyr_extending</span>
<span id="cb25-2">?dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>dplyr_reconstruct</span></code></pre></div></div>
</div>
<p>As explained in the help documentation, {dplyr} also uses two base R functions to perform data manipulation. <code>names&lt;-</code> (i.e the names setter function) and <code>[</code> the one-dimensional subsetting function. We therefore define these methods for our custom class in order for <code>dplyr_reconstruct()</code> to work as intended.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.birthdays</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb26-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>()</span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_reconstruct</span>(out, x)</span>
<span id="cb26-4">}</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names&lt;-.birthdays</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, value) {</span>
<span id="cb26-7">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>()</span>
<span id="cb26-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_reconstruct</span>(out, x)</span>
<span id="cb26-9">}</span></code></pre></div></div>
</div>
<p>This wraps up the need for adding function to perform data manipulation using the reconstruction design outlined above.</p>
<p>However, there is some final housekeeping to do. In cases when {dplyr} is not a package dependency (either imported or suggested), then the S3 generic <code>dplyr_reconstruct()</code> is required to be loaded. In R versions before 3.6.0 – this also works for R versions later than 3.6.0 – the generic function needs to be registered. This is done by writing an <code>.onLoad()</code> function, typically in a file called <code>zzz.R</code>. This is included in the {ExtendDataFrames} package for illustrative purposes.</p>
<!-- 
  This is not yet documented in quarto but it looks like code blocks with the
  'filename' instruction needs .r rather than r as language.
-->
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>zzz.R</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb27" data-filename="zzz.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">.onLoad <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(libname, pkgname) {</span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_register</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr::dplyr_reconstruct"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthdays"</span>)</span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>()</span>
<span id="cb27-4">}</span></code></pre></div></div>
</div>
<p>The <code>s3_register()</code> function used in <code>.onLoad()</code> also needs to be added to the package and this function is kindly supplied by both {vctrs} and {rlang} unlicensed and thus can be copied into another package. See the <a href="https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-attach-vs-load">R packages book</a> for information about <code>.onLoad()</code> and attaching and loading in general.</p>
<p>Since R version 3.6.0 this <a href="https://blog.r-project.org/2019/08/19/s3-method-lookup/index.html">S3 generic registration</a> happens automatically with <code>S3Method()</code> in the package namespace using the {roxygen2} documentation <code>#' @exportS3Method dplyr::dplyr_reconstruct</code>.</p>
<p>There is one last option which prevents the hard dependency on a relatively recent R version. Since {roxygen2} version 6.1.0, there is the <code>@rawNamespace</code> tag which allows insertion of text into the NAMESPACE file. Using this tag the following code will check the local R version and register the S3 method if equal to or above 3.6.0.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @rawNamespace if (getRversion() &gt;= "3.6.0") {</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   S3method(pkg::fun, class)</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' }</span></span></code></pre></div></div>
</div>
<p>Each of the three options for registering S3 methods has different benefits and downsides, so the choice depends on the specific use-case. Over time it may be best to use the most up-to-date methods as packages are usually only maintained for a handful of recent R releases<sup>1</sup>.</p>
<p>The topics discussed in this post have been implemented in the <a href="https://github.com/epiverse-trace/epiparameter">{epiparameter} R package</a> within <a href="https://github.com/epiverse-trace">Epiverse-TRACE</a>.</p>
<p>Compatibility with {vctrs} is also possible using the same mechanism (functions) described in this post, and if interested see <a href="https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat" class="uri">https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat</a> for details.</p>
<p>For other use-cases and discussions of the designs and implementations discussed in this post see:</p>
<ul>
<li><a href="https://github.com/tidymodels/dials">{dials} R package</a></li>
<li><a href="https://github.com/tidymodels/rsample">{rsample} R package</a></li>
<li><a href="https://github.com/tidyverse/googledrive">{googledrive} R package</a></li>
<li><a href="https://github.com/tidyverse/tibble/issues/890">Pull request on {tibble} R package</a></li>
</ul>
<p>This blog post is a compendium of information from sources that are linked and cited throughout. Please refer to those sites for more information and as the primary source for citation in further work.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This is the working practise of tidyverse packages: <a href="https://www.tidyverse.org/blog/2019/04/r-version-support/">https://www.tidyverse.org/blog/2019/04/r-version-support/</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{w._lambert2023,
  author = {W. Lambert, Joshua},
  title = {Extending {Data} {Frames}},
  date = {2023-04-12},
  url = {https://epiverse-trace.github.io/posts/extend-dataframes/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-w._lambert2023" class="csl-entry quarto-appendix-citeas">
W. Lambert, Joshua. 2023. <span>“Extending Data Frames.”</span> April
12, 2023. <a href="https://epiverse-trace.github.io/posts/extend-dataframes/">https://epiverse-trace.github.io/posts/extend-dataframes/</a>.
</div></div></section></div> ]]></description>
  <category>data frame</category>
  <category>R</category>
  <category>R package</category>
  <category>interoperability</category>
  <category>S3</category>
  <category>tidyverse</category>
  <category>object-oriented programming</category>
  <guid>https://epiverse-trace.github.io/posts/extend-dataframes/</guid>
  <pubDate>Wed, 12 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Convert Your R Function to an S3 Generic: Benefits, Pitfalls &amp; Design Considerations</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/s3-generic/</link>
  <description><![CDATA[ 





<p>To build a tight and well-integrated data pipeline, it may be desirable to rely on <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">object orientation (OO)</a> to automatically pass valuable information from one step to the other. OO and data classes can also act as a compatibility layer standardising outputs from various tools under a common structure.</p>
<p>But many packages and software start as standalone projects, and don’t always stem from a careful consideration of the larger ecosystem. In this situation, developers often see little benefit of using an OO system in their project initially.</p>
<p>But as the project matures, and as the position of the tool in the wider ecosystem becomes clearer, they may want to start using OO to benefit from the better integration it may provide with other tools upstream and downstream in the data pipeline. However, by then, their tool likely has an established community of users, and it is important to tread carefully with breaking changes.</p>
<p>In this blog post, we show that it’s possible to start using an S3 OO system almost invisibly in your R package, with minimal disruption to your users. We detail some minor changes that will nonetheless occur, and which pitfalls you should be looking out for. Finally, we take a step back and reflect how you should ensure you are a good open-source citizen in this endeavour.</p>
<section id="benefits" class="level2">
<h2 class="anchored" data-anchor-id="benefits">Benefits</h2>
<p>Let’s reuse the example function from <a href="../statistical-correctness/">one of our previous posts</a>:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb1-2">centroid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(coords, weights) {</span>
<span id="cb1-3"></span>
<span id="cb1-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">}</span></code></pre></div></div>
</div>
<p>Since we wrote and released this function, someone may have designed a clever data class to store coordinates of a set of points and their weights. Let’s imagine they use the following class that they call <code>pointset</code>:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">example_pointset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coords =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)),</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-5">  ),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pointset"</span></span>
<span id="cb2-7">)</span></code></pre></div></div>
</div>
<p>They may also have developed nice utilities for this class so there is a clear motivation for you to integrate with their class since it’s less work you’ll have to do. Plus, you immediately become compatible with any package that uses the same class.</p>
<p>We will not spend too much time on the practical steps to operate this conversion since this is already covered in details in <a href="https://adv-r.hadley.nz/s3.html">the dedicated chapter of Advanced R, by Hadley Wickham</a>, as well as <a href="https://njtierney.github.io/r/missing%20data/rbloggers/2016/11/06/simple-s3-methods/">this blog post from Nick Tierney</a> <sup>1</sup>. But the final result would be:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Compute the centroid of a set of points</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param coords Coordinates of the points as a list of vectors. Each element of</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   the list is a point.</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param weights Vector of weights applied to each of the points</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @returns A vector of coordinates of the same length of each element of </span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `coords`</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   </span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' centroid(</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   list(c(0, 1, 5, 3), c(8, 6, 4, 3), c(10, 2, 3, 7)),</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   weights = c(1, 1, 1)</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' )</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb3-17">centroid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(coords, weights) {</span>
<span id="cb3-18"></span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid"</span>) </span>
<span id="cb3-20"></span>
<span id="cb3-21">}</span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @rdname centroid</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb3-26">centroid.default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(coords, weights) {</span>
<span id="cb3-27"></span>
<span id="cb3-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb3-29"></span>
<span id="cb3-30">}</span>
<span id="cb3-31"></span>
<span id="cb3-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @rdname centroid</span></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb3-35">centroid.pointset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(coords, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb3-36"></span>
<span id="cb3-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coords, coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>weights)</span>
<span id="cb3-38"></span>
<span id="cb3-39">}</span></code></pre></div></div>
</div>
</section>
<section id="what-subtle-changes-should-you-be-looking-out-for" class="level2">
<h2 class="anchored" data-anchor-id="what-subtle-changes-should-you-be-looking-out-for">What subtle changes should you be looking out for?</h2>
<p>You may already have noticed a couple of minor changes in the example above but some changes are even less evident and easy to forget, hence this blog post.</p>
<section id="all-methods-must-have-the-same-arguments-as-the-generic" class="level3">
<h3 class="anchored" data-anchor-id="all-methods-must-have-the-same-arguments-as-the-generic">All methods must have the same arguments as the generic</h3>
<p>You can see that the method for <code>pointset</code> class, <code>centroid.pointset()</code> has a <code>weights</code> argument, even though it is not used because weights are already contained in the <code>coords</code> object. This seems clunky and potentially confusing for users. But this is mandatory because all methods must have the same arguments as the generic.</p>
<p>Another option here could have been to remove <code>weights</code> from the generic, and add <code>...</code> instead, thus allowing to pass <code>weights</code> as an extra argument only in selected methods. This is more idiomatic in R, and in line with the <a href="https://cran.r-project.org/doc/manuals/R-exts.html#Generic-functions-and-methods">recommendation from the official ‘Writing R Extensions’ document (“always keep generics simple”)</a>:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb4-2">centroid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(coords, ...) { </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid"</span>) </span>
<span id="cb4-4">}</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @rdname centroid</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb4-9">centroid.default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(coords, weights, ...) {</span>
<span id="cb4-10"></span>
<span id="cb4-11">  coords_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, coords)</span>
<span id="cb4-12">  </span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(coords_mat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, weighted.mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w =</span> weights))</span>
<span id="cb4-14">  </span>
<span id="cb4-15">}</span></code></pre></div></div>
</div>
<p>But this extra <code>...</code> argument, which is documented as “ignored”, may be confusing as well.</p>
</section>
<section id="more-complex-documentation-presentation" class="level3">
<h3 class="anchored" data-anchor-id="more-complex-documentation-presentation">More complex documentation presentation</h3>
<p>On the topic of arguments, another pitfall related to the conversion to an S3 generic is the change in the documentation. Below is a collage of before / after the change. This is quite minor and some users may not even notice it but I remember it was very confusing to me when I started using R and I didn’t really know what S3 or OO was: “what do you mean, ‘Default S3 method’, which case applies to me?”</p>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row quarto-layout-valign-bottom">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://epiverse-trace.github.io/posts/s3-generic/before_conversion.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of the <code>centroid()</code> documentation before conversion to an S3 generic</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://epiverse-trace.github.io/posts/s3-generic/after_conversion.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of the <code>centroid()</code> documentation after conversion to an S3 generic</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The answer is that “Default S3 method” lists the arguments for <code>centroid.default()</code>, i.e., the method which is used if no other method is defined for your class. Arguments for all methods are usually documented together but you should only focus on those present in the call after the comment stating “S3 method for class ‘XXX’” for the class you’re working with.</p>
</section>
<section id="more-complicated-error-traceback" class="level3">
<h3 class="anchored" data-anchor-id="more-complicated-error-traceback">More complicated error traceback</h3>
<p>Another situation where converting to an S3 adds an extra layer of complexity is where you are trying to follow the error <a href="https://en.wikipedia.org/wiki/Stack_trace">traceback</a>:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-error">
<pre><code>Error in do.call(rbind, coords): second argument must be a list</code></pre>
</div>
</div>
<p>The traceback for the chunk above is:</p>
<blockquote class="blockquote">
<pre><code>4: stop("second argument must be a list")
3: do.call(rbind, coords) at #3
2: centroid.default(3) at #2
1: centroid(3)</code></pre>
</blockquote>
<p>In this example, we see one extra line that did not exist when <code>centroid()</code> was a regular function, rather than a generic:</p>
<blockquote class="blockquote">
<pre><code>centroid.default(3) at #2</code></pre>
</blockquote>
<p>This line corresponds to the dispatch operation.</p>
<p>However, this slight difference in behaviour is likely not a big issue as we mostly expect experienced users to interact with the traceback. These users are likely to be familiar with S3 dispatch and understand the traceback in any case.</p>
</section>
<section id="extra-source-of-bugs-during-dispatch" class="level3">
<h3 class="anchored" data-anchor-id="extra-source-of-bugs-during-dispatch">Extra source of bugs during dispatch</h3>
<p>On a related note, the extra step introduced by this conversion to generic is another potential source of bugs. This doesn’t really impact your users directly but it does mean that as a developer, you will maintaining slightly more complex code and you will need to be more careful when making any changes. However, as always, a robust testing suite should help you catch any error before it makes it to production.</p>
</section>
</section>
<section id="where-should-the-generic-methods-live" class="level2">
<h2 class="anchored" data-anchor-id="where-should-the-generic-methods-live">Where should the generic &amp; methods live?</h2>
<p>In the previous section, we mentioned that you may want to rely on existing, established S3 classes. How does it work in practice when you want to add a method for a class outside of your package? Do you need to import the package where the class is defined? On the other side of the fence, as a class developer, is it okay to provide methods for generics provided in other packages? If you have the choice, should the method live in the package defining the generic or the class?</p>
<section id="where-should-the-generic-live" class="level3">
<h3 class="anchored" data-anchor-id="where-should-the-generic-live">Where should the generic live?</h3>
<p>The generic should always live in the package implementing the actual computation in the function in the first place. For example, if you defined the original <code>centroid()</code> function in a package called geometryops, the S3 generic should also be defined in that package, not in the package defining the <code>pointset</code> class.</p>
<p>It is possible in theory to overwrite a function defined by another package with a generic (“overloading”). For example, we could overload base R <code>table()</code> function with:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(...) { </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(...)</span>
<span id="cb9-3">}</span>
<span id="cb9-4"></span>
<span id="cb9-5">table.default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb9-6">  ...,</span>
<span id="cb9-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exclude =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (useNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NaN</span>),</span>
<span id="cb9-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useNA =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ifany"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"always"</span>),</span>
<span id="cb9-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dnn =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.names</span>(...), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">deparse.level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-10">) {</span>
<span id="cb9-11"></span>
<span id="cb9-12"> base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(</span>
<span id="cb9-13">  ...,</span>
<span id="cb9-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exclude =</span> exclude,</span>
<span id="cb9-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useNA =</span> useNA,</span>
<span id="cb9-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dnn =</span> dnn</span>
<span id="cb9-17"> )</span>
<span id="cb9-18"></span>
<span id="cb9-19">}</span></code></pre></div></div>
</div>
<p>But this is generally considered bad practice, and possibly rude <sup>2</sup>. As a rule of thumb, you should usually avoid:</p>
<ul>
<li>name collisions with functions from other packages (especially base or recommended package);</li>
<li>light wrappers around a function from another package as this may be seen as an attempt to steal citations and credit.</li>
</ul>
</section>
<section id="where-should-the-methods-live" class="level3">
<h3 class="anchored" data-anchor-id="where-should-the-methods-live">Where should the methods live?</h3>
<p>For methods, there is more flexibility than for generics. They could either in the package defining the class, or in the package defining the generic. Let’s present the practical setup in both cases, as well as each strategy pros &amp; cons.</p>
<section id="method-in-the-class-package" class="level4">
<h4 class="anchored" data-anchor-id="method-in-the-class-package">Method in the class package</h4>
<p>This is the strategy used when you defined a new class and provide it with a <code>print()</code>, a <code>summary()</code>, or a <code>plot()</code> method. The generics for these functions are defined in R base.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb10-2">plot.myclass <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, ...) {</span>
<span id="cb10-3">  </span>
<span id="cb10-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code for a beautiful plot for your custom class</span></span>
<span id="cb10-5">  </span>
<span id="cb10-6">}</span></code></pre></div></div>
</div>
<p>If you opt for this strategy, you will need to depend on the package providing the method, as <code>Imports</code>. For example, a package defining a <code>fit.myclass()</code> method for the <code>fit()</code> generic defined in the <a href="https://generics.r-lib.org/">generics</a> package would have the following <code>DESCRIPTION</code> and <code>NAMESPACE</code>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>DESCRIPTION</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" data-filename="DESCRIPTION" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Imports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  generics</span></span></code></pre></div></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>fit.myclass.R</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" data-filename="fit.myclass.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom generics fit</span></span>
<span id="cb12-3">fit.myclass <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb12-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb12-5">}</span></code></pre></div></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>NAMESPACE</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" data-filename="NAMESPACE" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generated by roxygen2: do not edit by hand</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">S3method</span>(fit,myclass)</span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">importFrom</span>(generics,fit)</span></code></pre></div></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Important</span>Importing the generic
</div>
</div>
<div class="callout-body-container callout-body">
<p>It’s worth insisting that you need to import the generic in your <code>NAMESPACE</code> for the method to be recognized and exported correctly by roxygen2. In this specific situation, simply explicitly prefixing the generic call (<code>generic::fit()</code>) is not enough.</p>
</div>
</div>
<p>But this can lead to a <a href="https://www.mail-archive.com/r-package-devel@r-project.org/msg02720.html">rapid increase in the number of dependencies</a> if you provide methods for generics from various packages. Since R 3.6, you can also put generics in <code>Suggests</code> and <a href="https://roxygen2.r-lib.org/articles/namespace.html#s3-methods-for-generics-in-suggested-packages">use delayed assignment</a>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>DESCRIPTION</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" data-filename="DESCRIPTION" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Suggests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  generics</span></span></code></pre></div></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>fit.myclass.R</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" data-filename="fit.myclass.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @exportS3Method generics::fit</span></span>
<span id="cb15-2">fit.myclass <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb15-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb15-4">}</span></code></pre></div></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>NAMESPACE</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb16" data-filename="NAMESPACE" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generated by roxygen2: do not edit by hand</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">S3method</span>(generics<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fit,myclass)</span></code></pre></div></div>
</div>
</section>
<section id="method-in-the-generic-package" class="level4">
<h4 class="anchored" data-anchor-id="method-in-the-generic-package">Method in the generic package</h4>
<p>Alternatively, you can define the method in the package defining the generic. This is the approach taken in the <a href="https://easystats.github.io/report/">report package</a> from example, which defines the <code>report()</code> generic and methods for various model outputs produced by different package.</p>
<p>In theory, no <code>Imports</code> or <code>Suggests</code> is required here:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb17-2">mygeneric <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) { </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(x)</span>
<span id="cb17-4">}</span>
<span id="cb17-5"></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb17-7">mygeneric.externalclass <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb17-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb17-9">}</span></code></pre></div></div>
</div>
<p>However, if you end up providing many methods for a specific class, you could put the package defining it in the uncommon <code>Enhances</code> field. <code>Enhances</code> is defined in ‘<a href="https://cran.r-project.org/doc/manuals/r-release/R-exts.html">Writing R Extensions</a>’ as:</p>
<blockquote class="blockquote">
<p>The ‘Enhances’ field lists packages “enhanced” by the package at hand, e.g., by providing methods for classes from these packages.</p>
</blockquote>
<p>It may be a good idea to explicitly signal the strong relationship between both packages so that the package defining the method is checked as a reverse dependency, and informed of potential breaking changes as discussed below. You may see an example of this in the <a href="https://cran.r-project.org/package=slam">slam package</a>, which provides his methods for both base matrices and sparse matrices, as defined in the Matrix and the spam packages.</p>
</section>
<section id="coordination-between-maintainers" class="level4">
<h4 class="anchored" data-anchor-id="coordination-between-maintainers">Coordination between maintainers</h4>
<p>No matter the strategy you end up choosing, we strongly recommend you keep an open communication channel between the class package and the generic package developer (provided they are not the same person) as breaking changes will impact both parties.</p>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>As we’ve seen here, there are clear benefits to converting your standard function to an S3 generic. This can be done <strong>almost</strong> transparently but we’ve highlighting some subtle changes you may want to consider before pulling the switch.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Spreading the S3 love
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you like S3 and find it helpful to convert your function to an S3 class, you should keep propagating the S3 love by also adding an S3 class to your function output.</p>
<p>With this in mind, in the very first example where we converted our <code>centroid()</code> function to an S3 generic to handle <code>pointset</code> objects, we could also make our output a <code>pointset</code> object.</p>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Note that we focus here on the S3 framework but R has other object orientation frameworks, as discussed in <a href="https://adv-r.hadley.nz/oo.html">the relevant section of the ‘Advanced R’ book by Hadley Wickham</a>↩︎</p></li>
<li id="fn2"><p>Every rule has its exceptions though such as the <a href="https://generics.r-lib.org/">generics</a> package, built by prominent members of the R developer community, which overloads base R functions such as <code>as.factor()</code> or <code>as.difftime()</code>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gruson2023,
  author = {Gruson, Hugo},
  title = {Convert {Your} {R} {Function} to an {S3} {Generic:}
    {Benefits,} {Pitfalls} \&amp; {Design} {Considerations}},
  date = {2023-02-20},
  url = {https://epiverse-trace.github.io/posts/s3-generic/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gruson2023" class="csl-entry quarto-appendix-citeas">
Gruson, Hugo. 2023. <span>“Convert Your R Function to an S3 Generic:
Benefits, Pitfalls &amp; Design Considerations.”</span> February 20,
2023. <a href="https://epiverse-trace.github.io/posts/s3-generic/">https://epiverse-trace.github.io/posts/s3-generic/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R package</category>
  <category>object-oriented programming</category>
  <category>S3</category>
  <category>interoperability</category>
  <guid>https://epiverse-trace.github.io/posts/s3-generic/</guid>
  <pubDate>Mon, 20 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Improving the C++ Code Quality of an Rcpp Package</title>
  <dc:creator>Pratik Gupte</dc:creator>
  <link>https://epiverse-trace.github.io/posts/lint-rcpp/</link>
  <description><![CDATA[ 





<section id="use-case" class="level2">
<h2 class="anchored" data-anchor-id="use-case">Use case</h2>
<p>The R package development ecosystem includes packages such as <a href="https://lintr.r-lib.org/">{lintr}</a> and <a href="https://styler.r-lib.org">{styler}</a> that can help to check code style, and to format R code.</p>
<p>However, these packages cannot lint or style the C++ code of <a href="https://www.rcpp.org/">{Rcpp}</a> packages. This could leave the C++ code of an Rcpp package less clean than the R code, increasing the technical debt already associated with using two languages.</p>
<p>In Epiverse-TRACE, we encounter this issue with <a href="https://epiverse-trace.github.io/finalsize/">{finalsize}</a>, and we anticipate the same issue with further epidemic modelling packages that we seek to develop or adapt, such as <a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005838">{fluEvidenceSynthesis}</a>.</p>
<p>Our use-case is not unique, of course, and other projects could have their own solutions. One such, from which we have borrowed some ideas, is the <a href="https://arrow.apache.org/">Apache Arrow project</a>, whose R package also uses a C++ backend (via <a href="https://cpp11.r-lib.org/">{cpp11}</a> rather than {Rcpp}).</p>
</section>
<section id="choice-of-c-linters" class="level2">
<h2 class="anchored" data-anchor-id="choice-of-c-linters">Choice of C++ linters</h2>
<p>C++ linters such as <a href="https://clang.llvm.org/extra/clang-tidy/"><em>clang-tidy</em></a> stumble when dealing with C++ code in <code>src/</code>, as the <em>clang</em> toolchain attempts to compile it. This does not work for Rcpp packages, as the <code>Rcpp.h</code> header cannot be found — this linking is handled by {Rcpp}.</p>
<p>Fortunately, other C++ linters and code checking tools are available and can be used safely with Rcpp packages.</p>
<p>We have chosen to use <em>cpplint</em> and <em>cppcheck</em> for {finalsize}.</p>
<section id="cpplint" class="level3">
<h3 class="anchored" data-anchor-id="cpplint">Cpplint</h3>
<p><a href="https://github.com/cpplint/cpplint"><em>cpplint</em></a> is a tool that checks whether C/C++ files follow <a href="http://google.github.io/styleguide/cppguide.html">Google’s C++ style guide</a>. <em>cpplint</em> is easy to install across platforms, and does not error when it cannot find <code>Rcpp.h</code>.</p>
<p>Importantly, <em>cpplint</em> can be instructed to not lint the autogenerated <code>RcppExports.cpp</code> file, which follows a different style.</p>
<p>To lint all other <code>.cpp</code> files, we simply run <code>cpplint</code> from the terminal.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cpplint</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--exclude</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src/RcppExports.cpp"</span> src/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.cpp</span></code></pre></div></div>
</section>
<section id="cppcheck" class="level3">
<h3 class="anchored" data-anchor-id="cppcheck">Cppcheck</h3>
<p><a href="https://cppcheck.sourceforge.io/"><em>cppcheck</em></a> is a static code analysis tool, that aims to “have very few false positives”. This is especially useful for the non-standard organisation of Rcpp projects compared to C++ projects.</p>
<p><em>cppcheck</em> can also be run locally and instructed to ignore the autogenerated <code>RcppExports.cpp</code> file, while throwing up issues with style.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cppcheck</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> src/RcppExports.cpp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--enable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>style <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--error-exitcode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1 src</span></code></pre></div></div>
<p>Here, the <code>--enable=style</code> option lets <em>cppcheck</em> flag issues with style, acting as a second linter. This enables the <code>performance</code> and <code>portability</code> flags as well. (We have not found any difference when using <code>--enable=warning</code> instead.)</p>
<p>Enabling all checks (<code>--enable=all</code>) would flag two specific issues for {Rcpp} packages: (1) the <code>Rcpp*.h</code> headers not being found (of the class <code>missingIncludeSystem</code>), and (2) the solver functions not being used by any other C++ function (<code>unusedFunction</code>).</p>
<p>These extra options should be avoided in {Rcpp} packages, as the linking is handled for us, and the functions are indeed used later — just not by other C++ functions.</p>
<p>The <code>--error-exitcode=1</code> argument returns the integer <code>1</code> when an error is found, which is by convention the output for an error.</p>
</section>
</section>
<section id="adding-c-linting-to-ci-workflows" class="level2">
<h2 class="anchored" data-anchor-id="adding-c-linting-to-ci-workflows">Adding C++ linting to CI workflows</h2>
<p>Both <em>cpplint</em> and <em>cppcheck</em> can be easily added to continuous integration workflows. In Epiverse-TRACE, we use Github Actions. The C++ lint workflow we have implemented looks like this:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paths</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src/**"</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_request</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Cpp-lint-check</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpplint</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb3-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/setup-python@v2</span></span>
<span id="cb3-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install cpplint</span></span>
<span id="cb3-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cpplint --quiet --exclude="src/RcppExports.cpp" src/*.cpp</span></span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cppcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb3-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb3-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sudo apt-get install cppcheck</span></span>
<span id="cb3-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cppcheck -i src/RcppExports.cpp --quiet --enable=warning --error-exitcode=1 .</span></span></code></pre></div></div>
<p>The workflow is triggered when there are changes to files in <code>src/</code>, and on all pull requests.</p>
</section>
<section id="formatting-c-code" class="level2">
<h2 class="anchored" data-anchor-id="formatting-c-code">Formatting C++ code</h2>
<p>C++ code can be automatically formatted to avoid linter errors. An especially useful tool is <a href="https://clang.llvm.org/docs/ClangFormat.html"><em>clang-format</em></a>. Our code is styled to follow the <a href="https://google.github.io/styleguide/cppguide.html">Google C++ style guide</a> using:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace .cpp with .h to format headers</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clang-format</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>google src/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.cpp</span></code></pre></div></div>
<p>However, this also formats the autogenerated <code>RcppExports.cpp</code> file. It can be extra work to repeatedly undo this change and keep the original formatting, but <em>clang-format</em> does not provide an easy inline way to ignore this file.</p>
<p>Instead, <em>clang-format</em> can be passed all files except <code>RcppExports.cpp</code> to style using some simple shell commands. In smaller projects, it might be worth</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> src <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.cpp"</span> ! <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RcppExports.cpp"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-exec</span> clang-format <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>google <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> {} <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\;</span></span></code></pre></div></div>
</section>
<section id="turning-off-linting-and-formatting" class="level2">
<h2 class="anchored" data-anchor-id="turning-off-linting-and-formatting">Turning off linting and formatting</h2>
<p>There are cases in which we might want to turn linting and formatting off. This might be when the linter does not agree with valid C++ code required in the project, or when the linters and stylers do not agree with each other. These tools are developed separately by large software projects with their own internal requirements, and solutions to issues encountered in their work: <em>clang-format</em> by LLVM (although specifying <code>-style=google</code>), and <em>cpplint</em> from Google’s work.</p>
<section id="linter-enforced-paradigms" class="level3">
<h3 class="anchored" data-anchor-id="linter-enforced-paradigms">Linter-enforced paradigms</h3>
<p>Sometimes, the linter or styler developer enforces both a style <em>and</em> the use of certain programming paradigms. An example from <em>cpplint</em> is when it warns against passing function arguments by reference, and prefers for these to be passed as pointers, or as constant references (<code>const int &amp;value</code>).</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> some_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* operations modifying value */</span></span>
<span id="cb6-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p>Passing the argument as a <code>const</code> reference would not serve the needs of this function, and passing by value is a valid strategy when we don’t want to get into the details of using pointers. (Note that this is typically an issue when large objects such as custom classes or structs are passed to a function multiple times.)</p>
<p>Similarly, <em>cpplint</em> will throw a warning about accessing variables using <code>std::move</code>, which is something we encounter in the Newton solver in {finalsize}. While not technically wrong for such a simple use case, the linter is correct to cautiously throw a warning nonetheless.</p>
</section>
<section id="linter-styler-disagreement" class="level3">
<h3 class="anchored" data-anchor-id="linter-styler-disagreement">Linter-styler disagreement</h3>
<p>One example of linter-styler disagreement is the use of <code>BOOST_FOREACH</code> from the <a href="https://www.boost.org/">Boost libraries</a> as an alternative to <code>for</code> loops. <em>clang-format</em> will insist on adding two spaces before the opening bracket: <code>BOOST_FOREACH  ()</code>. <em>cpplint</em> will insist on removing one space.</p>
<p><em>cpplint</em> and <em>clang-format</em> also disagree on the order of header inclusions, especially when both local and system headers are included.</p>
</section>
<section id="disabling-checks-on-code-chunks" class="level3">
<h3 class="anchored" data-anchor-id="disabling-checks-on-code-chunks">Disabling checks on code chunks</h3>
<p>Either of these cases could require disabling linting or formatting on some part of the code. It is possible to turn off linting using <em>cpplint</em> at particular lines using the comment <code>// NOLINT</code>. Multiple lines can be protected from linting as well.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// NOLINTBEGIN</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>some C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> code here<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// NOLINTEND</span></span></code></pre></div></div>
<p>Alternatively, <em>clang-format</em> can be instructed to ignore chunks of code using comment messages too.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clang-format off</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>some C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> code here<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clang-format on</span></span></code></pre></div></div>
</section>
</section>
<section id="linter-options-for-future-packages" class="level2">
<h2 class="anchored" data-anchor-id="linter-options-for-future-packages">Linter options for future packages</h2>
<p>{finalsize} is a relatively simple {Rcpp} package, with no C/C++ headers, and no C++ tests. However, future Epiverse-TRACE packages could be more similar to {fluEvidenceSynthesis}, and will have header files, and could also have <a href="https://github.com/catchorg/Catch2">C++ unit tests via the <em>catch</em> framework</a>.</p>
<p><em>cpplint</em> will demand that all local headers be prefixed with their directory (<code>src/</code>), but this would cause the code to break as {Rcpp} looks for a subdirectory called <code>src/src/</code>. This can be turned off by passing the filter option <code>--filter="-build/include_subdir"</code> to <em>cpplint</em>. Alternatively, we could place headers in a subdirectory such as <code>inst/include</code>.</p>
<p>Both <em>cpplint</em> and <em>cppcheck</em> can be instructed to ignore C++ test files using the <em>catch</em> testing framework provided by {testthat}. This prevents errors due to the specialised syntax provided by {testthat} in <code>testthat.h</code>, such as <code>context</code>.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for cpplint, add an extra exclude statement</span></span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cpplint</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>...<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> --exclude=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src/test*.cpp"</span> src/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.cpp</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for cppcheck, suppress checks on test files</span></span>
<span id="cb9-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cppcheck</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>...<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> --suppress=<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>:src/test_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.cpp src</span></code></pre></div></div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>It is actually somewhat surprising that there does not seem to be a canonical linter for C++ code in {Rcpp} packages. The methods laid out here are an initial implementation developed for use with the {finalsize} package, and the considerations here are a starting point. We shall be continuously evaluating how we ensure the quality of our C++ code as we encounter more use cases while developing future Epiverse-TRACE packages.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gupte2023,
  author = {Gupte, Pratik},
  title = {Improving the {C++} {Code} {Quality} of an {Rcpp} {Package}},
  date = {2023-02-16},
  url = {https://epiverse-trace.github.io/posts/lint-rcpp/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gupte2023" class="csl-entry quarto-appendix-citeas">
Gupte, Pratik. 2023. <span>“Improving the C++ Code Quality of an Rcpp
Package.”</span> February 16, 2023. <a href="https://epiverse-trace.github.io/posts/lint-rcpp/">https://epiverse-trace.github.io/posts/lint-rcpp/</a>.
</div></div></section></div> ]]></description>
  <category>code quality</category>
  <category>R</category>
  <category>R package</category>
  <category>Rcpp</category>
  <category>good practices</category>
  <category>continuous integration</category>
  <guid>https://epiverse-trace.github.io/posts/lint-rcpp/</guid>
  <pubDate>Thu, 16 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Ensuring &amp; Showcasing the Statistical Correctness of your R Package</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/statistical-correctness/</link>
  <description><![CDATA[ 





<p>We’re evolving in an increasingly data-driven world. And since critical decisions are taken based on results produced by data scientists and data analysts, they need to be be able to trust the tools they use. It is now increasingly common to add continuous integration to software packages and libraries, to ensure the code is not crashing, and that future updates don’t change your code output (snapshot tests). But one type of test still remains uncommon: tests for statistical correctness. That is, tests that ensure the algorithm implemented in your package actually produce the correct results.</p>
<blockquote class="blockquote">
<p>Does <a href="https://twitter.com/rstudio"><span class="citation" data-cites="rstudio">@rstudio</span></a> have a position in the trustworthiness / validity of any ~statistical methods~ packages in <a href="https://twitter.com/hashtag/Rstats">#Rstats</a>?</p>
<p>Or, is there a list of packages that <a href="https://twitter.com/rstudio"><span class="citation" data-cites="rstudio">@rstudio</span></a> considers ‘approved’ and thus will recommend to clients?</p>
<p>— <em>(deleted tweet)</em> February 3, 2019</p>
</blockquote>
<p>It is likely that most statistical package authors run some tests on their own during development but there doesn’t seem to be guidelines on how to test statistical correctness in a solid and standard way <sup>1</sup>.</p>
<p>In this blog post, we explore various methods to ensure the statistical correctness of your software. We argue that these tests should be part of your continuous integration system, to ensure your tools remains valid throughout its life, and to let users verify how you validate your package. Finally, we show how these principles are implemented in the Epiverse TRACE tools.</p>
<p>The approaches presented here are non-exclusive and should ideally all be added to your tests. However, they are presented in order of stringency and priority to implement. We also take a example of a function computing the centroid of a list of points to demonstrate how you would integrate the recommendations from this post with the <a href="https://testthat.r-lib.org/"><code>{testthat}</code> R package</a>, often used from unit testing:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Compute the centroid of a set of points</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param coords Coordinates of the points as a list of vectors. Each element of the </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   list is a point.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @returns A vector of coordinates of the same length of each element of </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `coords`</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   </span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' centroid(list(c(0, 1, 5, 3), c(8, 6, 4, 3), c(10, 2, 3, 7)))</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb1-12">centroid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(coords) {</span>
<span id="cb1-13"></span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Skip all the necessary input checking for the purpose of this demo</span></span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb1-17"></span>
<span id="cb1-18">  coords_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, coords)</span>
<span id="cb1-19">  </span>
<span id="cb1-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(coords_mat))</span>
<span id="cb1-21">  </span>
<span id="cb1-22">}</span></code></pre></div></div>
</div>
<section id="compare-your-results-to-the-reference-implementation" class="level2">
<h2 class="anchored" data-anchor-id="compare-your-results-to-the-reference-implementation">Compare your results to the reference implementation</h2>
<p>The most straightforward and most solid way to ensure your implementation is valid is to compare your results to the results of the reference implementation. The reference implementation can be a package in another language, an example with toy data in the scientific article introducing the method, etc.</p>
<p>For example, the <a href="https://github.com/fboehm/gemma2"><code>{gemma2}</code> R package</a>, which re-implements the methods from <a href="https://github.com/genetics-statistics/GEMMA">the GEMMA tool written in C++</a>, <a href="https://github.com/fboehm/gemma2/blob/ea3052f8609622f17224fb8ec5fd83bd1bceb33e/tests/testthat/test_calc_sigma.R#L34-L37">verifies that values produced by both tools match</a>:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Results of gemma2 equal those of GEMMA v 0.97"</span>, {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(Sigma_ee, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.559</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.3672</span>)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>)</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(Sigma_uu, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">82.2973</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.9238</span>)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>)</span>
<span id="cb2-4">})</span></code></pre></div></div>
<div class="callout callout-style-default callout-tip callout-titled" title="Example with `centroid()`">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid() in 1D produces the same results as mean()"</span>, {</span>
<span id="cb3-4"></span>
<span id="cb3-5">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(x)))</span>
<span id="cb3-8">  </span>
<span id="cb3-9">})</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🎊</code></pre>
</div>
</div>
</div>
</div>
<p>Note that even if a <strong>reference</strong> implementation doesn’t exist, it is still good practice to compare your implementation to competing ones. Discrepancies might reveal a bug in your implementation or theirs but in any case, finding it out is beneficial to the community.</p>
<p>However, this approach cannot be used in all cases. Indeed, there may not be a reference implementation in your case. Or it might be difficult to replicate identical computations in the case of algorithm with stochasticity <sup>2</sup>.</p>
</section>
<section id="compare-to-a-theoretical-upper-or-lower-bound" class="level2">
<h2 class="anchored" data-anchor-id="compare-to-a-theoretical-upper-or-lower-bound">Compare to a theoretical upper or lower bound</h2>
<p>An alternative strategy is to compare your result to theoretical upper or lower bound. This offers a weaker guarantee that your implementation and your results are correct but it can still allow you to detect important mistakes.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Example with `centroid()`">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid() is inside the hypercube containing the data points"</span>, {</span>
<span id="cb5-2">  </span>
<span id="cb5-3">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb5-4"></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(pmax, x)))</span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(pmin, x)))</span>
<span id="cb5-7">  </span>
<span id="cb5-8">})</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 😀</code></pre>
</div>
</div>
</div>
</div>
<p>You can see a <a href="https://github.com/epiverse-trace/finalsize/blob/a710767b38a9242f15ab4dcf18b02fb5b0bcf24f/tests/testthat/test-newton_solver_vary_r0.R#L1-L13">real-life example of this kind of test in the <code>{finalsize}</code> R package</a>. <code>{finalsize}</code> computes the final proportion of infected in a heterogeneous population according to an SIR model. Theory predicts that the number of infections is maximal in a well-mixed population:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculates the upper limit of final size given the r0</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The upper limit is given by a well mixed population</span></span>
<span id="cb7-3">upper_limit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(r0) {</span>
<span id="cb7-4">  f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(par) {</span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb7-6">  }</span>
<span id="cb7-7">  opt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(</span>
<span id="cb7-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">par =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn =</span> f,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upper =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brent"</span></span>
<span id="cb7-11">  )</span>
<span id="cb7-12">  opt</span>
<span id="cb7-13">}</span></code></pre></div></div>
</section>
<section id="verify-that-output-is-changing-as-expected-when-a-single-parameter-varies" class="level2">
<h2 class="anchored" data-anchor-id="verify-that-output-is-changing-as-expected-when-a-single-parameter-varies">Verify that output is changing as expected when a single parameter varies</h2>
<p>An even looser way to test statistical correctness would be to control that output varies as expected when you update some parameters. This could be for example, checking that the values you return increase when you increase or decrease one of your input parameters.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Example with `centroid()`">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid() increases when coordinates from one point increase"</span>, {</span>
<span id="cb8-2">  </span>
<span id="cb8-3">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb8-4">  </span>
<span id="cb8-5">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb8-6">  y[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> </span>
<span id="cb8-7"></span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(y)))</span>
<span id="cb8-9">  </span>
<span id="cb8-10">})</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 😀</code></pre>
</div>
</div>
</div>
</div>
<p>An example of this test in an actual R package can again be found <a href="https://github.com/epiverse-trace/finalsize/blob/787de9a8fa430d63d06d2bc052c7134c43d1ca69/tests/testthat/test-newton_solver.R#L76-L102">in the finalsize package</a>:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">r0_low <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span></span>
<span id="cb10-2">r0_high <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span></span>
<span id="cb10-3"></span>
<span id="cb10-4">epi_outcome_low <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">final_size</span>(</span>
<span id="cb10-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r0 =</span> r0_low,</span>
<span id="cb10-6">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>...<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-7">)</span>
<span id="cb10-8">epi_outcome_high <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">final_size</span>(</span>
<span id="cb10-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r0 =</span> r0_high,</span>
<span id="cb10-10">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>...<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-11">)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Higher values of R0 result in a higher number of infectious in all groups"</span>, {</span>
<span id="cb10-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb10-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(epi_outcome_high<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_infected <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> epi_outcome_low<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_infected)</span>
<span id="cb10-16">  )</span>
<span id="cb10-17">})</span></code></pre></div></div>
</section>
<section id="conclusion-automated-validation-vs-peer-review" class="level2">
<h2 class="anchored" data-anchor-id="conclusion-automated-validation-vs-peer-review">Conclusion: automated validation vs peer-review</h2>
<p>In this post, we’ve presented different methods to automatically verify the statistical correctness of your statistical software. We would like to highlight one more time that it’s important to run these tests are part of your regular integration system, instead of running them just once at the start of the development. This will prevent the addition of possible errors in the code and show users what specific checks you are doing. By doing so, you are transparently committing to the highest quality.</p>
<p><a href="https://notstatschat.rbind.io/2019/02/04/how-do-you-tell-what-packages-to-trust/">Multiple voices</a> <a href="https://twitter.com/hadleywickham/status/1092129977540231168">in the community</a> are pushing more towards peer-review as a proxy for quality and validity:</p>
<p></p><div id="tweet-85066"></div><script>tweet={"url":"https:\/\/twitter.com\/hadleywickham\/status\/1092129977540231168","author_name":"Hadley Wickham","author_url":"https:\/\/twitter.com\/hadleywickham","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EI don’t think we’d ever validate statistical methods. I’d look for other proxies like peer reviewed publications about the package. I generally prefer to trust _people_ rather than packages.\u003C\/p\u003E&mdash; Hadley Wickham (@hadleywickham) \u003Ca href=\"https:\/\/twitter.com\/hadleywickham\/status\/1092129977540231168?ref_src=twsrc%5Etfw\"\u003EFebruary 3, 2019\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-85066").innerHTML = tweet["html"];</script><p></p>
<p>We would like to highlight that automated validation and peer review are not mutually exclusive and answer slightly different purposes.</p>
<p>On the one hand, automated validation fails to catch more obscure bugs and edge cases. For example, a bug that would be difficult to detect via automated approach is the use of <a href="https://www.jottr.org/2020/09/22/push-for-statistical-sound-rng/">bad Random Number Generators when running in parallel</a>.</p>
<p>But on the other hand, peer-review is less scalable, and journals usually have some editorial policy that might not make your package a good fit. Additionally, peer-review usually happens at one point in time while automated validation can, and should, be part of the continuous integration system.</p>
<p>Ideally, peer-review and automated validation should work hand-in-hand, with review informing the addition of new automated validation tests.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>But see the <a href="https://www.alexpghayes.com/post/2019-06-07_testing-statistical-software/">“testing statistical software” post from Alex Hayes</a> where he presents his process to determine if he deems a statistical package trustworthy or not, and <a href="https://stats-devguide.ropensci.org/">rOpenSci Statistical Software Peer Review book</a>.↩︎</p></li>
<li id="fn2"><p>Setting the random seed is not enough to compare implementations across programming languages because different languages use different kind of Random Number Generators.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gruson2023,
  author = {Gruson, Hugo},
  title = {Ensuring \&amp; {Showcasing} the {Statistical} {Correctness} of
    Your {R} {Package}},
  date = {2023-02-13},
  url = {https://epiverse-trace.github.io/posts/statistical-correctness/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gruson2023" class="csl-entry quarto-appendix-citeas">
Gruson, Hugo. 2023. <span>“Ensuring &amp; Showcasing the Statistical
Correctness of Your R Package.”</span> February 13, 2023. <a href="https://epiverse-trace.github.io/posts/statistical-correctness/">https://epiverse-trace.github.io/posts/statistical-correctness/</a>.
</div></div></section></div> ]]></description>
  <category>code quality</category>
  <category>R</category>
  <category>R package</category>
  <category>testing</category>
  <category>continuous integration</category>
  <category>good practices</category>
  <guid>https://epiverse-trace.github.io/posts/statistical-correctness/</guid>
  <pubDate>Mon, 13 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://epiverse-trace.github.io/posts/statistical-correctness/testing_error.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
